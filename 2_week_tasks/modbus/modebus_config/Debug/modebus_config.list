
modebus_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005618  08005618  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005620  08005620  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  2000000c  08005634  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a8c  08005634  00020a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcb8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027cb  00000000  00000000  0002fcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  000324c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00033310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c93  00000000  00000000  00034218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011913  00000000  00000000  00055eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce515  00000000  00000000  000677be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135cd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f0  00000000  00000000  00135d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800527c 	.word	0x0800527c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800527c 	.word	0x0800527c

08000204 <TbxPortInterruptsDisable>:
TbxPortInterruptsDisable:
  /* Store state of the currently enabled/disabled interrupts in register 0. On the 
   * ARM Cortex this is stored in CPU register PRIMASK. Note that register 0 is used by
   * GCC for storing the return value of a function.
   */
  mrs   r0, primask
 8000204:	f3ef 8010 	mrs	r0, PRIMASK
  /* Disable the interrupts by setting all bits in the CPU register PRIMASK to a value
   * of 1, which means the actication of the exception is prevented.
   */
  cpsid i
 8000208:	b672      	cpsid	i
  /* Return from this function by branching back to the location stored in the link
   * register.
   */
  bx    lr
 800020a:	4770      	bx	lr

0800020c <TbxPortInterruptsRestore>:
TbxPortInterruptsRestore:
  /* Restore the state of the interrupts by storing the value of register 0 in the CPU
   * register PRIMASK. Note that register 0 is used by GCC for passing the first function
   * parameter.
   */
  msr   primask, r0
 800020c:	f380 8810 	msr	PRIMASK, r0
  /* Return from this function by branching back to the location stored in the link
   * register.
   */
  bx    lr
 8000210:	4770      	bx	lr
	...

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	modbusTp = TbxMbRtuCreate(10, TBX_MB_UART_PORT1, TBX_MB_UART_19200BPS,
 800051e:	2301      	movs	r3, #1
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2204      	movs	r2, #4
 8000526:	2100      	movs	r1, #0
 8000528:	200a      	movs	r0, #10
 800052a:	f002 fe01 	bl	8003130 <TbxMbRtuCreate>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <main+0x48>)
 8000532:	6013      	str	r3, [r2, #0]
	                          TBX_MB_UART_1_STOPBITS, TBX_MB_EVEN_PARITY);
	modbusServer = TbxMbServerCreate(modbusTp);
 8000534:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <main+0x48>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f003 fb9b 	bl	8003c74 <TbxMbServerCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <main+0x4c>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fa38 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f80e 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f8c8 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000550:	f000 f89a 	bl	8000688 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8000554:	f000 f874 	bl	8000640 <MX_TIM10_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  TbxMbEventTask();
 8000558:	f002 fd00 	bl	8002f5c <TbxMbEventTask>
 800055c:	e7fc      	b.n	8000558 <main+0x40>
 800055e:	bf00      	nop
 8000560:	200000b4 	.word	0x200000b4
 8000564:	200000b8 	.word	0x200000b8

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2234      	movs	r2, #52	; 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fe78 	bl	800526c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a28      	ldr	r2, [pc, #160]	; (8000638 <SystemClock_Config+0xd0>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a8:	2300      	movs	r3, #0
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd4>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005e0:	2354      	movs	r3, #84	; 0x54
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 f82f 	bl	8001658 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000600:	f000 f8dc 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	2102      	movs	r1, #2
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fccf 	bl	8000fc4 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800062c:	f000 f8c6 	bl	80007bc <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	; 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_TIM10_Init+0x40>)
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <MX_TIM10_Init+0x44>)
 8000648:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4199;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_TIM10_Init+0x40>)
 800064c:	f241 0267 	movw	r2, #4199	; 0x1067
 8000650:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_TIM10_Init+0x40>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_TIM10_Init+0x40>)
 800065a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800065e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_TIM10_Init+0x40>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_TIM10_Init+0x40>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_TIM10_Init+0x40>)
 800066e:	f001 fa91 	bl	8001b94 <HAL_TIM_Base_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000678:	f000 f8a0 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000028 	.word	0x20000028
 8000684:	40014400 	.word	0x40014400

08000688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_USART2_UART_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 800069c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006a0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 80006aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 80006c4:	f001 fb56 	bl	8001d74 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80006ce:	f000 f875 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000070 	.word	0x20000070
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a2c      	ldr	r2, [pc, #176]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <MX_GPIO_Init+0xd0>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <MX_GPIO_Init+0xd4>)
 800076c:	f000 fc10 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000776:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_GPIO_Init+0xd8>)
 8000788:	f000 fa6e 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078c:	2320      	movs	r3, #32
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_GPIO_Init+0xd4>)
 80007a4:	f000 fa60 	bl	8000c68 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020800 	.word	0x40020800

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_MspInit+0x4c>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	; 0x44
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000806:	2007      	movs	r0, #7
 8000808:	f000 f9fa 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800

08000818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <HAL_TIM_Base_MspInit+0x3c>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d10d      	bne.n	8000846 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_TIM_Base_MspInit+0x40>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a09      	ldr	r2, [pc, #36]	; (8000858 <HAL_TIM_Base_MspInit+0x40>)
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <HAL_TIM_Base_MspInit+0x40>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40014400 	.word	0x40014400
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <HAL_UART_MspInit+0x84>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d12b      	bne.n	80008d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_UART_MspInit+0x88>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_UART_MspInit+0x88>)
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_UART_MspInit+0x88>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_UART_MspInit+0x88>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <HAL_UART_MspInit+0x88>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_UART_MspInit+0x88>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b6:	230c      	movs	r3, #12
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c6:	2307      	movs	r3, #7
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_UART_MspInit+0x8c>)
 80008d2:	f000 f9c9 	bl	8000c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40004400 	.word	0x40004400
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f890 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <SystemInit+0x20>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <SystemInit+0x20>)
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800099c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800096a:	490e      	ldr	r1, [pc, #56]	; (80009a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000980:	4c0b      	ldr	r4, [pc, #44]	; (80009b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800098e:	f7ff ffd7 	bl	8000940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000992:	f004 fc47 	bl	8005224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000996:	f7ff fdbf 	bl	8000518 <main>
  bx  lr    
 800099a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800099c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a8:	08005628 	.word	0x08005628
  ldr r2, =_sbss
 80009ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009b0:	20000a8c 	.word	0x20000a8c

080009b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <HAL_Init+0x40>)
 80009c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_Init+0x40>)
 80009ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_Init+0x40>)
 80009da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f90d 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 f808 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff feec 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023c00 	.word	0x40023c00

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f917 	bl	8000c4e <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a38:	f000 f8ed 	bl	8000c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	200000bc 	.word	0x200000bc

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	200000bc 	.word	0x200000bc

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	f7ff ff8e 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff47 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff5c 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff8e 	bl	8000b54 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5d 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffb0 	bl	8000bbc <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	e165      	b.n	8000f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 8154 	bne.w	8000f4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d005      	beq.n	8000cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d130      	bne.n	8000d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	f003 0201 	and.w	r2, r3, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d017      	beq.n	8000d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d123      	bne.n	8000dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	691a      	ldr	r2, [r3, #16]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	08da      	lsrs	r2, r3, #3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3208      	adds	r2, #8
 8000da6:	69b9      	ldr	r1, [r7, #24]
 8000da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0203 	and.w	r2, r3, #3
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80ae 	beq.w	8000f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b5d      	ldr	r3, [pc, #372]	; (8000f68 <HAL_GPIO_Init+0x300>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a5c      	ldr	r2, [pc, #368]	; (8000f68 <HAL_GPIO_Init+0x300>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b5a      	ldr	r3, [pc, #360]	; (8000f68 <HAL_GPIO_Init+0x300>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e0a:	4a58      	ldr	r2, [pc, #352]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4f      	ldr	r2, [pc, #316]	; (8000f70 <HAL_GPIO_Init+0x308>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d025      	beq.n	8000e82 <HAL_GPIO_Init+0x21a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4e      	ldr	r2, [pc, #312]	; (8000f74 <HAL_GPIO_Init+0x30c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d01f      	beq.n	8000e7e <HAL_GPIO_Init+0x216>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4d      	ldr	r2, [pc, #308]	; (8000f78 <HAL_GPIO_Init+0x310>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d019      	beq.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4c      	ldr	r2, [pc, #304]	; (8000f7c <HAL_GPIO_Init+0x314>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0x20e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4b      	ldr	r2, [pc, #300]	; (8000f80 <HAL_GPIO_Init+0x318>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00d      	beq.n	8000e72 <HAL_GPIO_Init+0x20a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4a      	ldr	r2, [pc, #296]	; (8000f84 <HAL_GPIO_Init+0x31c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x206>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a49      	ldr	r2, [pc, #292]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_GPIO_Init+0x202>
 8000e66:	2306      	movs	r3, #6
 8000e68:	e00c      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	e00a      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e6e:	2305      	movs	r3, #5
 8000e70:	e008      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e72:	2304      	movs	r3, #4
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e004      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <HAL_GPIO_Init+0x21c>
 8000e82:	2300      	movs	r3, #0
 8000e84:	69fa      	ldr	r2, [r7, #28]
 8000e86:	f002 0203 	and.w	r2, r2, #3
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	4093      	lsls	r3, r2
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e94:	4935      	ldr	r1, [pc, #212]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ea2:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ec6:	4a31      	ldr	r2, [pc, #196]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ef0:	4a26      	ldr	r2, [pc, #152]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f44:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	2b0f      	cmp	r3, #15
 8000f54:	f67f ae96 	bls.w	8000c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40013800 	.word	0x40013800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020c00 	.word	0x40020c00
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40021400 	.word	0x40021400
 8000f88:	40021800 	.word	0x40021800
 8000f8c:	40013c00 	.word	0x40013c00

08000f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fac:	e003      	b.n	8000fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	041a      	lsls	r2, r3, #16
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	619a      	str	r2, [r3, #24]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e0cc      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd8:	4b68      	ldr	r3, [pc, #416]	; (800117c <HAL_RCC_ClockConfig+0x1b8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d90c      	bls.n	8001000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe6:	4b65      	ldr	r3, [pc, #404]	; (800117c <HAL_RCC_ClockConfig+0x1b8>)
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fee:	4b63      	ldr	r3, [pc, #396]	; (800117c <HAL_RCC_ClockConfig+0x1b8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d001      	beq.n	8001000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e0b8      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d020      	beq.n	800104e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001018:	4b59      	ldr	r3, [pc, #356]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	4a58      	ldr	r2, [pc, #352]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	2b00      	cmp	r3, #0
 800102e:	d005      	beq.n	800103c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001030:	4b53      	ldr	r3, [pc, #332]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800103a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800103c:	4b50      	ldr	r3, [pc, #320]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	494d      	ldr	r1, [pc, #308]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 800104a:	4313      	orrs	r3, r2
 800104c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d044      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d107      	bne.n	8001072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	4b47      	ldr	r3, [pc, #284]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d119      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e07f      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d003      	beq.n	8001082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800107e:	2b03      	cmp	r3, #3
 8001080:	d107      	bne.n	8001092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001082:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e06f      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001092:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e067      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010a2:	4b37      	ldr	r3, [pc, #220]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f023 0203 	bic.w	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4934      	ldr	r1, [pc, #208]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010b4:	f7ff fce6 	bl	8000a84 <HAL_GetTick>
 80010b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ba:	e00a      	b.n	80010d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010bc:	f7ff fce2 	bl	8000a84 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e04f      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d2:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 020c 	and.w	r2, r3, #12
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d1eb      	bne.n	80010bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_RCC_ClockConfig+0x1b8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d20c      	bcs.n	800110c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <HAL_RCC_ClockConfig+0x1b8>)
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <HAL_RCC_ClockConfig+0x1b8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d001      	beq.n	800110c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e032      	b.n	8001172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d008      	beq.n	800112a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4916      	ldr	r1, [pc, #88]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001126:	4313      	orrs	r3, r2
 8001128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	490e      	ldr	r1, [pc, #56]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	4313      	orrs	r3, r2
 8001148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800114a:	f000 f855 	bl	80011f8 <HAL_RCC_GetSysClockFreq>
 800114e:	4602      	mov	r2, r0
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	490a      	ldr	r1, [pc, #40]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 800115c:	5ccb      	ldrb	r3, [r1, r3]
 800115e:	fa22 f303 	lsr.w	r3, r2, r3
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_RCC_ClockConfig+0x1c8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fc46 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023c00 	.word	0x40023c00
 8001180:	40023800 	.word	0x40023800
 8001184:	08005400 	.word	0x08005400
 8001188:	20000000 	.word	0x20000000
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000000 	.word	0x20000000

080011a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011ac:	f7ff fff0 	bl	8001190 <HAL_RCC_GetHCLKFreq>
 80011b0:	4602      	mov	r2, r0
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	0a9b      	lsrs	r3, r3, #10
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	4903      	ldr	r1, [pc, #12]	; (80011cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80011be:	5ccb      	ldrb	r3, [r1, r3]
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	08005410 	.word	0x08005410

080011d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80011d4:	f7ff ffdc 	bl	8001190 <HAL_RCC_GetHCLKFreq>
 80011d8:	4602      	mov	r2, r0
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	0b5b      	lsrs	r3, r3, #13
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	4903      	ldr	r1, [pc, #12]	; (80011f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011e6:	5ccb      	ldrb	r3, [r1, r3]
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	08005410 	.word	0x08005410

080011f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011fc:	b0ae      	sub	sp, #184	; 0xb8
 80011fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800121e:	4bcb      	ldr	r3, [pc, #812]	; (800154c <HAL_RCC_GetSysClockFreq+0x354>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b0c      	cmp	r3, #12
 8001228:	f200 8206 	bhi.w	8001638 <HAL_RCC_GetSysClockFreq+0x440>
 800122c:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <HAL_RCC_GetSysClockFreq+0x3c>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	08001269 	.word	0x08001269
 8001238:	08001639 	.word	0x08001639
 800123c:	08001639 	.word	0x08001639
 8001240:	08001639 	.word	0x08001639
 8001244:	08001271 	.word	0x08001271
 8001248:	08001639 	.word	0x08001639
 800124c:	08001639 	.word	0x08001639
 8001250:	08001639 	.word	0x08001639
 8001254:	08001279 	.word	0x08001279
 8001258:	08001639 	.word	0x08001639
 800125c:	08001639 	.word	0x08001639
 8001260:	08001639 	.word	0x08001639
 8001264:	08001469 	.word	0x08001469
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001268:	4bb9      	ldr	r3, [pc, #740]	; (8001550 <HAL_RCC_GetSysClockFreq+0x358>)
 800126a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800126e:	e1e7      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001270:	4bb8      	ldr	r3, [pc, #736]	; (8001554 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001276:	e1e3      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001278:	4bb4      	ldr	r3, [pc, #720]	; (800154c <HAL_RCC_GetSysClockFreq+0x354>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001284:	4bb1      	ldr	r3, [pc, #708]	; (800154c <HAL_RCC_GetSysClockFreq+0x354>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d071      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001290:	4bae      	ldr	r3, [pc, #696]	; (800154c <HAL_RCC_GetSysClockFreq+0x354>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	099b      	lsrs	r3, r3, #6
 8001296:	2200      	movs	r2, #0
 8001298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800129c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80012a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80012b6:	4622      	mov	r2, r4
 80012b8:	462b      	mov	r3, r5
 80012ba:	f04f 0000 	mov.w	r0, #0
 80012be:	f04f 0100 	mov.w	r1, #0
 80012c2:	0159      	lsls	r1, r3, #5
 80012c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012c8:	0150      	lsls	r0, r2, #5
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4621      	mov	r1, r4
 80012d0:	1a51      	subs	r1, r2, r1
 80012d2:	6439      	str	r1, [r7, #64]	; 0x40
 80012d4:	4629      	mov	r1, r5
 80012d6:	eb63 0301 	sbc.w	r3, r3, r1
 80012da:	647b      	str	r3, [r7, #68]	; 0x44
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80012e8:	4649      	mov	r1, r9
 80012ea:	018b      	lsls	r3, r1, #6
 80012ec:	4641      	mov	r1, r8
 80012ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012f2:	4641      	mov	r1, r8
 80012f4:	018a      	lsls	r2, r1, #6
 80012f6:	4641      	mov	r1, r8
 80012f8:	1a51      	subs	r1, r2, r1
 80012fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80012fc:	4649      	mov	r1, r9
 80012fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001310:	4649      	mov	r1, r9
 8001312:	00cb      	lsls	r3, r1, #3
 8001314:	4641      	mov	r1, r8
 8001316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800131a:	4641      	mov	r1, r8
 800131c:	00ca      	lsls	r2, r1, #3
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	4603      	mov	r3, r0
 8001324:	4622      	mov	r2, r4
 8001326:	189b      	adds	r3, r3, r2
 8001328:	633b      	str	r3, [r7, #48]	; 0x30
 800132a:	462b      	mov	r3, r5
 800132c:	460a      	mov	r2, r1
 800132e:	eb42 0303 	adc.w	r3, r2, r3
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001340:	4629      	mov	r1, r5
 8001342:	024b      	lsls	r3, r1, #9
 8001344:	4621      	mov	r1, r4
 8001346:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800134a:	4621      	mov	r1, r4
 800134c:	024a      	lsls	r2, r1, #9
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001356:	2200      	movs	r2, #0
 8001358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800135c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001360:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001364:	f7fe ff56 	bl	8000214 <__aeabi_uldivmod>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4613      	mov	r3, r2
 800136e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001372:	e067      	b.n	8001444 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001374:	4b75      	ldr	r3, [pc, #468]	; (800154c <HAL_RCC_GetSysClockFreq+0x354>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	099b      	lsrs	r3, r3, #6
 800137a:	2200      	movs	r2, #0
 800137c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001380:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001384:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800138c:	67bb      	str	r3, [r7, #120]	; 0x78
 800138e:	2300      	movs	r3, #0
 8001390:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001392:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001396:	4622      	mov	r2, r4
 8001398:	462b      	mov	r3, r5
 800139a:	f04f 0000 	mov.w	r0, #0
 800139e:	f04f 0100 	mov.w	r1, #0
 80013a2:	0159      	lsls	r1, r3, #5
 80013a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013a8:	0150      	lsls	r0, r2, #5
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4621      	mov	r1, r4
 80013b0:	1a51      	subs	r1, r2, r1
 80013b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80013b4:	4629      	mov	r1, r5
 80013b6:	eb63 0301 	sbc.w	r3, r3, r1
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80013c8:	4649      	mov	r1, r9
 80013ca:	018b      	lsls	r3, r1, #6
 80013cc:	4641      	mov	r1, r8
 80013ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013d2:	4641      	mov	r1, r8
 80013d4:	018a      	lsls	r2, r1, #6
 80013d6:	4641      	mov	r1, r8
 80013d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80013dc:	4649      	mov	r1, r9
 80013de:	eb63 0b01 	sbc.w	fp, r3, r1
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013f6:	4692      	mov	sl, r2
 80013f8:	469b      	mov	fp, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	eb1a 0303 	adds.w	r3, sl, r3
 8001400:	623b      	str	r3, [r7, #32]
 8001402:	462b      	mov	r3, r5
 8001404:	eb4b 0303 	adc.w	r3, fp, r3
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001416:	4629      	mov	r1, r5
 8001418:	028b      	lsls	r3, r1, #10
 800141a:	4621      	mov	r1, r4
 800141c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001420:	4621      	mov	r1, r4
 8001422:	028a      	lsls	r2, r1, #10
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800142c:	2200      	movs	r2, #0
 800142e:	673b      	str	r3, [r7, #112]	; 0x70
 8001430:	677a      	str	r2, [r7, #116]	; 0x74
 8001432:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001436:	f7fe feed 	bl	8000214 <__aeabi_uldivmod>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4613      	mov	r3, r2
 8001440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001444:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_RCC_GetSysClockFreq+0x354>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	0c1b      	lsrs	r3, r3, #16
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	3301      	adds	r3, #1
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800145a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001466:	e0eb      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001468:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_RCC_GetSysClockFreq+0x354>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001474:	4b35      	ldr	r3, [pc, #212]	; (800154c <HAL_RCC_GetSysClockFreq+0x354>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d06b      	beq.n	8001558 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <HAL_RCC_GetSysClockFreq+0x354>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	2200      	movs	r2, #0
 8001488:	66bb      	str	r3, [r7, #104]	; 0x68
 800148a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800148c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800148e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001492:	663b      	str	r3, [r7, #96]	; 0x60
 8001494:	2300      	movs	r3, #0
 8001496:	667b      	str	r3, [r7, #100]	; 0x64
 8001498:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800149c:	4622      	mov	r2, r4
 800149e:	462b      	mov	r3, r5
 80014a0:	f04f 0000 	mov.w	r0, #0
 80014a4:	f04f 0100 	mov.w	r1, #0
 80014a8:	0159      	lsls	r1, r3, #5
 80014aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014ae:	0150      	lsls	r0, r2, #5
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4621      	mov	r1, r4
 80014b6:	1a51      	subs	r1, r2, r1
 80014b8:	61b9      	str	r1, [r7, #24]
 80014ba:	4629      	mov	r1, r5
 80014bc:	eb63 0301 	sbc.w	r3, r3, r1
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80014ce:	4659      	mov	r1, fp
 80014d0:	018b      	lsls	r3, r1, #6
 80014d2:	4651      	mov	r1, sl
 80014d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014d8:	4651      	mov	r1, sl
 80014da:	018a      	lsls	r2, r1, #6
 80014dc:	4651      	mov	r1, sl
 80014de:	ebb2 0801 	subs.w	r8, r2, r1
 80014e2:	4659      	mov	r1, fp
 80014e4:	eb63 0901 	sbc.w	r9, r3, r1
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014fc:	4690      	mov	r8, r2
 80014fe:	4699      	mov	r9, r3
 8001500:	4623      	mov	r3, r4
 8001502:	eb18 0303 	adds.w	r3, r8, r3
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	462b      	mov	r3, r5
 800150a:	eb49 0303 	adc.w	r3, r9, r3
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800151c:	4629      	mov	r1, r5
 800151e:	024b      	lsls	r3, r1, #9
 8001520:	4621      	mov	r1, r4
 8001522:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001526:	4621      	mov	r1, r4
 8001528:	024a      	lsls	r2, r1, #9
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001532:	2200      	movs	r2, #0
 8001534:	65bb      	str	r3, [r7, #88]	; 0x58
 8001536:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001538:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800153c:	f7fe fe6a 	bl	8000214 <__aeabi_uldivmod>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4613      	mov	r3, r2
 8001546:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800154a:	e065      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x420>
 800154c:	40023800 	.word	0x40023800
 8001550:	00f42400 	.word	0x00f42400
 8001554:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001558:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <HAL_RCC_GetSysClockFreq+0x458>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	099b      	lsrs	r3, r3, #6
 800155e:	2200      	movs	r2, #0
 8001560:	4618      	mov	r0, r3
 8001562:	4611      	mov	r1, r2
 8001564:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001568:	653b      	str	r3, [r7, #80]	; 0x50
 800156a:	2300      	movs	r3, #0
 800156c:	657b      	str	r3, [r7, #84]	; 0x54
 800156e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001572:	4642      	mov	r2, r8
 8001574:	464b      	mov	r3, r9
 8001576:	f04f 0000 	mov.w	r0, #0
 800157a:	f04f 0100 	mov.w	r1, #0
 800157e:	0159      	lsls	r1, r3, #5
 8001580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001584:	0150      	lsls	r0, r2, #5
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4641      	mov	r1, r8
 800158c:	1a51      	subs	r1, r2, r1
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	4649      	mov	r1, r9
 8001592:	eb63 0301 	sbc.w	r3, r3, r1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80015a4:	4659      	mov	r1, fp
 80015a6:	018b      	lsls	r3, r1, #6
 80015a8:	4651      	mov	r1, sl
 80015aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ae:	4651      	mov	r1, sl
 80015b0:	018a      	lsls	r2, r1, #6
 80015b2:	4651      	mov	r1, sl
 80015b4:	1a54      	subs	r4, r2, r1
 80015b6:	4659      	mov	r1, fp
 80015b8:	eb63 0501 	sbc.w	r5, r3, r1
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	00eb      	lsls	r3, r5, #3
 80015c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015ca:	00e2      	lsls	r2, r4, #3
 80015cc:	4614      	mov	r4, r2
 80015ce:	461d      	mov	r5, r3
 80015d0:	4643      	mov	r3, r8
 80015d2:	18e3      	adds	r3, r4, r3
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	464b      	mov	r3, r9
 80015d8:	eb45 0303 	adc.w	r3, r5, r3
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015ea:	4629      	mov	r1, r5
 80015ec:	028b      	lsls	r3, r1, #10
 80015ee:	4621      	mov	r1, r4
 80015f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015f4:	4621      	mov	r1, r4
 80015f6:	028a      	lsls	r2, r1, #10
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001600:	2200      	movs	r2, #0
 8001602:	64bb      	str	r3, [r7, #72]	; 0x48
 8001604:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001606:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800160a:	f7fe fe03 	bl	8000214 <__aeabi_uldivmod>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4613      	mov	r3, r2
 8001614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_RCC_GetSysClockFreq+0x458>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	0f1b      	lsrs	r3, r3, #28
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800162a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001636:	e003      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_GetSysClockFreq+0x45c>)
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800163e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001640:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001644:	4618      	mov	r0, r3
 8001646:	37b8      	adds	r7, #184	; 0xb8
 8001648:	46bd      	mov	sp, r7
 800164a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	00f42400 	.word	0x00f42400

08001658 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e28d      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8083 	beq.w	800177e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001678:	4b94      	ldr	r3, [pc, #592]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b04      	cmp	r3, #4
 8001682:	d019      	beq.n	80016b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001684:	4b91      	ldr	r3, [pc, #580]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800168c:	2b08      	cmp	r3, #8
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001690:	4b8e      	ldr	r3, [pc, #568]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800169c:	d00c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800169e:	4b8b      	ldr	r3, [pc, #556]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d112      	bne.n	80016d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016aa:	4b88      	ldr	r3, [pc, #544]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b6:	d10b      	bne.n	80016d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	4b84      	ldr	r3, [pc, #528]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d05b      	beq.n	800177c <HAL_RCC_OscConfig+0x124>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d157      	bne.n	800177c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e25a      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d106      	bne.n	80016e8 <HAL_RCC_OscConfig+0x90>
 80016da:	4b7c      	ldr	r3, [pc, #496]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a7b      	ldr	r2, [pc, #492]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e01d      	b.n	8001724 <HAL_RCC_OscConfig+0xcc>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0xb4>
 80016f2:	4b76      	ldr	r3, [pc, #472]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a75      	ldr	r2, [pc, #468]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b73      	ldr	r3, [pc, #460]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a72      	ldr	r2, [pc, #456]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0xcc>
 800170c:	4b6f      	ldr	r3, [pc, #444]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a6e      	ldr	r2, [pc, #440]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b6c      	ldr	r3, [pc, #432]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a6b      	ldr	r2, [pc, #428]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800171e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff f9aa 	bl	8000a84 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff f9a6 	bl	8000a84 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e21f      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b61      	ldr	r3, [pc, #388]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0xdc>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff f996 	bl	8000a84 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff f992 	bl	8000a84 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e20b      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176e:	4b57      	ldr	r3, [pc, #348]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x104>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d06f      	beq.n	800186a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800178a:	4b50      	ldr	r3, [pc, #320]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b00      	cmp	r3, #0
 8001794:	d017      	beq.n	80017c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001796:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d105      	bne.n	80017ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017a2:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00b      	beq.n	80017c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d11c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b44      	ldr	r3, [pc, #272]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d116      	bne.n	80017f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c6:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <HAL_RCC_OscConfig+0x186>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e1d3      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4937      	ldr	r1, [pc, #220]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	e03a      	b.n	800186a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fc:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <HAL_RCC_OscConfig+0x278>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff f93f 	bl	8000a84 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff f93b 	bl	8000a84 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1b4      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001828:	4b28      	ldr	r3, [pc, #160]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4925      	ldr	r1, [pc, #148]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
 800183c:	e015      	b.n	800186a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_RCC_OscConfig+0x278>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff f91e 	bl	8000a84 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184c:	f7ff f91a 	bl	8000a84 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e193      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185e:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d036      	beq.n	80018e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d016      	beq.n	80018ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_RCC_OscConfig+0x27c>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff f8fe 	bl	8000a84 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800188c:	f7ff f8fa 	bl	8000a84 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e173      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80018a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x234>
 80018aa:	e01b      	b.n	80018e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_RCC_OscConfig+0x27c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b2:	f7ff f8e7 	bl	8000a84 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	e00e      	b.n	80018d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ba:	f7ff f8e3 	bl	8000a84 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d907      	bls.n	80018d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e15c      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
 80018cc:	40023800 	.word	0x40023800
 80018d0:	42470000 	.word	0x42470000
 80018d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d8:	4b8a      	ldr	r3, [pc, #552]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 80018da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ea      	bne.n	80018ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8097 	beq.w	8001a20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f6:	4b83      	ldr	r3, [pc, #524]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b7f      	ldr	r3, [pc, #508]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a7e      	ldr	r2, [pc, #504]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191e:	2301      	movs	r3, #1
 8001920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	4b79      	ldr	r3, [pc, #484]	; (8001b08 <HAL_RCC_OscConfig+0x4b0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192a:	2b00      	cmp	r3, #0
 800192c:	d118      	bne.n	8001960 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192e:	4b76      	ldr	r3, [pc, #472]	; (8001b08 <HAL_RCC_OscConfig+0x4b0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a75      	ldr	r2, [pc, #468]	; (8001b08 <HAL_RCC_OscConfig+0x4b0>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193a:	f7ff f8a3 	bl	8000a84 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001942:	f7ff f89f 	bl	8000a84 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e118      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	4b6c      	ldr	r3, [pc, #432]	; (8001b08 <HAL_RCC_OscConfig+0x4b0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x31e>
 8001968:	4b66      	ldr	r3, [pc, #408]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196c:	4a65      	ldr	r2, [pc, #404]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6713      	str	r3, [r2, #112]	; 0x70
 8001974:	e01c      	b.n	80019b0 <HAL_RCC_OscConfig+0x358>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b05      	cmp	r3, #5
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x340>
 800197e:	4b61      	ldr	r3, [pc, #388]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a60      	ldr	r2, [pc, #384]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
 800198a:	4b5e      	ldr	r3, [pc, #376]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a5d      	ldr	r2, [pc, #372]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0x358>
 8001998:	4b5a      	ldr	r3, [pc, #360]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	4a59      	ldr	r2, [pc, #356]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	6713      	str	r3, [r2, #112]	; 0x70
 80019a4:	4b57      	ldr	r3, [pc, #348]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	4a56      	ldr	r2, [pc, #344]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 80019aa:	f023 0304 	bic.w	r3, r3, #4
 80019ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d015      	beq.n	80019e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff f864 	bl	8000a84 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7ff f860 	bl	8000a84 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e0d7      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d6:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0ee      	beq.n	80019c0 <HAL_RCC_OscConfig+0x368>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e4:	f7ff f84e 	bl	8000a84 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ec:	f7ff f84a 	bl	8000a84 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e0c1      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a02:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ee      	bne.n	80019ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a14:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	4a3a      	ldr	r2, [pc, #232]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80ad 	beq.w	8001b84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a2a:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d060      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d145      	bne.n	8001aca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <HAL_RCC_OscConfig+0x4b4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff f81e 	bl	8000a84 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff f81a 	bl	8000a84 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e093      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69da      	ldr	r2, [r3, #28]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	019b      	lsls	r3, r3, #6
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	3b01      	subs	r3, #1
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	061b      	lsls	r3, r3, #24
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	071b      	lsls	r3, r3, #28
 8001a96:	491b      	ldr	r1, [pc, #108]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_RCC_OscConfig+0x4b4>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7fe ffef 	bl	8000a84 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7fe ffeb 	bl	8000a84 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e064      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x452>
 8001ac8:	e05c      	b.n	8001b84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_RCC_OscConfig+0x4b4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7fe ffd8 	bl	8000a84 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7fe ffd4 	bl	8000a84 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e04d      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x480>
 8001af6:	e045      	b.n	8001b84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e040      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b10:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <HAL_RCC_OscConfig+0x538>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d030      	beq.n	8001b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d129      	bne.n	8001b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d122      	bne.n	8001b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b40:	4013      	ands	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d119      	bne.n	8001b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d10f      	bne.n	8001b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e041      	b.n	8001c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7fe fe2c 	bl	8000818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f000 f82e 	bl	8001c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a40      	ldr	r2, [pc, #256]	; (8001d48 <TIM_Base_SetConfig+0x114>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d013      	beq.n	8001c74 <TIM_Base_SetConfig+0x40>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c52:	d00f      	beq.n	8001c74 <TIM_Base_SetConfig+0x40>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a3d      	ldr	r2, [pc, #244]	; (8001d4c <TIM_Base_SetConfig+0x118>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d00b      	beq.n	8001c74 <TIM_Base_SetConfig+0x40>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a3c      	ldr	r2, [pc, #240]	; (8001d50 <TIM_Base_SetConfig+0x11c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d007      	beq.n	8001c74 <TIM_Base_SetConfig+0x40>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a3b      	ldr	r2, [pc, #236]	; (8001d54 <TIM_Base_SetConfig+0x120>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d003      	beq.n	8001c74 <TIM_Base_SetConfig+0x40>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a3a      	ldr	r2, [pc, #232]	; (8001d58 <TIM_Base_SetConfig+0x124>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d108      	bne.n	8001c86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <TIM_Base_SetConfig+0x114>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d02b      	beq.n	8001ce6 <TIM_Base_SetConfig+0xb2>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c94:	d027      	beq.n	8001ce6 <TIM_Base_SetConfig+0xb2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a2c      	ldr	r2, [pc, #176]	; (8001d4c <TIM_Base_SetConfig+0x118>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d023      	beq.n	8001ce6 <TIM_Base_SetConfig+0xb2>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a2b      	ldr	r2, [pc, #172]	; (8001d50 <TIM_Base_SetConfig+0x11c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01f      	beq.n	8001ce6 <TIM_Base_SetConfig+0xb2>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a2a      	ldr	r2, [pc, #168]	; (8001d54 <TIM_Base_SetConfig+0x120>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01b      	beq.n	8001ce6 <TIM_Base_SetConfig+0xb2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <TIM_Base_SetConfig+0x124>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d017      	beq.n	8001ce6 <TIM_Base_SetConfig+0xb2>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a28      	ldr	r2, [pc, #160]	; (8001d5c <TIM_Base_SetConfig+0x128>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <TIM_Base_SetConfig+0xb2>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <TIM_Base_SetConfig+0x12c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00f      	beq.n	8001ce6 <TIM_Base_SetConfig+0xb2>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <TIM_Base_SetConfig+0x130>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00b      	beq.n	8001ce6 <TIM_Base_SetConfig+0xb2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a25      	ldr	r2, [pc, #148]	; (8001d68 <TIM_Base_SetConfig+0x134>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <TIM_Base_SetConfig+0xb2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <TIM_Base_SetConfig+0x138>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d003      	beq.n	8001ce6 <TIM_Base_SetConfig+0xb2>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <TIM_Base_SetConfig+0x13c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d108      	bne.n	8001cf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <TIM_Base_SetConfig+0x114>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d003      	beq.n	8001d2c <TIM_Base_SetConfig+0xf8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <TIM_Base_SetConfig+0x124>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d103      	bne.n	8001d34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	615a      	str	r2, [r3, #20]
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40000800 	.word	0x40000800
 8001d54:	40000c00 	.word	0x40000c00
 8001d58:	40010400 	.word	0x40010400
 8001d5c:	40014000 	.word	0x40014000
 8001d60:	40014400 	.word	0x40014400
 8001d64:	40014800 	.word	0x40014800
 8001d68:	40001800 	.word	0x40001800
 8001d6c:	40001c00 	.word	0x40001c00
 8001d70:	40002000 	.word	0x40002000

08001d74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e03f      	b.n	8001e06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fd5e 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001db6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f829 	bl	8001e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ddc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e14:	b0c0      	sub	sp, #256	; 0x100
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e2c:	68d9      	ldr	r1, [r3, #12]
 8001e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	ea40 0301 	orr.w	r3, r0, r1
 8001e38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	431a      	orrs	r2, r3
 8001e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e68:	f021 010c 	bic.w	r1, r1, #12
 8001e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e76:	430b      	orrs	r3, r1
 8001e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e8a:	6999      	ldr	r1, [r3, #24]
 8001e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	ea40 0301 	orr.w	r3, r0, r1
 8001e96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b8f      	ldr	r3, [pc, #572]	; (80020dc <UART_SetConfig+0x2cc>)
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d005      	beq.n	8001eb0 <UART_SetConfig+0xa0>
 8001ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b8d      	ldr	r3, [pc, #564]	; (80020e0 <UART_SetConfig+0x2d0>)
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d104      	bne.n	8001eba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001eb0:	f7ff f98e 	bl	80011d0 <HAL_RCC_GetPCLK2Freq>
 8001eb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001eb8:	e003      	b.n	8001ec2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001eba:	f7ff f975 	bl	80011a8 <HAL_RCC_GetPCLK1Freq>
 8001ebe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ecc:	f040 810c 	bne.w	80020e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001eda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001ede:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ee2:	4622      	mov	r2, r4
 8001ee4:	462b      	mov	r3, r5
 8001ee6:	1891      	adds	r1, r2, r2
 8001ee8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001eea:	415b      	adcs	r3, r3
 8001eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	eb12 0801 	adds.w	r8, r2, r1
 8001ef8:	4629      	mov	r1, r5
 8001efa:	eb43 0901 	adc.w	r9, r3, r1
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f12:	4690      	mov	r8, r2
 8001f14:	4699      	mov	r9, r3
 8001f16:	4623      	mov	r3, r4
 8001f18:	eb18 0303 	adds.w	r3, r8, r3
 8001f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f20:	462b      	mov	r3, r5
 8001f22:	eb49 0303 	adc.w	r3, r9, r3
 8001f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f3e:	460b      	mov	r3, r1
 8001f40:	18db      	adds	r3, r3, r3
 8001f42:	653b      	str	r3, [r7, #80]	; 0x50
 8001f44:	4613      	mov	r3, r2
 8001f46:	eb42 0303 	adc.w	r3, r2, r3
 8001f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8001f4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f54:	f7fe f95e 	bl	8000214 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4b61      	ldr	r3, [pc, #388]	; (80020e4 <UART_SetConfig+0x2d4>)
 8001f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	011c      	lsls	r4, r3, #4
 8001f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001f78:	4642      	mov	r2, r8
 8001f7a:	464b      	mov	r3, r9
 8001f7c:	1891      	adds	r1, r2, r2
 8001f7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f80:	415b      	adcs	r3, r3
 8001f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f88:	4641      	mov	r1, r8
 8001f8a:	eb12 0a01 	adds.w	sl, r2, r1
 8001f8e:	4649      	mov	r1, r9
 8001f90:	eb43 0b01 	adc.w	fp, r3, r1
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fa8:	4692      	mov	sl, r2
 8001faa:	469b      	mov	fp, r3
 8001fac:	4643      	mov	r3, r8
 8001fae:	eb1a 0303 	adds.w	r3, sl, r3
 8001fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fb6:	464b      	mov	r3, r9
 8001fb8:	eb4b 0303 	adc.w	r3, fp, r3
 8001fbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001fcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001fd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	18db      	adds	r3, r3, r3
 8001fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8001fda:	4613      	mov	r3, r2
 8001fdc:	eb42 0303 	adc.w	r3, r2, r3
 8001fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8001fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fe6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001fea:	f7fe f913 	bl	8000214 <__aeabi_uldivmod>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <UART_SetConfig+0x2d4>)
 8001ff6:	fba3 2301 	umull	r2, r3, r3, r1
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2264      	movs	r2, #100	; 0x64
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	1acb      	subs	r3, r1, r3
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <UART_SetConfig+0x2d4>)
 800200c:	fba3 2302 	umull	r2, r3, r3, r2
 8002010:	095b      	lsrs	r3, r3, #5
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002018:	441c      	add	r4, r3
 800201a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800201e:	2200      	movs	r2, #0
 8002020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002024:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002028:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800202c:	4642      	mov	r2, r8
 800202e:	464b      	mov	r3, r9
 8002030:	1891      	adds	r1, r2, r2
 8002032:	63b9      	str	r1, [r7, #56]	; 0x38
 8002034:	415b      	adcs	r3, r3
 8002036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002038:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800203c:	4641      	mov	r1, r8
 800203e:	1851      	adds	r1, r2, r1
 8002040:	6339      	str	r1, [r7, #48]	; 0x30
 8002042:	4649      	mov	r1, r9
 8002044:	414b      	adcs	r3, r1
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002054:	4659      	mov	r1, fp
 8002056:	00cb      	lsls	r3, r1, #3
 8002058:	4651      	mov	r1, sl
 800205a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800205e:	4651      	mov	r1, sl
 8002060:	00ca      	lsls	r2, r1, #3
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	4603      	mov	r3, r0
 8002068:	4642      	mov	r2, r8
 800206a:	189b      	adds	r3, r3, r2
 800206c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002070:	464b      	mov	r3, r9
 8002072:	460a      	mov	r2, r1
 8002074:	eb42 0303 	adc.w	r3, r2, r3
 8002078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800207c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002088:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800208c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002090:	460b      	mov	r3, r1
 8002092:	18db      	adds	r3, r3, r3
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
 8002096:	4613      	mov	r3, r2
 8002098:	eb42 0303 	adc.w	r3, r2, r3
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800209e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80020a6:	f7fe f8b5 	bl	8000214 <__aeabi_uldivmod>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <UART_SetConfig+0x2d4>)
 80020b0:	fba3 1302 	umull	r1, r3, r3, r2
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	2164      	movs	r1, #100	; 0x64
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	3332      	adds	r3, #50	; 0x32
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <UART_SetConfig+0x2d4>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	f003 0207 	and.w	r2, r3, #7
 80020ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4422      	add	r2, r4
 80020d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020d8:	e105      	b.n	80022e6 <UART_SetConfig+0x4d6>
 80020da:	bf00      	nop
 80020dc:	40011000 	.word	0x40011000
 80020e0:	40011400 	.word	0x40011400
 80020e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020ec:	2200      	movs	r2, #0
 80020ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020fa:	4642      	mov	r2, r8
 80020fc:	464b      	mov	r3, r9
 80020fe:	1891      	adds	r1, r2, r2
 8002100:	6239      	str	r1, [r7, #32]
 8002102:	415b      	adcs	r3, r3
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
 8002106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800210a:	4641      	mov	r1, r8
 800210c:	1854      	adds	r4, r2, r1
 800210e:	4649      	mov	r1, r9
 8002110:	eb43 0501 	adc.w	r5, r3, r1
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	00eb      	lsls	r3, r5, #3
 800211e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002122:	00e2      	lsls	r2, r4, #3
 8002124:	4614      	mov	r4, r2
 8002126:	461d      	mov	r5, r3
 8002128:	4643      	mov	r3, r8
 800212a:	18e3      	adds	r3, r4, r3
 800212c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002130:	464b      	mov	r3, r9
 8002132:	eb45 0303 	adc.w	r3, r5, r3
 8002136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800213a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002146:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002156:	4629      	mov	r1, r5
 8002158:	008b      	lsls	r3, r1, #2
 800215a:	4621      	mov	r1, r4
 800215c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002160:	4621      	mov	r1, r4
 8002162:	008a      	lsls	r2, r1, #2
 8002164:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002168:	f7fe f854 	bl	8000214 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4b60      	ldr	r3, [pc, #384]	; (80022f4 <UART_SetConfig+0x4e4>)
 8002172:	fba3 2302 	umull	r2, r3, r3, r2
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	011c      	lsls	r4, r3, #4
 800217a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800217e:	2200      	movs	r2, #0
 8002180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002184:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002188:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800218c:	4642      	mov	r2, r8
 800218e:	464b      	mov	r3, r9
 8002190:	1891      	adds	r1, r2, r2
 8002192:	61b9      	str	r1, [r7, #24]
 8002194:	415b      	adcs	r3, r3
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800219c:	4641      	mov	r1, r8
 800219e:	1851      	adds	r1, r2, r1
 80021a0:	6139      	str	r1, [r7, #16]
 80021a2:	4649      	mov	r1, r9
 80021a4:	414b      	adcs	r3, r1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021b4:	4659      	mov	r1, fp
 80021b6:	00cb      	lsls	r3, r1, #3
 80021b8:	4651      	mov	r1, sl
 80021ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021be:	4651      	mov	r1, sl
 80021c0:	00ca      	lsls	r2, r1, #3
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	4642      	mov	r2, r8
 80021ca:	189b      	adds	r3, r3, r2
 80021cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021d0:	464b      	mov	r3, r9
 80021d2:	460a      	mov	r2, r1
 80021d4:	eb42 0303 	adc.w	r3, r2, r3
 80021d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80021e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80021f4:	4649      	mov	r1, r9
 80021f6:	008b      	lsls	r3, r1, #2
 80021f8:	4641      	mov	r1, r8
 80021fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021fe:	4641      	mov	r1, r8
 8002200:	008a      	lsls	r2, r1, #2
 8002202:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002206:	f7fe f805 	bl	8000214 <__aeabi_uldivmod>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <UART_SetConfig+0x4e4>)
 8002210:	fba3 1302 	umull	r1, r3, r3, r2
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	2164      	movs	r1, #100	; 0x64
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	3332      	adds	r3, #50	; 0x32
 8002222:	4a34      	ldr	r2, [pc, #208]	; (80022f4 <UART_SetConfig+0x4e4>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222e:	441c      	add	r4, r3
 8002230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002234:	2200      	movs	r2, #0
 8002236:	673b      	str	r3, [r7, #112]	; 0x70
 8002238:	677a      	str	r2, [r7, #116]	; 0x74
 800223a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800223e:	4642      	mov	r2, r8
 8002240:	464b      	mov	r3, r9
 8002242:	1891      	adds	r1, r2, r2
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	415b      	adcs	r3, r3
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800224e:	4641      	mov	r1, r8
 8002250:	1851      	adds	r1, r2, r1
 8002252:	6039      	str	r1, [r7, #0]
 8002254:	4649      	mov	r1, r9
 8002256:	414b      	adcs	r3, r1
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002266:	4659      	mov	r1, fp
 8002268:	00cb      	lsls	r3, r1, #3
 800226a:	4651      	mov	r1, sl
 800226c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002270:	4651      	mov	r1, sl
 8002272:	00ca      	lsls	r2, r1, #3
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	4603      	mov	r3, r0
 800227a:	4642      	mov	r2, r8
 800227c:	189b      	adds	r3, r3, r2
 800227e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002280:	464b      	mov	r3, r9
 8002282:	460a      	mov	r2, r1
 8002284:	eb42 0303 	adc.w	r3, r2, r3
 8002288:	66fb      	str	r3, [r7, #108]	; 0x6c
 800228a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	663b      	str	r3, [r7, #96]	; 0x60
 8002294:	667a      	str	r2, [r7, #100]	; 0x64
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80022a2:	4649      	mov	r1, r9
 80022a4:	008b      	lsls	r3, r1, #2
 80022a6:	4641      	mov	r1, r8
 80022a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ac:	4641      	mov	r1, r8
 80022ae:	008a      	lsls	r2, r1, #2
 80022b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80022b4:	f7fd ffae 	bl	8000214 <__aeabi_uldivmod>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <UART_SetConfig+0x4e4>)
 80022be:	fba3 1302 	umull	r1, r3, r3, r2
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2164      	movs	r1, #100	; 0x64
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	3332      	adds	r3, #50	; 0x32
 80022d0:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <UART_SetConfig+0x4e4>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	f003 020f 	and.w	r2, r3, #15
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4422      	add	r2, r4
 80022e4:	609a      	str	r2, [r3, #8]
}
 80022e6:	bf00      	nop
 80022e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022ec:	46bd      	mov	sp, r7
 80022ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f2:	bf00      	nop
 80022f4:	51eb851f 	.word	0x51eb851f

080022f8 <TbxAssertTrigger>:
** \param     line The line number inside the file where the assertion occurred.
**
****************************************************************************************/
void TbxAssertTrigger(char     const * const file, 
                      uint32_t               line)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  /* Check if there is an application specific assertion handler configured. */
  if (tbxAssertHandlerPtr != NULL)
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <TbxAssertTrigger+0x28>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <TbxAssertTrigger+0x1e>
  {
    /* Call the application specific assertion handler. */
    tbxAssertHandlerPtr(file, line);
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <TbxAssertTrigger+0x28>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6839      	ldr	r1, [r7, #0]
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
    for (;;)
    {
      ;
    }
  }
} /*** end of TbxAssertTrigger ***/
 8002314:	e000      	b.n	8002318 <TbxAssertTrigger+0x20>
    for (;;)
 8002316:	e7fe      	b.n	8002316 <TbxAssertTrigger+0x1e>
} /*** end of TbxAssertTrigger ***/
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200000c0 	.word	0x200000c0

08002324 <TbxCriticalSectionEnter>:
**              ...access shared resource...
**              TbxCriticalSectionExit();
**
****************************************************************************************/
void TbxCriticalSectionEnter(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
  /* Disable the interrupts and store the CPU status register value in a local variable.
   * Note that it should not write directly to tbxCritSectCpuSR yet, because the
   * tbxCritSectCpuSR variable is a shared resource and should only be accessed with
   * interrupts disabled.
   */
  cpuSR = TbxPortInterruptsDisable();
 800232a:	f7fd ff6b 	bl	8000204 <TbxPortInterruptsDisable>
 800232e:	6078      	str	r0, [r7, #4]

  /* It this the first time we enter the critical section, as opposed to a nested
   * entry?
   */
  if (tbxCritSectNestingCounter == 0U)
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <TbxCriticalSectionEnter+0x2c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <TbxCriticalSectionEnter+0x1a>
  {
    /* Store the CPU status register value in tbxCritSectCpuSR, since it is now safe
     * to access it. It is needed to restore the interrupt status upon exiting the
     * critical section.
     */
    tbxCritSectCpuSR = cpuSR;
 8002338:	4a06      	ldr	r2, [pc, #24]	; (8002354 <TbxCriticalSectionEnter+0x30>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6013      	str	r3, [r2, #0]
  }
  /* Increment the nesting counter. */
  tbxCritSectNestingCounter++;
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <TbxCriticalSectionEnter+0x2c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3301      	adds	r3, #1
 8002344:	4a02      	ldr	r2, [pc, #8]	; (8002350 <TbxCriticalSectionEnter+0x2c>)
 8002346:	6013      	str	r3, [r2, #0]
} /*** end of TbxCriticalSectionEnter ***/
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	200000c4 	.word	0x200000c4
 8002354:	200000c8 	.word	0x200000c8

08002358 <TbxCriticalSectionExit>:
**              ...access shared resource...
**              TbxCriticalSectionExit();
**
****************************************************************************************/
void TbxCriticalSectionExit(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* A call to this function must always be preceeded by a call to
   * TbxCriticalSectionEnter(). This means the tbxCritSectNestingCounter must be > 0.
   */
  TBX_ASSERT(tbxCritSectNestingCounter > 0U);
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <TbxCriticalSectionExit+0x3c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d103      	bne.n	800236c <TbxCriticalSectionExit+0x14>
 8002364:	2170      	movs	r1, #112	; 0x70
 8002366:	480c      	ldr	r0, [pc, #48]	; (8002398 <TbxCriticalSectionExit+0x40>)
 8002368:	f7ff ffc6 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if this function call was preceeded by a call to 
   * TbxCriticalSectionEnter().
   */
  if (tbxCritSectNestingCounter > 0U)
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <TbxCriticalSectionExit+0x3c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00d      	beq.n	8002390 <TbxCriticalSectionExit+0x38>
  {
    /* Decrement the nesting counter. */
    tbxCritSectNestingCounter--;
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <TbxCriticalSectionExit+0x3c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3b01      	subs	r3, #1
 800237a:	4a06      	ldr	r2, [pc, #24]	; (8002394 <TbxCriticalSectionExit+0x3c>)
 800237c:	6013      	str	r3, [r2, #0]

    /* Is this the final call meaning that it is time we exit the critical section by
     * actually restoring the interrupt status again?
     */
    if (tbxCritSectNestingCounter == 0U)
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <TbxCriticalSectionExit+0x3c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d104      	bne.n	8002390 <TbxCriticalSectionExit+0x38>
    {
      /* Restore the interrupt status to the state it was right before the interrupts
       * were all disabled upon the first time the critical section was entered.
      */
      TbxPortInterruptsRestore(tbxCritSectCpuSR);
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <TbxCriticalSectionExit+0x44>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fd ff3e 	bl	800020c <TbxPortInterruptsRestore>
    }
  }
} /*** end of TbxCriticalSectionExit ***/
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200000c4 	.word	0x200000c4
 8002398:	08005294 	.word	0x08005294
 800239c:	200000c8 	.word	0x200000c8

080023a0 <TbxHeapAllocate>:
** \return    Pointer to the start of the newly allocated heap memory if successful,
**            NULL otherwise.
**
****************************************************************************************/
void * TbxHeapAllocate(size_t size)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
   * The actual heap buffer. Whenever memory needs to be dynamically allocated, it will
   * be taken from this buffer. As such, it is okay to not be initialized and therefore
   * the warning about no value being assigned to this variable can be ignored.
   */
  static uint8_t   tbxHeapBuffer[TBX_CONF_HEAP_SIZE];
  void           * result = NULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  /* Verify parameter. */
  TBX_ASSERT(size > 0U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <TbxHeapAllocate+0x1a>
 80023b2:	2151      	movs	r1, #81	; 0x51
 80023b4:	4813      	ldr	r0, [pc, #76]	; (8002404 <TbxHeapAllocate+0x64>)
 80023b6:	f7ff ff9f 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if (size > 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01c      	beq.n	80023fa <TbxHeapAllocate+0x5a>
  {
    /* Align the desired size to the address size to make it work on all targets. */
    size_t sizeWanted = (size + (sizeof(void *) - 1U)) & ~(sizeof(void *) - 1U);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3303      	adds	r3, #3
 80023c4:	f023 0303 	bic.w	r3, r3, #3
 80023c8:	613b      	str	r3, [r7, #16]
    /* Obtain mutual exclusive access to tbxHeapAllocated. */
    TbxCriticalSectionEnter();
 80023ca:	f7ff ffab 	bl	8002324 <TbxCriticalSectionEnter>
      /* Determine the number of still available bytes in the heap buffer. */
    size_t sizeAvailable = TBX_CONF_HEAP_SIZE - tbxHeapAllocated;
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <TbxHeapAllocate+0x68>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80023d6:	60fb      	str	r3, [r7, #12]
    /* Is there enough space left on the heap for this allocation request? */
    if (sizeAvailable >= sizeWanted)
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d30a      	bcc.n	80023f6 <TbxHeapAllocate+0x56>
    {
      /* Set the address for the newly allocated memory. */
      result = &tbxHeapBuffer[tbxHeapAllocated];
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <TbxHeapAllocate+0x68>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a09      	ldr	r2, [pc, #36]	; (800240c <TbxHeapAllocate+0x6c>)
 80023e6:	4413      	add	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
      /* Perform the actual allocation by incrementing the counter. */
      tbxHeapAllocated += sizeWanted;
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <TbxHeapAllocate+0x68>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <TbxHeapAllocate+0x68>)
 80023f4:	6013      	str	r3, [r2, #0]
    }
    /* Release mutual exclusive access to tbxHeapAllocated. */
    TbxCriticalSectionExit();
 80023f6:	f7ff ffaf 	bl	8002358 <TbxCriticalSectionExit>
  }

  /* Return the address of the allocated memory to the caller. */
  return result;
 80023fa:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxHeapAllocate ***/
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	080052b8 	.word	0x080052b8
 8002408:	200000cc 	.word	0x200000cc
 800240c:	200000d0 	.word	0x200000d0

08002410 <TbxListCreate>:
**            is needed when calling the other API functions in this module.
** \return    The pointer to the created linked list or NULL in case or error.
**
****************************************************************************************/
tTbxList * TbxListCreate(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
  tTbxList         * result = NULL;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  static uint8_t     memPoolsCreated = TBX_FALSE;
  uint8_t            errorDetected = TBX_FALSE;
 800241a:	2300      	movs	r3, #0
 800241c:	72fb      	strb	r3, [r7, #11]
  tTbxList         * newListPtr;

  /* Check if this is the first time that this function is called. */
  if (memPoolsCreated == TBX_FALSE)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <TbxListCreate+0x90>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d114      	bne.n	8002450 <TbxListCreate+0x40>
  {
    /* Invert flag because this part only needs to run one time. */
    memPoolsCreated = TBX_TRUE;
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <TbxListCreate+0x90>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
    /* This module allows the dynamic creation and deletion of a linked list and its
     * nodes. For both these times (tTbxList and tTbxListNode) a memory pool needs to be
     * created. An initial size of 1 is sufficient, because the plan is to expand each
     * memory pool whenever more blocks need to be allocated from it.
     */
    if (TbxMemPoolCreate(1, sizeof(tTbxList)) == TBX_ERROR)
 800242c:	210c      	movs	r1, #12
 800242e:	2001      	movs	r0, #1
 8002430:	f000 fa34 	bl	800289c <TbxMemPoolCreate>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <TbxListCreate+0x2e>
    {
      /* Flag the error. */
      errorDetected = TBX_TRUE;
 800243a:	2301      	movs	r3, #1
 800243c:	72fb      	strb	r3, [r7, #11]
    }
    if (TbxMemPoolCreate(1, sizeof(tTbxListNode)) == TBX_ERROR)
 800243e:	210c      	movs	r1, #12
 8002440:	2001      	movs	r0, #1
 8002442:	f000 fa2b 	bl	800289c <TbxMemPoolCreate>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <TbxListCreate+0x40>
    {
      /* Flag the error. */
      errorDetected = TBX_TRUE;
 800244c:	2301      	movs	r3, #1
 800244e:	72fb      	strb	r3, [r7, #11]
    }
  }

  /* Only continue if no error was detected so far. */
  if (errorDetected == TBX_FALSE)
 8002450:	7afb      	ldrb	r3, [r7, #11]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11f      	bne.n	8002496 <TbxListCreate+0x86>
  {
    /* Attempt to allocate a block for the new list. */
    newListPtr = TbxMemPoolAllocate(sizeof(tTbxList));
 8002456:	200c      	movs	r0, #12
 8002458:	f000 fac2 	bl	80029e0 <TbxMemPoolAllocate>
 800245c:	6078      	str	r0, [r7, #4]
    /* In case the allocation failed, the memory pool could be exhausted. Try to add
     * another block to the memory pool. This works as long as there is enough heap
     * configured.
     */
    if (newListPtr == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <TbxListCreate+0x6a>
    {
      /* Try to add another block to the memory pool. */
      if (TbxMemPoolCreate(1, sizeof(tTbxList)) == TBX_OK)
 8002464:	210c      	movs	r1, #12
 8002466:	2001      	movs	r0, #1
 8002468:	f000 fa18 	bl	800289c <TbxMemPoolCreate>
 800246c:	4603      	mov	r3, r0
 800246e:	2b01      	cmp	r3, #1
 8002470:	d103      	bne.n	800247a <TbxListCreate+0x6a>
      {
        /* Second attempt of the block allocation. */
        newListPtr = TbxMemPoolAllocate(sizeof(tTbxList));
 8002472:	200c      	movs	r0, #12
 8002474:	f000 fab4 	bl	80029e0 <TbxMemPoolAllocate>
 8002478:	6078      	str	r0, [r7, #4]
      }
    }

    /* Only continue if the allocation was successful. */
    if (newListPtr != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <TbxListCreate+0x86>
    {
      /* By default the created list is empty. */
      newListPtr->firstNodePtr = NULL;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	605a      	str	r2, [r3, #4]
      newListPtr->lastNodePtr = NULL;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
      newListPtr->nodeCount = 0U;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
      /* The list was successfully created so update the result to give the pointer to
       * the newly created list back to the caller. This pointer serves as the handle to
       * the list and is needed when calling API function of this module.
       */
      result = newListPtr;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Give the result back to the caller. */
  return result;
 8002496:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListCreate ***/
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200008d0 	.word	0x200008d0

080024a4 <TbxListGetSize>:
** \param     list Pointer to a previously created linked list to operate on.
** \return    Total number of items currently stored in the list.
**
****************************************************************************************/
size_t TbxListGetSize(tTbxList const * list)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  size_t result = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <TbxListGetSize+0x1a>
 80024b6:	21d2      	movs	r1, #210	; 0xd2
 80024b8:	4808      	ldr	r0, [pc, #32]	; (80024dc <TbxListGetSize+0x38>)
 80024ba:	f7ff ff1d 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (list != NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <TbxListGetSize+0x2e>
  {
    /* Obtain mutual exclusive access to the list. */
    TbxCriticalSectionEnter();
 80024c4:	f7ff ff2e 	bl	8002324 <TbxCriticalSectionEnter>
    /* Store the current number of items in the list in the result variable. */
    result = list->nodeCount;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
    /* Release mutual exclusive access of the list. */
    TbxCriticalSectionExit();
 80024ce:	f7ff ff43 	bl	8002358 <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 80024d2:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListGetSize ***/
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	080052d8 	.word	0x080052d8

080024e0 <TbxListInsertItemBack>:
** \return    TBX_OK if the item could be inserted, TBX_ERROR otherwise.
**
****************************************************************************************/
uint8_t TbxListInsertItemBack(tTbxList * list, 
                              void     * item)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint8_t        result = TBX_ERROR;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  tTbxListNode * newListNodePtr;

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d104      	bne.n	80024fe <TbxListInsertItemBack+0x1e>
 80024f4:	f240 1143 	movw	r1, #323	; 0x143
 80024f8:	482d      	ldr	r0, [pc, #180]	; (80025b0 <TbxListInsertItemBack+0xd0>)
 80024fa:	f7ff fefd 	bl	80022f8 <TbxAssertTrigger>
  TBX_ASSERT(item != NULL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <TbxListInsertItemBack+0x2e>
 8002504:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002508:	4829      	ldr	r0, [pc, #164]	; (80025b0 <TbxListInsertItemBack+0xd0>)
 800250a:	f7ff fef5 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (list != NULL) && (item != NULL) )
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d047      	beq.n	80025a4 <TbxListInsertItemBack+0xc4>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d044      	beq.n	80025a4 <TbxListInsertItemBack+0xc4>
  {
    /* Attempt to allocate a block for a node in the list. */
    newListNodePtr = TbxMemPoolAllocate(sizeof(tTbxListNode));
 800251a:	200c      	movs	r0, #12
 800251c:	f000 fa60 	bl	80029e0 <TbxMemPoolAllocate>
 8002520:	60b8      	str	r0, [r7, #8]
    /* In case the allocation failed, the memory pool could be exhausted. Try to add
     * another block to the memory pool. This works as long as there is enough heap
     * configured.
     */
    if (newListNodePtr == NULL)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <TbxListInsertItemBack+0x5e>
    {
      /* Try to add another block to the memory pool. */
      if (TbxMemPoolCreate(1, sizeof(tTbxListNode)) == TBX_OK)
 8002528:	210c      	movs	r1, #12
 800252a:	2001      	movs	r0, #1
 800252c:	f000 f9b6 	bl	800289c <TbxMemPoolCreate>
 8002530:	4603      	mov	r3, r0
 8002532:	2b01      	cmp	r3, #1
 8002534:	d103      	bne.n	800253e <TbxListInsertItemBack+0x5e>
      {
        /* Second attempt of the block allocation. */
        newListNodePtr = TbxMemPoolAllocate(sizeof(tTbxListNode));
 8002536:	200c      	movs	r0, #12
 8002538:	f000 fa52 	bl	80029e0 <TbxMemPoolAllocate>
 800253c:	60b8      	str	r0, [r7, #8]
      }
    }
    /* Only continue if the allocation was successful. */
    if (newListNodePtr != NULL)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02f      	beq.n	80025a4 <TbxListInsertItemBack+0xc4>
    {
      /* Initialize the node for the list. */
      newListNodePtr->itemPtr = item;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	601a      	str	r2, [r3, #0]
      newListNodePtr->prevNodePtr = NULL;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2200      	movs	r2, #0
 800254e:	605a      	str	r2, [r3, #4]
      newListNodePtr->nextNodePtr = NULL;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
      /* Obtain mutual exclusive access to the list. */
      TbxCriticalSectionEnter();
 8002556:	f7ff fee5 	bl	8002324 <TbxCriticalSectionEnter>
      /* Check if the list is not empty. */
      if (list->firstNodePtr != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d011      	beq.n	8002586 <TbxListInsertItemBack+0xa6>
      {
        /* Sanity check. An non-empty list should have at least one node. */
        TBX_ASSERT(list->nodeCount > 0U);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d104      	bne.n	8002574 <TbxListInsertItemBack+0x94>
 800256a:	f240 1165 	movw	r1, #357	; 0x165
 800256e:	4810      	ldr	r0, [pc, #64]	; (80025b0 <TbxListInsertItemBack+0xd0>)
 8002570:	f7ff fec2 	bl	80022f8 <TbxAssertTrigger>
        /* The new node that is to be inserted will be added at the end and the current
         * end of the list should be moved up.
         */
        newListNodePtr->prevNodePtr = list->lastNodePtr;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	605a      	str	r2, [r3, #4]
        newListNodePtr->prevNodePtr->nextNodePtr = newListNodePtr;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	e002      	b.n	800258c <TbxListInsertItemBack+0xac>
      else
      {
        /* The to be added node will be the only node, so it is not only the last node
         * but also the first node.
         */
        list->firstNodePtr = newListNodePtr;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	605a      	str	r2, [r3, #4]
      }
      /* Insert the new node at the end of the list. */
      list->lastNodePtr = newListNodePtr;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	609a      	str	r2, [r3, #8]
      /* Increment the node counter. */
      list->nodeCount++;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	601a      	str	r2, [r3, #0]
      /* Release mutual exclusive access for the list. */
      TbxCriticalSectionExit();
 800259c:	f7ff fedc 	bl	8002358 <TbxCriticalSectionExit>
      /* Update the result for success. */
      result = TBX_OK;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Give the result back to the caller. */
  return result;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxListInsertItemBack ***/
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	080052d8 	.word	0x080052d8

080025b4 <TbxListRemoveItem>:
** \param     item Pointer to the item to remove.
**
****************************************************************************************/
void TbxListRemoveItem(tTbxList       * list, 
                       void     const * item)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  tTbxListNode * listNodePtr;

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <TbxListRemoveItem+0x1a>
 80025c4:	f240 214a 	movw	r1, #586	; 0x24a
 80025c8:	4867      	ldr	r0, [pc, #412]	; (8002768 <TbxListRemoveItem+0x1b4>)
 80025ca:	f7ff fe95 	bl	80022f8 <TbxAssertTrigger>
  TBX_ASSERT(item != NULL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d104      	bne.n	80025de <TbxListRemoveItem+0x2a>
 80025d4:	f240 214b 	movw	r1, #587	; 0x24b
 80025d8:	4863      	ldr	r0, [pc, #396]	; (8002768 <TbxListRemoveItem+0x1b4>)
 80025da:	f7ff fe8d 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (list != NULL) && (item != NULL) )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80bc 	beq.w	800275e <TbxListRemoveItem+0x1aa>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80b8 	beq.w	800275e <TbxListRemoveItem+0x1aa>
  {
    /* Try to find the node that this item belongs to. */
    listNodePtr = TbxListFindListNode(list, item);
 80025ee:	6839      	ldr	r1, [r7, #0]
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f919 	bl	8002828 <TbxListFindListNode>
 80025f6:	60f8      	str	r0, [r7, #12]
    /* Only continue with removal if the item actually belongs to the list. */
    if (listNodePtr != NULL)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80af 	beq.w	800275e <TbxListRemoveItem+0x1aa>
    {
      /* Obtain mutual exclusive access to the list. */
      TbxCriticalSectionEnter();
 8002600:	f7ff fe90 	bl	8002324 <TbxCriticalSectionEnter>
      /* Remove the node from the list. First check if it is the only node in the
       * list.
       */
      if ( (listNodePtr->prevNodePtr == NULL) && (listNodePtr->nextNodePtr == NULL) )
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d127      	bne.n	800265c <TbxListRemoveItem+0xa8>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d123      	bne.n	800265c <TbxListRemoveItem+0xa8>
      {
        /* Sanity check. This should also be the start of the list. */
        TBX_ASSERT(listNodePtr == list->firstNodePtr);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	429a      	cmp	r2, r3
 800261c:	d004      	beq.n	8002628 <TbxListRemoveItem+0x74>
 800261e:	f240 215d 	movw	r1, #605	; 0x25d
 8002622:	4851      	ldr	r0, [pc, #324]	; (8002768 <TbxListRemoveItem+0x1b4>)
 8002624:	f7ff fe68 	bl	80022f8 <TbxAssertTrigger>
        /* Sanity check. This should also be the end of the list. */
        TBX_ASSERT(listNodePtr == list->lastNodePtr);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	429a      	cmp	r2, r3
 8002630:	d004      	beq.n	800263c <TbxListRemoveItem+0x88>
 8002632:	f240 215f 	movw	r1, #607	; 0x25f
 8002636:	484c      	ldr	r0, [pc, #304]	; (8002768 <TbxListRemoveItem+0x1b4>)
 8002638:	f7ff fe5e 	bl	80022f8 <TbxAssertTrigger>
        /* Sanity check. The list should only have one node. */
        TBX_ASSERT(list->nodeCount == 1U);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d004      	beq.n	800264e <TbxListRemoveItem+0x9a>
 8002644:	f240 2161 	movw	r1, #609	; 0x261
 8002648:	4847      	ldr	r0, [pc, #284]	; (8002768 <TbxListRemoveItem+0x1b4>)
 800264a:	f7ff fe55 	bl	80022f8 <TbxAssertTrigger>
        /* Set the list to empty. */
        list->firstNodePtr = NULL;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	605a      	str	r2, [r3, #4]
        list->lastNodePtr = NULL;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	e076      	b.n	800274a <TbxListRemoveItem+0x196>
      }
      /* Check if it is at the start of the list. */
      else if (listNodePtr->prevNodePtr == NULL)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d124      	bne.n	80026ae <TbxListRemoveItem+0xfa>
      {
        /* Sanity check. This should be the start of the list. */
        TBX_ASSERT(listNodePtr == list->firstNodePtr);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	429a      	cmp	r2, r3
 800266c:	d004      	beq.n	8002678 <TbxListRemoveItem+0xc4>
 800266e:	f240 216a 	movw	r1, #618	; 0x26a
 8002672:	483d      	ldr	r0, [pc, #244]	; (8002768 <TbxListRemoveItem+0x1b4>)
 8002674:	f7ff fe40 	bl	80022f8 <TbxAssertTrigger>
        /* Sanity check. There should be a next node. */
        TBX_ASSERT(listNodePtr->nextNodePtr != NULL);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d104      	bne.n	800268a <TbxListRemoveItem+0xd6>
 8002680:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8002684:	4838      	ldr	r0, [pc, #224]	; (8002768 <TbxListRemoveItem+0x1b4>)
 8002686:	f7ff fe37 	bl	80022f8 <TbxAssertTrigger>
        /* Sanity check. The list should have at least two nodes. */
        TBX_ASSERT(list->nodeCount > 1U);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d804      	bhi.n	800269c <TbxListRemoveItem+0xe8>
 8002692:	f240 216e 	movw	r1, #622	; 0x26e
 8002696:	4834      	ldr	r0, [pc, #208]	; (8002768 <TbxListRemoveItem+0x1b4>)
 8002698:	f7ff fe2e 	bl	80022f8 <TbxAssertTrigger>
        /* Make the next node the new start of the list. */
        list->firstNodePtr = listNodePtr->nextNodePtr;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	605a      	str	r2, [r3, #4]
        list->firstNodePtr->prevNodePtr = NULL;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	e04d      	b.n	800274a <TbxListRemoveItem+0x196>
      }
      /* Check if it is at the end of the list. */
      else if (listNodePtr->nextNodePtr == NULL)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d124      	bne.n	8002700 <TbxListRemoveItem+0x14c>
      {
        /* Sanity check. This should be the end of the list. */
        TBX_ASSERT(listNodePtr == list->lastNodePtr);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d004      	beq.n	80026ca <TbxListRemoveItem+0x116>
 80026c0:	f240 2177 	movw	r1, #631	; 0x277
 80026c4:	4828      	ldr	r0, [pc, #160]	; (8002768 <TbxListRemoveItem+0x1b4>)
 80026c6:	f7ff fe17 	bl	80022f8 <TbxAssertTrigger>
        /* Sanity check. There should be a previous node. */
        TBX_ASSERT(listNodePtr->prevNodePtr != NULL);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <TbxListRemoveItem+0x128>
 80026d2:	f240 2179 	movw	r1, #633	; 0x279
 80026d6:	4824      	ldr	r0, [pc, #144]	; (8002768 <TbxListRemoveItem+0x1b4>)
 80026d8:	f7ff fe0e 	bl	80022f8 <TbxAssertTrigger>
        /* Sanity check. The list should have at least two nodes. */
        TBX_ASSERT(list->nodeCount > 1U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d804      	bhi.n	80026ee <TbxListRemoveItem+0x13a>
 80026e4:	f240 217b 	movw	r1, #635	; 0x27b
 80026e8:	481f      	ldr	r0, [pc, #124]	; (8002768 <TbxListRemoveItem+0x1b4>)
 80026ea:	f7ff fe05 	bl	80022f8 <TbxAssertTrigger>
        /* Make the previous node the end of the list. */
        list->lastNodePtr = listNodePtr->prevNodePtr;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	609a      	str	r2, [r3, #8]
        list->lastNodePtr->nextNodePtr = NULL;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	e024      	b.n	800274a <TbxListRemoveItem+0x196>
       * in the middle.
       */
      else
      {
        /* Sanity check. There should be a previous node. */
        TBX_ASSERT(listNodePtr->prevNodePtr != NULL);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d104      	bne.n	8002712 <TbxListRemoveItem+0x15e>
 8002708:	f240 2187 	movw	r1, #647	; 0x287
 800270c:	4816      	ldr	r0, [pc, #88]	; (8002768 <TbxListRemoveItem+0x1b4>)
 800270e:	f7ff fdf3 	bl	80022f8 <TbxAssertTrigger>
        /* Sanity check. There should be a next node. */
        TBX_ASSERT(listNodePtr->nextNodePtr != NULL);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d104      	bne.n	8002724 <TbxListRemoveItem+0x170>
 800271a:	f240 2189 	movw	r1, #649	; 0x289
 800271e:	4812      	ldr	r0, [pc, #72]	; (8002768 <TbxListRemoveItem+0x1b4>)
 8002720:	f7ff fdea 	bl	80022f8 <TbxAssertTrigger>
        /* Sanity check. The list should have at least three nodes. */
        TBX_ASSERT(list->nodeCount > 2U);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d804      	bhi.n	8002736 <TbxListRemoveItem+0x182>
 800272c:	f240 218b 	movw	r1, #651	; 0x28b
 8002730:	480d      	ldr	r0, [pc, #52]	; (8002768 <TbxListRemoveItem+0x1b4>)
 8002732:	f7ff fde1 	bl	80022f8 <TbxAssertTrigger>
        /* Remove ourselves from the list. */
        listNodePtr->prevNodePtr->nextNodePtr = listNodePtr->nextNodePtr;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	6892      	ldr	r2, [r2, #8]
 800273e:	609a      	str	r2, [r3, #8]
        listNodePtr->nextNodePtr->prevNodePtr = listNodePtr->prevNodePtr;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	6852      	ldr	r2, [r2, #4]
 8002748:	605a      	str	r2, [r3, #4]
      }
      /* Decrement the node counter. */
      list->nodeCount--;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	1e5a      	subs	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	601a      	str	r2, [r3, #0]
      /* Release mutual exclusive access of the list. */
      TbxCriticalSectionExit();
 8002754:	f7ff fe00 	bl	8002358 <TbxCriticalSectionExit>
      /* Give the node back to the memory pool. */
      TbxMemPoolRelease(listNodePtr);
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f991 	bl	8002a80 <TbxMemPoolRelease>
    }
  }
} /*** end of TbxListRemoveItem ***/
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	080052d8 	.word	0x080052d8

0800276c <TbxListGetFirstItem>:
** \param     list Pointer to a previously created linked list to operate on.
** \return    The item at the start of the list or NULL if the list is empty.
**
****************************************************************************************/
void * TbxListGetFirstItem(tTbxList const * list)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  void * result = NULL;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d104      	bne.n	8002788 <TbxListGetFirstItem+0x1c>
 800277e:	f240 21a7 	movw	r1, #679	; 0x2a7
 8002782:	480b      	ldr	r0, [pc, #44]	; (80027b0 <TbxListGetFirstItem+0x44>)
 8002784:	f7ff fdb8 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if (list != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <TbxListGetFirstItem+0x3a>
  {
    /* Obtain mutual exclusive access to the list. */
    TbxCriticalSectionEnter();
 800278e:	f7ff fdc9 	bl	8002324 <TbxCriticalSectionEnter>
    /* Get the first item in the list if there is one. */
    if (list->firstNodePtr != NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <TbxListGetFirstItem+0x36>
    {
      result = list->firstNodePtr->itemPtr;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]
    }
    /* Release mutual exclusive access of the list. */
    TbxCriticalSectionExit();
 80027a2:	f7ff fdd9 	bl	8002358 <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 80027a6:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListGetFirstItem ***/
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	080052d8 	.word	0x080052d8

080027b4 <TbxListGetNextItem>:
**            more items in the list after the item given in the parameter.
**
****************************************************************************************/
void * TbxListGetNextItem(tTbxList const * list, 
                          void     const * itemRef)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  void               * result = NULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  tTbxListNode const * listNodePtr;

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d104      	bne.n	80027d2 <TbxListGetNextItem+0x1e>
 80027c8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80027cc:	4815      	ldr	r0, [pc, #84]	; (8002824 <TbxListGetNextItem+0x70>)
 80027ce:	f7ff fd93 	bl	80022f8 <TbxAssertTrigger>
  TBX_ASSERT(itemRef != NULL);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d104      	bne.n	80027e2 <TbxListGetNextItem+0x2e>
 80027d8:	f240 3121 	movw	r1, #801	; 0x321
 80027dc:	4811      	ldr	r0, [pc, #68]	; (8002824 <TbxListGetNextItem+0x70>)
 80027de:	f7ff fd8b 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (list != NULL) && (itemRef != NULL) )
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d017      	beq.n	8002818 <TbxListGetNextItem+0x64>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d014      	beq.n	8002818 <TbxListGetNextItem+0x64>
  {
    /* Obtain mutual exclusive access to the list. */
    TbxCriticalSectionEnter();
 80027ee:	f7ff fd99 	bl	8002324 <TbxCriticalSectionEnter>
    /* Obtain the node of the item specified in the parameter. */
    listNodePtr = TbxListFindListNode(list, itemRef);
 80027f2:	6839      	ldr	r1, [r7, #0]
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f817 	bl	8002828 <TbxListFindListNode>
 80027fa:	60b8      	str	r0, [r7, #8]
    /* Only continue if the node could be found. */
    if (listNodePtr != NULL)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <TbxListGetNextItem+0x60>
    {
      /* Get the pointer to the next node. */
      listNodePtr = listNodePtr->nextNodePtr;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60bb      	str	r3, [r7, #8]
      /* Only continue if there is actually a node here. */
      if (listNodePtr != NULL)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <TbxListGetNextItem+0x60>
      {
        /* Set the result to the item of the next node. */
        result = listNodePtr->itemPtr;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Release mutual exclusive access of the list. */
    TbxCriticalSectionExit();
 8002814:	f7ff fda0 	bl	8002358 <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 8002818:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListGetNextItem ***/
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	080052d8 	.word	0x080052d8

08002828 <TbxListFindListNode>:
** \return    Pointer to the node if successful, NULL otherwise.
**
****************************************************************************************/
static tTbxListNode * TbxListFindListNode(tTbxList const * list, 
                                          void     const * item)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  tTbxListNode * result = NULL;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
  tTbxListNode * currentListNodePtr;

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <TbxListFindListNode+0x1e>
 800283c:	f240 31b3 	movw	r1, #947	; 0x3b3
 8002840:	4815      	ldr	r0, [pc, #84]	; (8002898 <TbxListFindListNode+0x70>)
 8002842:	f7ff fd59 	bl	80022f8 <TbxAssertTrigger>
  TBX_ASSERT(item != NULL);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d104      	bne.n	8002856 <TbxListFindListNode+0x2e>
 800284c:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 8002850:	4811      	ldr	r0, [pc, #68]	; (8002898 <TbxListFindListNode+0x70>)
 8002852:	f7ff fd51 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (list != NULL) && (item != NULL) )
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d018      	beq.n	800288e <TbxListFindListNode+0x66>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d015      	beq.n	800288e <TbxListFindListNode+0x66>
  {
    /* Obtain mutual exclusive access to the list. */
    TbxCriticalSectionEnter();
 8002862:	f7ff fd5f 	bl	8002324 <TbxCriticalSectionEnter>
    /* Get the pointer to the node at the head of the internal linked list. */
    currentListNodePtr = list->firstNodePtr;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	60bb      	str	r3, [r7, #8]
    /* Loop through the nodes to find the node that the item belongs to. */
    while (currentListNodePtr != NULL)
 800286c:	e00a      	b.n	8002884 <TbxListFindListNode+0x5c>
    {
      /* Is this the node we are looking for? */
      if (currentListNodePtr->itemPtr == item)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d102      	bne.n	800287e <TbxListFindListNode+0x56>
      {
        /* Found the node. Update the result and stop looping. */
        result = currentListNodePtr;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	60fb      	str	r3, [r7, #12]
        break;
 800287c:	e005      	b.n	800288a <TbxListFindListNode+0x62>
      }
      /* Update the node pointer to continue with the next node in the following loop
       * iteration.
       */
      currentListNodePtr = currentListNodePtr->nextNodePtr;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	60bb      	str	r3, [r7, #8]
    while (currentListNodePtr != NULL)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f1      	bne.n	800286e <TbxListFindListNode+0x46>
    }
    /* Release mutual exclusive access of the list. */
    TbxCriticalSectionExit();
 800288a:	f7ff fd65 	bl	8002358 <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 800288e:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListFindListNode ***/
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	080052d8 	.word	0x080052d8

0800289c <TbxMemPoolCreate>:
**            more space available on the heap to statically preallocated the blocks.
**
****************************************************************************************/
uint8_t TbxMemPoolCreate(size_t numBlocks, 
                         size_t blockSize)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint8_t      result = TBX_ERROR;
 80028a6:	2300      	movs	r3, #0
 80028a8:	77fb      	strb	r3, [r7, #31]
  void       * blockPtr;
  tPool      * poolPtr;

  /* Verify parameters. */
  TBX_ASSERT(numBlocks > 0U);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <TbxMemPoolCreate+0x1c>
 80028b0:	219b      	movs	r1, #155	; 0x9b
 80028b2:	484a      	ldr	r0, [pc, #296]	; (80029dc <TbxMemPoolCreate+0x140>)
 80028b4:	f7ff fd20 	bl	80022f8 <TbxAssertTrigger>
  TBX_ASSERT(blockSize > 0U);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d103      	bne.n	80028c6 <TbxMemPoolCreate+0x2a>
 80028be:	219c      	movs	r1, #156	; 0x9c
 80028c0:	4846      	ldr	r0, [pc, #280]	; (80029dc <TbxMemPoolCreate+0x140>)
 80028c2:	f7ff fd19 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (numBlocks > 0U) && (blockSize > 0U) )
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8081 	beq.w	80029d0 <TbxMemPoolCreate+0x134>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d07d      	beq.n	80029d0 <TbxMemPoolCreate+0x134>
  {
    /* Set the result value to okay. */
    result = TBX_OK;
 80028d4:	2301      	movs	r3, #1
 80028d6:	77fb      	strb	r3, [r7, #31]
    /* Obtain mutual exclusive access to the memory pool list. */
    TbxCriticalSectionEnter();
 80028d8:	f7ff fd24 	bl	8002324 <TbxCriticalSectionEnter>
    /* Attempt to locate a memory pool node in the list that is configured for the same
     * block size.
     */
    tPoolNode * poolNodePtr = TbxMemPoolListFind(blockSize);
 80028dc:	6838      	ldr	r0, [r7, #0]
 80028de:	f000 f92b 	bl	8002b38 <TbxMemPoolListFind>
 80028e2:	61b8      	str	r0, [r7, #24]
    /* Create a new memory pool node and its associated empty memory pool if a memory
     * pool node for this block size does not yet exist.
     */
    if (poolNodePtr == NULL)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d134      	bne.n	8002954 <TbxMemPoolCreate+0xb8>
    {
      /* Create a new memory pool node. */
      poolNodePtr = TbxHeapAllocate(sizeof(tPoolNode));
 80028ea:	2008      	movs	r0, #8
 80028ec:	f7ff fd58 	bl	80023a0 <TbxHeapAllocate>
 80028f0:	61b8      	str	r0, [r7, #24]
      /* Verify that the memory pool node could be created. */
      if (poolNodePtr == NULL)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <TbxMemPoolCreate+0x62>
      {
        /* Flag the error. */
        result = TBX_ERROR;
 80028f8:	2300      	movs	r3, #0
 80028fa:	77fb      	strb	r3, [r7, #31]
 80028fc:	e02a      	b.n	8002954 <TbxMemPoolCreate+0xb8>
      }
      /* Continue with creating the memory pool object. */
      else
      {
        /* Create a new memory pool object. */
        poolPtr = TbxHeapAllocate(sizeof(tPool));
 80028fe:	200c      	movs	r0, #12
 8002900:	f7ff fd4e 	bl	80023a0 <TbxHeapAllocate>
 8002904:	6138      	str	r0, [r7, #16]
        /* Verify that the memory pool object could be created. */
        if (poolPtr == NULL)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <TbxMemPoolCreate+0x76>
        {
          /* Flag the error. */
          result = TBX_ERROR;
 800290c:	2300      	movs	r3, #0
 800290e:	77fb      	strb	r3, [r7, #31]
 8002910:	e020      	b.n	8002954 <TbxMemPoolCreate+0xb8>
        }
        /* Continue with initializing both the memory pool and its node. */
        else
        {
          /* Initialize the memory pool node. */
          poolNodePtr->nextNodePtr = NULL;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2200      	movs	r2, #0
 8002916:	605a      	str	r2, [r3, #4]
          poolNodePtr->poolPtr = poolPtr;
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	601a      	str	r2, [r3, #0]
          /* Store the data size of the blocks managed by the memory pool. */
          poolPtr->blockSize = blockSize;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	601a      	str	r2, [r3, #0]
          /* Create the block list object that will hold blocks that are still free. */
          poolPtr->freeBlockListPtr = TbxMemPoolBlockListCreate();
 8002924:	f000 fa8e 	bl	8002e44 <TbxMemPoolBlockListCreate>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	605a      	str	r2, [r3, #4]
          /* Create the block list object that will hold blocks that are in use. */
          poolPtr->usedBlockListPtr = TbxMemPoolBlockListCreate();
 800292e:	f000 fa89 	bl	8002e44 <TbxMemPoolBlockListCreate>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	609a      	str	r2, [r3, #8]
          /* Verify that the block list objects could be created. */
          if ( (poolPtr->freeBlockListPtr == NULL) ||
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <TbxMemPoolCreate+0xac>
               (poolPtr->usedBlockListPtr == NULL) )
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	689b      	ldr	r3, [r3, #8]
          if ( (poolPtr->freeBlockListPtr == NULL) ||
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <TbxMemPoolCreate+0xb2>
          {
            /* Flag the error. */
            result = TBX_ERROR;
 8002948:	2300      	movs	r3, #0
 800294a:	77fb      	strb	r3, [r7, #31]
 800294c:	e002      	b.n	8002954 <TbxMemPoolCreate+0xb8>
          /* The (empty) memory pool and its node were created. Time to insert it into
           * the list.
           */
          else
          {
            TbxMemPoolListInsert(poolNodePtr);
 800294e:	69b8      	ldr	r0, [r7, #24]
 8002950:	f000 f958 	bl	8002c04 <TbxMemPoolListInsert>
          }
        }
      }
    }
    /* Only continue if all is okay so far. */
    if (result == TBX_OK)
 8002954:	7ffb      	ldrb	r3, [r7, #31]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d138      	bne.n	80029cc <TbxMemPoolCreate+0x130>
      /* The pool node pointer it now valid. It either points to a node that holds a
       * newly created and empty memory pool or to a node that holds an already existing
       * memory pool that can be extended. Create the blocks one by one and add them as
       * nodes to the free block list.
       */
      for (size_t blockNodeIdx = 0U; blockNodeIdx < numBlocks; blockNodeIdx++)
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	e031      	b.n	80029c4 <TbxMemPoolCreate+0x128>
      {
        /* Allocate memory for the block node. */
        tBlockNode * blockNodePtr = TbxHeapAllocate(sizeof(tBlockNode));
 8002960:	2008      	movs	r0, #8
 8002962:	f7ff fd1d 	bl	80023a0 <TbxHeapAllocate>
 8002966:	60f8      	str	r0, [r7, #12]
        /* Verify that the node could be allocated. */
        if (blockNodePtr == NULL)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <TbxMemPoolCreate+0xd8>
        {
          /* Flag the error. */
          result = TBX_ERROR;
 800296e:	2300      	movs	r3, #0
 8002970:	77fb      	strb	r3, [r7, #31]
 8002972:	e024      	b.n	80029be <TbxMemPoolCreate+0x122>
        }
        /* The node was created. */
        else
        {
          /* Allocate memory for the actual data block itself. */
          blockPtr = TbxMemPoolBlockCreate(blockSize);
 8002974:	6838      	ldr	r0, [r7, #0]
 8002976:	f000 f9dd 	bl	8002d34 <TbxMemPoolBlockCreate>
 800297a:	60b8      	str	r0, [r7, #8]
          /* Verify that the the data block could be allocated. */
          if (blockPtr == NULL)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <TbxMemPoolCreate+0xec>
          {
            /* Flag the error. */
            result = TBX_ERROR;
 8002982:	2300      	movs	r3, #0
 8002984:	77fb      	strb	r3, [r7, #31]
 8002986:	e01a      	b.n	80029be <TbxMemPoolCreate+0x122>
          }
          /* The data block was created. */
          else
          {
            /* Initialize the block node. */
            blockNodePtr->blockPtr = blockPtr;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	601a      	str	r2, [r3, #0]
            blockNodePtr->nextNodePtr = NULL;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	605a      	str	r2, [r3, #4]
            /* Sanity check. The pool node pointer should not be NULL here. */
            TBX_ASSERT(poolNodePtr != NULL);
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d104      	bne.n	80029a4 <TbxMemPoolCreate+0x108>
 800299a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800299e:	480f      	ldr	r0, [pc, #60]	; (80029dc <TbxMemPoolCreate+0x140>)
 80029a0:	f7ff fcaa 	bl	80022f8 <TbxAssertTrigger>
            /* Flag error in case the sanity check failed. */
            if (poolNodePtr == NULL)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <TbxMemPoolCreate+0x114>
            {
              /* Flag the error. */
              result = TBX_ERROR;
 80029aa:	2300      	movs	r3, #0
 80029ac:	77fb      	strb	r3, [r7, #31]
 80029ae:	e006      	b.n	80029be <TbxMemPoolCreate+0x122>
            }
            else
            {
              /* Insert the block node into the free block list. */
              TbxMemPoolBlockListInsert(poolNodePtr->poolPtr->freeBlockListPtr,
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	68f9      	ldr	r1, [r7, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fa55 	bl	8002e68 <TbxMemPoolBlockListInsert>
      for (size_t blockNodeIdx = 0U; blockNodeIdx < numBlocks; blockNodeIdx++)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d3c9      	bcc.n	8002960 <TbxMemPoolCreate+0xc4>
          }
        }
      }
    }
    /* Release mutual exclusive access to the memory pool list. */
    TbxCriticalSectionExit();
 80029cc:	f7ff fcc4 	bl	8002358 <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 80029d0:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of TbxMemPoolCreate ***/
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	080052f8 	.word	0x080052f8

080029e0 <TbxMemPoolAllocate>:
** \return    Pointer to the start of the newly allocated memory if successful, NULL
**            otherwise.
**
****************************************************************************************/
void * TbxMemPoolAllocate(size_t size)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  void            * result = NULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
  void            * blockDataPtr;
  tPoolNode const * poolNodePtr;

  /* Verify parameter. */
  TBX_ASSERT(size > 0U);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d104      	bne.n	80029fc <TbxMemPoolAllocate+0x1c>
 80029f2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80029f6:	4821      	ldr	r0, [pc, #132]	; (8002a7c <TbxMemPoolAllocate+0x9c>)
 80029f8:	f7ff fc7e 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (size > 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d037      	beq.n	8002a72 <TbxMemPoolAllocate+0x92>
  {
    /* Obtain mutual exclusive access to the memory pool list. */
    TbxCriticalSectionEnter();
 8002a02:	f7ff fc8f 	bl	8002324 <TbxCriticalSectionEnter>
    /* Try to find the best fitting memory pool that has a block available. */
    poolNodePtr = TbxMemPoolListFindBestFit(size);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8c4 	bl	8002b94 <TbxMemPoolListFindBestFit>
 8002a0c:	61b8      	str	r0, [r7, #24]
    /* Only continue with the allocation of a memory pool candidate was found. */
    if (poolNodePtr != NULL)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02c      	beq.n	8002a6e <TbxMemPoolAllocate+0x8e>
    {
      /* Get the pointer to the actual memory pool. */
      tPool const * poolPtr = poolNodePtr->poolPtr;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	617b      	str	r3, [r7, #20]
      /* Sanity check. The memory pool should not be NULL here. */
      TBX_ASSERT(poolPtr != NULL);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d104      	bne.n	8002a2a <TbxMemPoolAllocate+0x4a>
 8002a20:	f240 1147 	movw	r1, #327	; 0x147
 8002a24:	4815      	ldr	r0, [pc, #84]	; (8002a7c <TbxMemPoolAllocate+0x9c>)
 8002a26:	f7ff fc67 	bl	80022f8 <TbxAssertTrigger>
      /* Only continue if the sanity check passed. */
      if (poolPtr != NULL)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01e      	beq.n	8002a6e <TbxMemPoolAllocate+0x8e>
      {
        /* Attempt to extract a block node from the linked list with free block nodes. */
        tBlockNode * blockNodePtr = TbxMemPoolBlockListExtract(poolPtr->freeBlockListPtr);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fa47 	bl	8002ec8 <TbxMemPoolBlockListExtract>
 8002a3a:	6138      	str	r0, [r7, #16]
        /* Only continue if a free block node could be extracted. */
        if (blockNodePtr != NULL)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d015      	beq.n	8002a6e <TbxMemPoolAllocate+0x8e>
        {
          /* Read and store the pointer that points to the block's data. */
          blockDataPtr = TbxMemPoolBlockGetDataPtr(blockNodePtr->blockPtr);
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f99c 	bl	8002d84 <TbxMemPoolBlockGetDataPtr>
 8002a4c:	60f8      	str	r0, [r7, #12]
          /* Now the node itself needs to be inserted into the linked list with used
           * block nodes. This way this node can be reused when freeing this or another
           * block.
           */
          TbxMemPoolBlockListInsert(poolPtr->usedBlockListPtr, blockNodePtr);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	6939      	ldr	r1, [r7, #16]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fa07 	bl	8002e68 <TbxMemPoolBlockListInsert>
          /* Perform a sanity check. The block's data pointer should not be NULL here. */
          TBX_ASSERT(blockDataPtr != NULL);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d104      	bne.n	8002a6a <TbxMemPoolAllocate+0x8a>
 8002a60:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002a64:	4805      	ldr	r0, [pc, #20]	; (8002a7c <TbxMemPoolAllocate+0x9c>)
 8002a66:	f7ff fc47 	bl	80022f8 <TbxAssertTrigger>
          /* Set the result value. */
          result = blockDataPtr;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    /* Release mutual exclusive access to the memory pool list. */
    TbxCriticalSectionExit();
 8002a6e:	f7ff fc73 	bl	8002358 <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 8002a72:	69fb      	ldr	r3, [r7, #28]
} /*** end of TbxMemPoolAllocate ***/
 8002a74:	4618      	mov	r0, r3
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	080052f8 	.word	0x080052f8

08002a80 <TbxMemPoolRelease>:
**            that was returned by function TbxMemPoolAllocate(), when the memory was
**            initially allocated.
**
****************************************************************************************/
void TbxMemPoolRelease(void * memPtr)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  void            * blockPtr;
  tPoolNode const * poolNodePtr;

  /* Verify parameter. */
  TBX_ASSERT(memPtr != NULL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <TbxMemPoolRelease+0x18>
 8002a8e:	f240 1177 	movw	r1, #375	; 0x177
 8002a92:	4828      	ldr	r0, [pc, #160]	; (8002b34 <TbxMemPoolRelease+0xb4>)
 8002a94:	f7ff fc30 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (memPtr != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d045      	beq.n	8002b2a <TbxMemPoolRelease+0xaa>
  {
    /* Obtain mutual exclusive access to the memory pool list. */
    TbxCriticalSectionEnter();
 8002a9e:	f7ff fc41 	bl	8002324 <TbxCriticalSectionEnter>
    /* First convert the block's data pointer to the block's base memory pointer. */
    blockPtr = TbxMemPoolBlockGetMemPtr(memPtr);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f9ae 	bl	8002e04 <TbxMemPoolBlockGetMemPtr>
 8002aa8:	61f8      	str	r0, [r7, #28]
    /* Only continue if the block pointer is valid. */
    if (blockPtr != NULL)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d03a      	beq.n	8002b26 <TbxMemPoolRelease+0xa6>
    {
      /* Get the block's data size. */
      size_t blockSize = TbxMemPoolBlockGetBlockSize(blockPtr);
 8002ab0:	69f8      	ldr	r0, [r7, #28]
 8002ab2:	f000 f987 	bl	8002dc4 <TbxMemPoolBlockGetBlockSize>
 8002ab6:	61b8      	str	r0, [r7, #24]
      /* Attempt to locate the memory pool node that holds the memory pool with this
       * block size.
       */
      poolNodePtr = TbxMemPoolListFind(blockSize);
 8002ab8:	69b8      	ldr	r0, [r7, #24]
 8002aba:	f000 f83d 	bl	8002b38 <TbxMemPoolListFind>
 8002abe:	6178      	str	r0, [r7, #20]
      /* Sanity check. The memory pool node that the to be released memory originally
       * belonged to should have been found.
       */
      TBX_ASSERT(poolNodePtr != NULL);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <TbxMemPoolRelease+0x50>
 8002ac6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002aca:	481a      	ldr	r0, [pc, #104]	; (8002b34 <TbxMemPoolRelease+0xb4>)
 8002acc:	f7ff fc14 	bl	80022f8 <TbxAssertTrigger>
      /* Only continue if the sanity check passed. */
      if (poolNodePtr != NULL)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d027      	beq.n	8002b26 <TbxMemPoolRelease+0xa6>
      {
        /* Get the pointer to the actual memory pool. */
        tPool const * poolPtr = poolNodePtr->poolPtr;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	613b      	str	r3, [r7, #16]
        /* Sanity check. The memory pool should not be NULL here. */
        TBX_ASSERT(poolPtr != NULL);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d104      	bne.n	8002aec <TbxMemPoolRelease+0x6c>
 8002ae2:	f240 1193 	movw	r1, #403	; 0x193
 8002ae6:	4813      	ldr	r0, [pc, #76]	; (8002b34 <TbxMemPoolRelease+0xb4>)
 8002ae8:	f7ff fc06 	bl	80022f8 <TbxAssertTrigger>
        /* Only continue if the sanity check passed. */
        if (poolPtr != NULL)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d019      	beq.n	8002b26 <TbxMemPoolRelease+0xa6>
        {
          /* Attempt to extract a block node from the linked list with used block
           * nodes.
           */
          tBlockNode * blockNodePtr = TbxMemPoolBlockListExtract(poolPtr->usedBlockListPtr);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f9e6 	bl	8002ec8 <TbxMemPoolBlockListExtract>
 8002afc:	60f8      	str	r0, [r7, #12]
          /* Sanity check. A node should be available, otherwise more blocks were
           * released than actually allocated, which shouldn't happen.
           */
          TBX_ASSERT(blockNodePtr != NULL);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d104      	bne.n	8002b0e <TbxMemPoolRelease+0x8e>
 8002b04:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002b08:	480a      	ldr	r0, [pc, #40]	; (8002b34 <TbxMemPoolRelease+0xb4>)
 8002b0a:	f7ff fbf5 	bl	80022f8 <TbxAssertTrigger>
          /* Only continue if a block node could be extracted. */
          if (blockNodePtr != NULL)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <TbxMemPoolRelease+0xa6>
          {
            /* Initialize the block. */
            blockNodePtr->blockPtr = blockPtr;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	601a      	str	r2, [r3, #0]
            /* Now the node itself needs to be inserted into the linked list with free
             * block nodes. This way this node can be allocated again in the future.
             */
            TbxMemPoolBlockListInsert(poolPtr->freeBlockListPtr, blockNodePtr);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	68f9      	ldr	r1, [r7, #12]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f9a1 	bl	8002e68 <TbxMemPoolBlockListInsert>
          }
        }
      }
    }
    /* Release mutual exclusive access to the memory pool list. */
    TbxCriticalSectionExit();
 8002b26:	f7ff fc17 	bl	8002358 <TbxCriticalSectionExit>
  }
} /*** end of TbxMemPoolRelease ***/
 8002b2a:	bf00      	nop
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	080052f8 	.word	0x080052f8

08002b38 <TbxMemPoolListFind>:
** \param     blockSize Size of the blocks managed by the memory pool.
** \return    Pointer to the found memory pool node if successful, NULL otherwise.
**
****************************************************************************************/
static tPoolNode * TbxMemPoolListFind(size_t blockSize)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  tPoolNode * result = NULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  tPoolNode * poolNodePtr;

  /* Verify parameter. */
  TBX_ASSERT(blockSize > 0U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d104      	bne.n	8002b54 <TbxMemPoolListFind+0x1c>
 8002b4a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002b4e:	480f      	ldr	r0, [pc, #60]	; (8002b8c <TbxMemPoolListFind+0x54>)
 8002b50:	f7ff fbd2 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (blockSize > 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <TbxMemPoolListFind+0x48>
  {
    /* Get pointer to the pool node at the head of the linked list. */
    poolNodePtr = tbxPoolList;
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <TbxMemPoolListFind+0x58>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60bb      	str	r3, [r7, #8]
    /* Loop through all nodes until a match is found. */
    while (poolNodePtr != NULL)
 8002b60:	e00b      	b.n	8002b7a <TbxMemPoolListFind+0x42>
    {
      /* Does this node hold a memory pool created for the same block size as we are
       * trying to find?
       */
      if (poolNodePtr->poolPtr->blockSize == blockSize)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d102      	bne.n	8002b74 <TbxMemPoolListFind+0x3c>
      {
        /* Update the result because a match was found. */
        result = poolNodePtr;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	60fb      	str	r3, [r7, #12]
        /* No need to continue looping since a match was found. */
        break;
 8002b72:	e005      	b.n	8002b80 <TbxMemPoolListFind+0x48>
      }
      /* Continue with the next pool node in the list. */
      poolNodePtr = poolNodePtr->nextNodePtr;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	60bb      	str	r3, [r7, #8]
    while (poolNodePtr != NULL)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f0      	bne.n	8002b62 <TbxMemPoolListFind+0x2a>
    }
  }

  /* Give the result back to the caller. */
  return result;
 8002b80:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxMemPoolListFind ***/
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	080052f8 	.word	0x080052f8
 8002b90:	200008d4 	.word	0x200008d4

08002b94 <TbxMemPoolListFindBestFit>:
** \param     blockSize Size of the block to fit.
** \return    Pointer to the found memory pool node if successful, NULL otherwise.
**
****************************************************************************************/
static tPoolNode * TbxMemPoolListFindBestFit(size_t blockSize)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  tPoolNode * result = NULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  tPoolNode * poolNodePtr;

  /* Verify parameter. */
  TBX_ASSERT(blockSize > 0U);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d104      	bne.n	8002bb0 <TbxMemPoolListFindBestFit+0x1c>
 8002ba6:	f240 11f9 	movw	r1, #505	; 0x1f9
 8002baa:	4814      	ldr	r0, [pc, #80]	; (8002bfc <TbxMemPoolListFindBestFit+0x68>)
 8002bac:	f7ff fba4 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (blockSize > 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d01d      	beq.n	8002bf2 <TbxMemPoolListFindBestFit+0x5e>
  {
    /* Get pointer to the pool node at the head of the linked list. */
    poolNodePtr = tbxPoolList;
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <TbxMemPoolListFindBestFit+0x6c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60bb      	str	r3, [r7, #8]
    /* Loop through all nodes until a fit is found. */
    while (poolNodePtr != NULL)
 8002bbc:	e014      	b.n	8002be8 <TbxMemPoolListFindBestFit+0x54>
    {
      /* Does this memory pool hold blocks that would fit the specified block size? */
      if (poolNodePtr->poolPtr->blockSize >= blockSize)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d80b      	bhi.n	8002be2 <TbxMemPoolListFindBestFit+0x4e>
      {
        /* A fit is found. Now check if this memory pool has free blocks available. */
        if (TbxMemPoolBlockListIsEmpty(poolNodePtr->poolPtr->freeBlockListPtr) \
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f9a5 	bl	8002f20 <TbxMemPoolBlockListIsEmpty>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d109      	bne.n	8002bf0 <TbxMemPoolListFindBestFit+0x5c>
            == TBX_FALSE)
        {
          /* Found a match so update the result value. */
          result = poolNodePtr;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	60fb      	str	r3, [r7, #12]
        }
        /* Best fit is found, so no need to continue searching even if the memory pool
         * does not have any free blocks available.
         */
        break;
 8002be0:	e006      	b.n	8002bf0 <TbxMemPoolListFindBestFit+0x5c>
      }
      /* Continue with the next pool node in the list. */
      poolNodePtr = poolNodePtr->nextNodePtr;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	60bb      	str	r3, [r7, #8]
    while (poolNodePtr != NULL)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1e7      	bne.n	8002bbe <TbxMemPoolListFindBestFit+0x2a>
 8002bee:	e000      	b.n	8002bf2 <TbxMemPoolListFindBestFit+0x5e>
        break;
 8002bf0:	bf00      	nop
    }
  }

  /* Give the result back to the caller. */
  return result;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxMemPoolListFindBestFit ***/
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	080052f8 	.word	0x080052f8
 8002c00:	200008d4 	.word	0x200008d4

08002c04 <TbxMemPoolListInsert>:
**            this function should insert.
** \param     nodePtr Pointer to the memory pool node to insert.
**
****************************************************************************************/
static void TbxMemPoolListInsert(tPoolNode * nodePtr)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  tPoolNode * currentNodePtr;
  tPoolNode * prevNodePtr = NULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
  uint8_t     nodeInserted = TBX_FALSE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]

  /* Verify parameter. */
  TBX_ASSERT(nodePtr != NULL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d104      	bne.n	8002c24 <TbxMemPoolListInsert+0x20>
 8002c1a:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8002c1e:	4843      	ldr	r0, [pc, #268]	; (8002d2c <TbxMemPoolListInsert+0x128>)
 8002c20:	f7ff fb6a 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (nodePtr != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d07c      	beq.n	8002d24 <TbxMemPoolListInsert+0x120>
  {
    /* Sanity check. The pointer to the memory pool should not be NULL here. */
    TBX_ASSERT(nodePtr->poolPtr != NULL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <TbxMemPoolListInsert+0x38>
 8002c32:	f240 2132 	movw	r1, #562	; 0x232
 8002c36:	483d      	ldr	r0, [pc, #244]	; (8002d2c <TbxMemPoolListInsert+0x128>)
 8002c38:	f7ff fb5e 	bl	80022f8 <TbxAssertTrigger>
    /* Is the list with memory pools empty? */
    if (tbxPoolList == NULL)
 8002c3c:	4b3c      	ldr	r3, [pc, #240]	; (8002d30 <TbxMemPoolListInsert+0x12c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d106      	bne.n	8002c52 <TbxMemPoolListInsert+0x4e>
    {
      /* Add the node at the start of the list. */
      nodePtr->nextNodePtr = NULL;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	605a      	str	r2, [r3, #4]
      tbxPoolList = nodePtr;
 8002c4a:	4a39      	ldr	r2, [pc, #228]	; (8002d30 <TbxMemPoolListInsert+0x12c>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6013      	str	r3, [r2, #0]
        prevNodePtr = currentNodePtr;
        currentNodePtr = currentNodePtr->nextNodePtr;
      }
    }
  }
} /*** end of TbxMemPoolListInsert ***/
 8002c50:	e068      	b.n	8002d24 <TbxMemPoolListInsert+0x120>
      currentNodePtr = tbxPoolList;
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <TbxMemPoolListInsert+0x12c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	617b      	str	r3, [r7, #20]
      while (currentNodePtr != NULL)
 8002c58:	e05f      	b.n	8002d1a <TbxMemPoolListInsert+0x116>
        TBX_ASSERT(currentNodePtr->poolPtr != NULL);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d104      	bne.n	8002c6c <TbxMemPoolListInsert+0x68>
 8002c62:	f240 2145 	movw	r1, #581	; 0x245
 8002c66:	4831      	ldr	r0, [pc, #196]	; (8002d2c <TbxMemPoolListInsert+0x128>)
 8002c68:	f7ff fb46 	bl	80022f8 <TbxAssertTrigger>
        if (currentNodePtr->poolPtr != NULL)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d03b      	beq.n	8002cec <TbxMemPoolListInsert+0xe8>
          TBX_ASSERT(currentNodePtr->poolPtr->blockSize != nodePtr->poolPtr->blockSize);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d104      	bne.n	8002c8e <TbxMemPoolListInsert+0x8a>
 8002c84:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8002c88:	4828      	ldr	r0, [pc, #160]	; (8002d2c <TbxMemPoolListInsert+0x128>)
 8002c8a:	f7ff fb35 	bl	80022f8 <TbxAssertTrigger>
          if (currentNodePtr->poolPtr->blockSize > nodePtr->poolPtr->blockSize)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d926      	bls.n	8002cec <TbxMemPoolListInsert+0xe8>
            if (currentNodePtr == tbxPoolList)
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <TbxMemPoolListInsert+0x12c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d10e      	bne.n	8002cc6 <TbxMemPoolListInsert+0xc2>
              TBX_ASSERT(prevNodePtr == NULL);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <TbxMemPoolListInsert+0xb4>
 8002cae:	f240 2156 	movw	r1, #598	; 0x256
 8002cb2:	481e      	ldr	r0, [pc, #120]	; (8002d2c <TbxMemPoolListInsert+0x128>)
 8002cb4:	f7ff fb20 	bl	80022f8 <TbxAssertTrigger>
              nodePtr->nextNodePtr = currentNodePtr;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	605a      	str	r2, [r3, #4]
              tbxPoolList = nodePtr;
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <TbxMemPoolListInsert+0x12c>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e010      	b.n	8002ce8 <TbxMemPoolListInsert+0xe4>
              TBX_ASSERT(prevNodePtr != NULL);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <TbxMemPoolListInsert+0xd2>
 8002ccc:	f240 2161 	movw	r1, #609	; 0x261
 8002cd0:	4816      	ldr	r0, [pc, #88]	; (8002d2c <TbxMemPoolListInsert+0x128>)
 8002cd2:	f7ff fb11 	bl	80022f8 <TbxAssertTrigger>
              if (prevNodePtr != NULL)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <TbxMemPoolListInsert+0xe4>
                nodePtr->nextNodePtr = currentNodePtr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	605a      	str	r2, [r3, #4]
                prevNodePtr->nextNodePtr = nodePtr;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	605a      	str	r2, [r3, #4]
            nodeInserted = TBX_TRUE;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
        if ( (currentNodePtr->nextNodePtr == NULL) && (nodeInserted == TBX_FALSE) )
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <TbxMemPoolListInsert+0x106>
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d107      	bne.n	8002d0a <TbxMemPoolListInsert+0x106>
          nodePtr->nextNodePtr = NULL;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	605a      	str	r2, [r3, #4]
          currentNodePtr->nextNodePtr = nodePtr;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	605a      	str	r2, [r3, #4]
          nodeInserted = TBX_TRUE;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
        if (nodeInserted == TBX_TRUE)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d008      	beq.n	8002d22 <TbxMemPoolListInsert+0x11e>
        prevNodePtr = currentNodePtr;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	613b      	str	r3, [r7, #16]
        currentNodePtr = currentNodePtr->nextNodePtr;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	617b      	str	r3, [r7, #20]
      while (currentNodePtr != NULL)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d19c      	bne.n	8002c5a <TbxMemPoolListInsert+0x56>
} /*** end of TbxMemPoolListInsert ***/
 8002d20:	e000      	b.n	8002d24 <TbxMemPoolListInsert+0x120>
          break;
 8002d22:	bf00      	nop
} /*** end of TbxMemPoolListInsert ***/
 8002d24:	bf00      	nop
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	080052f8 	.word	0x080052f8
 8002d30:	200008d4 	.word	0x200008d4

08002d34 <TbxMemPoolBlockCreate>:
** \param     size The data size of the block in bytes.
** \return    Pointer to the memory of the created block if successful, NULL otherwise.
**
****************************************************************************************/
static void * TbxMemPoolBlockCreate(size_t size)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  void   * result = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  void   * blockMemPtr;

  /* Verify parameter. */
  TBX_ASSERT(size > 0U);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <TbxMemPoolBlockCreate+0x1c>
 8002d46:	f240 21a1 	movw	r1, #673	; 0x2a1
 8002d4a:	480d      	ldr	r0, [pc, #52]	; (8002d80 <TbxMemPoolBlockCreate+0x4c>)
 8002d4c:	f7ff fad4 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (size > 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00f      	beq.n	8002d76 <TbxMemPoolBlockCreate+0x42>
  {
    /* Allocate memory for the block data and an extra size_t value at the start. */
    blockMemPtr = TbxHeapAllocate(sizeof(size_t) + size);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fb20 	bl	80023a0 <TbxHeapAllocate>
 8002d60:	6138      	str	r0, [r7, #16]
    /* Only continue if the memory allocation was successful. */
    if (blockMemPtr != NULL)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d006      	beq.n	8002d76 <TbxMemPoolBlockCreate+0x42>
    {
      /* Set the result value. */
      result = blockMemPtr;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	617b      	str	r3, [r7, #20]
      /* Create a pointer to an array of size_t elements. */
      size_t * blockSizeArray = blockMemPtr;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	60fb      	str	r3, [r7, #12]
      /* Write to the first element, which should hold the block size. */
      blockSizeArray[0U] = size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	601a      	str	r2, [r3, #0]
    }
  }

  /* Give the result back to the caller. */
  return result;
 8002d76:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMemPoolBlockCreate ***/
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	080052f8 	.word	0x080052f8

08002d84 <TbxMemPoolBlockGetDataPtr>:
** \param     memPtr Pointer to the start of the block's allocated memory.
** \return    Pointer to where the block's data starts if successful, NULL otherwise.
**
****************************************************************************************/
static void * TbxMemPoolBlockGetDataPtr(void * memPtr)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  void   * result = NULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
  size_t * blockSizeArray;
  void   * dataPtr;

  /* Verify parameter. */
  TBX_ASSERT(memPtr != NULL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <TbxMemPoolBlockGetDataPtr+0x1c>
 8002d96:	f240 21c7 	movw	r1, #711	; 0x2c7
 8002d9a:	4809      	ldr	r0, [pc, #36]	; (8002dc0 <TbxMemPoolBlockGetDataPtr+0x3c>)
 8002d9c:	f7ff faac 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (memPtr != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <TbxMemPoolBlockGetDataPtr+0x30>
  {
    /* Create a pointer to an array of size_t elements. */
    blockSizeArray = memPtr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	613b      	str	r3, [r7, #16]
    /* The block data starts after the block size value. */
    dataPtr = &blockSizeArray[1U];
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	3304      	adds	r3, #4
 8002dae:	60fb      	str	r3, [r7, #12]
    /* Set the result value. */
    result = dataPtr;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	617b      	str	r3, [r7, #20]
  }

  /* Give the result back to the caller. */
  return result;
 8002db4:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMemPoolBlockGetDataPtr ***/
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	080052f8 	.word	0x080052f8

08002dc4 <TbxMemPoolBlockGetBlockSize>:
** \param     memPtr Pointer to the start of the block's allocated memory.
** \return    Size in bytes of the block's data if successful, 0 otherwise.
**
****************************************************************************************/
static size_t TbxMemPoolBlockGetBlockSize(void const * memPtr)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  size_t         result = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  size_t const * blockSizeArray;

  /* Verify parameter. */
  TBX_ASSERT(memPtr != NULL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <TbxMemPoolBlockGetBlockSize+0x1c>
 8002dd6:	f240 21e6 	movw	r1, #742	; 0x2e6
 8002dda:	4809      	ldr	r0, [pc, #36]	; (8002e00 <TbxMemPoolBlockGetBlockSize+0x3c>)
 8002ddc:	f7ff fa8c 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (memPtr != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <TbxMemPoolBlockGetBlockSize+0x30>
  {
    /* Create a pointer to an array of size_t elements. */
    blockSizeArray = memPtr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	613b      	str	r3, [r7, #16]
    /* The block size value is located at the start of the block, */
    size_t blockSize = blockSizeArray[0U];
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]
    /* Set the result value. */
    result = blockSize;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	617b      	str	r3, [r7, #20]
  }

  /* Give the result back to the caller. */
  return result;
 8002df4:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMemPoolBlockGetBlockSize ***/
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	080052f8 	.word	0x080052f8

08002e04 <TbxMemPoolBlockGetMemPtr>:
** \param     dataPtr Pointer to the start of the block's data.
** \return    Pointer to the memory of the block if successful, NULL otherwise.
**
****************************************************************************************/
static void * TbxMemPoolBlockGetMemPtr(void * dataPtr)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  void   * result = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
  void   * blockMemPtr;
  size_t * blockSizeArray;

  /* Verify parameter. */
  TBX_ASSERT(dataPtr != NULL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d104      	bne.n	8002e20 <TbxMemPoolBlockGetMemPtr+0x1c>
 8002e16:	f240 3106 	movw	r1, #774	; 0x306
 8002e1a:	4809      	ldr	r0, [pc, #36]	; (8002e40 <TbxMemPoolBlockGetMemPtr+0x3c>)
 8002e1c:	f7ff fa6c 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (dataPtr != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <TbxMemPoolBlockGetMemPtr+0x30>
  {
    /* Create a pointer to an array of size_t elements. */
    blockSizeArray = dataPtr;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	613b      	str	r3, [r7, #16]
    /* Get pointer to the start of the block, which is one size_t element before the
     * pointer to the block's data.
     */
    blockMemPtr = &blockSizeArray[-1];
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	3b04      	subs	r3, #4
 8002e2e:	60fb      	str	r3, [r7, #12]
    /* Set the result value. */
    result = blockMemPtr;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	617b      	str	r3, [r7, #20]
  }

  /* Give the result back to the caller. */
  return result;
 8002e34:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMemPoolBlockGetMemPtr ***/
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	080052f8 	.word	0x080052f8

08002e44 <TbxMemPoolBlockListCreate>:
**            allocated on the heap.
** \return    Pointer to the newly created blocks list if successful, NULL otherwise.
**
****************************************************************************************/
static tBlockList * TbxMemPoolBlockListCreate(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
  tBlockList * result;

  /* Attempt to create the linked list object on the heap. */
  result = TbxHeapAllocate(sizeof(tBlockList));
 8002e4a:	2004      	movs	r0, #4
 8002e4c:	f7ff faa8 	bl	80023a0 <TbxHeapAllocate>
 8002e50:	6078      	str	r0, [r7, #4]
  /* Only continue with the linked list initialization when the allocation was
   * successful.
   */
  if (result != NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <TbxMemPoolBlockListCreate+0x1a>
  {
    /* Initialize the linked list to be empty. */
    *result = NULL;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
  }

  /* Give the result back to the caller. */
  return result;
 8002e5e:	687b      	ldr	r3, [r7, #4]
} /*** end of TbxMemPoolBlockListCreate ***/
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <TbxMemPoolBlockListInsert>:
** \param     nodePtr Pointer to the block node to insert.
**
****************************************************************************************/
static void TbxMemPoolBlockListInsert(tBlockList * listPtr, 
                                      tBlockNode * nodePtr)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  /* Verify parameters. */
  TBX_ASSERT(listPtr != NULL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d104      	bne.n	8002e82 <TbxMemPoolBlockListInsert+0x1a>
 8002e78:	f240 3143 	movw	r1, #835	; 0x343
 8002e7c:	4811      	ldr	r0, [pc, #68]	; (8002ec4 <TbxMemPoolBlockListInsert+0x5c>)
 8002e7e:	f7ff fa3b 	bl	80022f8 <TbxAssertTrigger>
  TBX_ASSERT(nodePtr != NULL);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d104      	bne.n	8002e92 <TbxMemPoolBlockListInsert+0x2a>
 8002e88:	f44f 7151 	mov.w	r1, #836	; 0x344
 8002e8c:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <TbxMemPoolBlockListInsert+0x5c>)
 8002e8e:	f7ff fa33 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (listPtr != NULL) && (nodePtr != NULL) )
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d011      	beq.n	8002ebc <TbxMemPoolBlockListInsert+0x54>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00e      	beq.n	8002ebc <TbxMemPoolBlockListInsert+0x54>
  {
    /* Is the list currently empty? */
    if (*listPtr == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <TbxMemPoolBlockListInsert+0x46>
    {
      /* There is no next node. */
      nodePtr->nextNodePtr = NULL;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	e003      	b.n	8002eb6 <TbxMemPoolBlockListInsert+0x4e>
    }
    /* Linked list is not empty. */
    else
    {
      /* The new node will be the current head of the list. */
      nodePtr->nextNodePtr = *listPtr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
    }
    /* Insert the new node at the start of the list. */
    *listPtr = nodePtr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	601a      	str	r2, [r3, #0]
  }
} /*** end of TbxMemPoolBlockListInsert ***/
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	080052f8 	.word	0x080052f8

08002ec8 <TbxMemPoolBlockListExtract>:
** \return    Pointer to the block node that was extracted or NULL if the linked list
**            contained no more nodes.
**
****************************************************************************************/
static tBlockNode * TbxMemPoolBlockListExtract(tBlockList * listPtr)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  tBlockNode * result = NULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Verify parameter. */
  TBX_ASSERT(listPtr != NULL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <TbxMemPoolBlockListExtract+0x1c>
 8002eda:	f240 3167 	movw	r1, #871	; 0x367
 8002ede:	480f      	ldr	r0, [pc, #60]	; (8002f1c <TbxMemPoolBlockListExtract+0x54>)
 8002ee0:	f7ff fa0a 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (listPtr != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d013      	beq.n	8002f12 <TbxMemPoolBlockListExtract+0x4a>
  {
    /* Only extract a node if the list currently not empty. */
    if (*listPtr != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00f      	beq.n	8002f12 <TbxMemPoolBlockListExtract+0x4a>
    {
      /* Get the first node. */
      result = *listPtr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]
      /* Is there currently only one node in the list? */
      if ((*listPtr)->nextNodePtr == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <TbxMemPoolBlockListExtract+0x42>
      {
        /* Set the list to be empty. */
        *listPtr = NULL;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e003      	b.n	8002f12 <TbxMemPoolBlockListExtract+0x4a>
      }
      /* There are currently at least two nodes in the list. */
      else
      {
        /* Make the second node the first one. */
        *listPtr = result->nextNodePtr;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* Give the result back to the caller. */
  return result;
 8002f12:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxMemPoolBlockListExtract ***/
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	080052f8 	.word	0x080052f8

08002f20 <TbxMemPoolBlockListIsEmpty>:
** \param     listPtr Pointer to the linked list with blocks.
** \return    TBX_TRUE if the block list is empty, TBX_FALSE otherwise.
**
****************************************************************************************/
static uint8_t TbxMemPoolBlockListIsEmpty(tBlockList const * listPtr)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint8_t result = TBX_FALSE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	73fb      	strb	r3, [r7, #15]

  /* Verify parameter. */
  TBX_ASSERT(listPtr != NULL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d104      	bne.n	8002f3c <TbxMemPoolBlockListIsEmpty+0x1c>
 8002f32:	f240 3191 	movw	r1, #913	; 0x391
 8002f36:	4808      	ldr	r0, [pc, #32]	; (8002f58 <TbxMemPoolBlockListIsEmpty+0x38>)
 8002f38:	f7ff f9de 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (listPtr != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <TbxMemPoolBlockListIsEmpty+0x2e>
  {
    /* Is the list empty? */
    if (*listPtr == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <TbxMemPoolBlockListIsEmpty+0x2e>
    {
      /* Update the result value. */
      result = TBX_TRUE;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Give the result back to the caller. */
  return result;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxMemPoolBlockListIsEmpty ***/
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	080052f8 	.word	0x080052f8

08002f5c <TbxMbEventTask>:
**            For this reason it is recommended to use an RTOS in combination with a
**            Modbus client.
**
****************************************************************************************/
void TbxMbEventTask(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
  static tTbxList * pollerList = NULL;
  static uint8_t    pollerListInitialized = TBX_FALSE;
  const  uint16_t   defaultWaitTimeoutMs = 5000U;
 8002f62:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f66:	827b      	strh	r3, [r7, #18]
  static uint16_t   waitTimeoutMS = 5000U;
  tTbxMbEvent       newEvent = { 0 };
 8002f68:	463b      	mov	r3, r7
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]

  /* Only initialize the event poller once, */
  if (pollerListInitialized == TBX_FALSE)
 8002f70:	4b4b      	ldr	r3, [pc, #300]	; (80030a0 <TbxMbEventTask+0x144>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10f      	bne.n	8002f98 <TbxMbEventTask+0x3c>
  {
    pollerListInitialized = TBX_TRUE;
 8002f78:	4b49      	ldr	r3, [pc, #292]	; (80030a0 <TbxMbEventTask+0x144>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
    /* Ceate the queue for storing context of which the pollFcn should be called. */
    pollerList = TbxListCreate();
 8002f7e:	f7ff fa47 	bl	8002410 <TbxListCreate>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4a47      	ldr	r2, [pc, #284]	; (80030a4 <TbxMbEventTask+0x148>)
 8002f86:	6013      	str	r3, [r2, #0]
    /* Verify that the queue creation succeeded. If this assertion fails, increase the
     * heap size using configuration macro TBX_CONF_HEAP_SIZE.
     */
    TBX_ASSERT(pollerList != NULL);
 8002f88:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <TbxMbEventTask+0x148>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d103      	bne.n	8002f98 <TbxMbEventTask+0x3c>
 8002f90:	2168      	movs	r1, #104	; 0x68
 8002f92:	4845      	ldr	r0, [pc, #276]	; (80030a8 <TbxMbEventTask+0x14c>)
 8002f94:	f7ff f9b0 	bl	80022f8 <TbxAssertTrigger>

  /* Wait for a new event to be posted to the event queue. Note that that wait time only
   * applies in case an RTOS is configured for the OSAL. Otherwise (TBX_MB_OPT_OSAL_NONE)
   * this function returns immediately.
   */
  if (TbxMbOsalEventWait(&newEvent, waitTimeoutMS) == TBX_TRUE)
 8002f98:	4b44      	ldr	r3, [pc, #272]	; (80030ac <TbxMbEventTask+0x150>)
 8002f9a:	881a      	ldrh	r2, [r3, #0]
 8002f9c:	463b      	mov	r3, r7
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 ffa3 	bl	8004eec <TbxMbOsalEventWait>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d148      	bne.n	800303e <TbxMbEventTask+0xe2>
  {
    /* Check the opaque context pointer. */
    TBX_ASSERT(newEvent.context != NULL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d103      	bne.n	8002fba <TbxMbEventTask+0x5e>
 8002fb2:	2172      	movs	r1, #114	; 0x72
 8002fb4:	483c      	ldr	r0, [pc, #240]	; (80030a8 <TbxMbEventTask+0x14c>)
 8002fb6:	f7ff f99f 	bl	80022f8 <TbxAssertTrigger>
    /* Only continue with a valid opaque context pointer. */
    if (newEvent.context != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d03e      	beq.n	800303e <TbxMbEventTask+0xe2>
    {
      /* Filter on the event identifier. */
      switch (newEvent.id)
 8002fc0:	783b      	ldrb	r3, [r7, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <TbxMbEventTask+0x70>
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d025      	beq.n	8003016 <TbxMbEventTask+0xba>
 8002fca:	e02c      	b.n	8003026 <TbxMbEventTask+0xca>
        {
          /* Poller list entries are allocated from a memory pool. This means that there
           * is no need to worry about heap fragmentation. Just make sure to cap the
           * maximum number of entries to prevent heap exhaustion.
           */
          TBX_ASSERT(TbxListGetSize(pollerList) <= TBX_MB_EVENT_QUEUE_SIZE);
 8002fcc:	4b35      	ldr	r3, [pc, #212]	; (80030a4 <TbxMbEventTask+0x148>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fa67 	bl	80024a4 <TbxListGetSize>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d903      	bls.n	8002fe4 <TbxMbEventTask+0x88>
 8002fdc:	217f      	movs	r1, #127	; 0x7f
 8002fde:	4832      	ldr	r0, [pc, #200]	; (80030a8 <TbxMbEventTask+0x14c>)
 8002fe0:	f7ff f98a 	bl	80022f8 <TbxAssertTrigger>
          /* Only continue if the current poller list size is not yet maxed out. */
          if (TbxListGetSize(pollerList) <= TBX_MB_EVENT_QUEUE_SIZE)
 8002fe4:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <TbxMbEventTask+0x148>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fa5b 	bl	80024a4 <TbxListGetSize>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d826      	bhi.n	8003042 <TbxMbEventTask+0xe6>
          {
            /* Add the context at the end of the event poller list. */
            uint8_t insertResult = TbxListInsertItemBack(pollerList, newEvent.context);
 8002ff4:	4b2b      	ldr	r3, [pc, #172]	; (80030a4 <TbxMbEventTask+0x148>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fa6f 	bl	80024e0 <TbxListInsertItemBack>
 8003002:	4603      	mov	r3, r0
 8003004:	747b      	strb	r3, [r7, #17]
            /* Check that the item could be added to the queue. If not, then the heaps size
             * is configured too small. In this case increase the heap size using
            * configuration macro TBX_CONF_HEAP_SIZE. 
            */
            TBX_ASSERT(insertResult == TBX_OK);
 8003006:	7c7b      	ldrb	r3, [r7, #17]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d01a      	beq.n	8003042 <TbxMbEventTask+0xe6>
 800300c:	2189      	movs	r1, #137	; 0x89
 800300e:	4826      	ldr	r0, [pc, #152]	; (80030a8 <TbxMbEventTask+0x14c>)
 8003010:	f7ff f972 	bl	80022f8 <TbxAssertTrigger>
          }
        }
        break;
 8003014:	e015      	b.n	8003042 <TbxMbEventTask+0xe6>
      
        case TBX_MB_EVENT_ID_STOP_POLLING:
        {
          /* Remove the context from the event poller list. */
          TbxListRemoveItem(pollerList, newEvent.context);
 8003016:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <TbxMbEventTask+0x148>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fac8 	bl	80025b4 <TbxListRemoveItem>
        }
        break;
 8003024:	e010      	b.n	8003048 <TbxMbEventTask+0xec>

        default:
        {
          /* Convert the opaque pointer to the event context structure. */
          tTbxMbEventCtx * eventCtx = (tTbxMbEventCtx *)newEvent.context;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	60fb      	str	r3, [r7, #12]
          /* Pass the event on to the context's event processor. */
          if (eventCtx->processFcn != NULL)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <TbxMbEventTask+0xea>
          {
            eventCtx->processFcn(&newEvent);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	463a      	mov	r2, r7
 8003038:	4610      	mov	r0, r2
 800303a:	4798      	blx	r3
          }
        }
        break;
 800303c:	e003      	b.n	8003046 <TbxMbEventTask+0xea>
      }
    }
 800303e:	bf00      	nop
 8003040:	e002      	b.n	8003048 <TbxMbEventTask+0xec>
        break;
 8003042:	bf00      	nop
 8003044:	e000      	b.n	8003048 <TbxMbEventTask+0xec>
        break;
 8003046:	bf00      	nop
  }

  /* Iterate over the event poller list. */
  void * listItem = TbxListGetFirstItem(pollerList);
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <TbxMbEventTask+0x148>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fb8d 	bl	800276c <TbxListGetFirstItem>
 8003052:	6178      	str	r0, [r7, #20]
  while (listItem != NULL)
 8003054:	e010      	b.n	8003078 <TbxMbEventTask+0x11c>
  {
    /* Convert the opaque pointer to the event context structure. */
    tTbxMbEventCtx * eventPollCtx = (tTbxMbEventCtx *)listItem;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	60bb      	str	r3, [r7, #8]
    /* Call its poll function if configured. */
    if (eventPollCtx->pollFcn != NULL)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <TbxMbEventTask+0x10e>
    {
      eventPollCtx->pollFcn(listItem);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	6978      	ldr	r0, [r7, #20]
 8003068:	4798      	blx	r3
    }
    /* Move on to the next item in the list. */
    listItem = TbxListGetNextItem(pollerList, listItem);
 800306a:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <TbxMbEventTask+0x148>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6979      	ldr	r1, [r7, #20]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fb9f 	bl	80027b4 <TbxListGetNextItem>
 8003076:	6178      	str	r0, [r7, #20]
  while (listItem != NULL)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1eb      	bne.n	8003056 <TbxMbEventTask+0xfa>
  /* Set the event wait timeout for the next call to this task function. If the event
   * poller list is not empty, keep the wait time short to make sure the poll functions
   * get continuously called. Otherwise go back to the default wait time to not hog up
   * CPU time unnecessarily.
   */
  waitTimeoutMS = (TbxListGetSize(pollerList) > 0U) ? 1U : defaultWaitTimeoutMs;
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <TbxMbEventTask+0x148>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fa0e 	bl	80024a4 <TbxListGetSize>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <TbxMbEventTask+0x136>
 800308e:	8a7b      	ldrh	r3, [r7, #18]
 8003090:	e000      	b.n	8003094 <TbxMbEventTask+0x138>
 8003092:	2301      	movs	r3, #1
 8003094:	4a05      	ldr	r2, [pc, #20]	; (80030ac <TbxMbEventTask+0x150>)
 8003096:	8013      	strh	r3, [r2, #0]
} /*** end of TbxMbEventTask ***/
 8003098:	bf00      	nop
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	200008d8 	.word	0x200008d8
 80030a4:	200008dc 	.word	0x200008dc
 80030a8:	0800531c 	.word	0x0800531c
 80030ac:	2000000a 	.word	0x2000000a

080030b0 <TbxMbPortUartInit>:
void TbxMbPortUartInit(tTbxMbUartPort     port, 
                       tTbxMbUartBaudrate baudrate,
                       tTbxMbUartDatabits databits, 
                       tTbxMbUartStopbits stopbits,
                       tTbxMbUartParity   parity)
{
 80030b0:	b490      	push	{r4, r7}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4604      	mov	r4, r0
 80030b8:	4608      	mov	r0, r1
 80030ba:	4611      	mov	r1, r2
 80030bc:	461a      	mov	r2, r3
 80030be:	4623      	mov	r3, r4
 80030c0:	71fb      	strb	r3, [r7, #7]
 80030c2:	4603      	mov	r3, r0
 80030c4:	71bb      	strb	r3, [r7, #6]
 80030c6:	460b      	mov	r3, r1
 80030c8:	717b      	strb	r3, [r7, #5]
 80030ca:	4613      	mov	r3, r2
 80030cc:	713b      	strb	r3, [r7, #4]
   *   - Configure the baudrate, number of databits, number of stopbits, and parity mode.
   *   - Enable the UART transmitter and receiver.
   *   - Enable the receive data register full (RXNE) interrupt.
   */

} /*** end of TbxMbPortUartInit ***/
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc90      	pop	{r4, r7}
 80030d6:	4770      	bx	lr

080030d8 <TbxMbPortUartTransmit>:
**
****************************************************************************************/
uint8_t TbxMbPortUartTransmit(tTbxMbUartPort         port, 
                              uint8_t        const * data, 
                              uint16_t               len)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	71fb      	strb	r3, [r7, #7]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80bb      	strh	r3, [r7, #4]
  uint8_t result = TBX_OK;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]

  /* Prepare the transmit information taking into account that this function will already
   * start the transmission of the first byte.
   */
  transmitInfo[port].data = data;
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	490b      	ldr	r1, [pc, #44]	; (800311c <TbxMbPortUartTransmit+0x44>)
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
  transmitInfo[port].totalLen = len;
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	4a08      	ldr	r2, [pc, #32]	; (800311c <TbxMbPortUartTransmit+0x44>)
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	88ba      	ldrh	r2, [r7, #4]
 8003100:	80da      	strh	r2, [r3, #6]
  transmitInfo[port].nextIdx = 1U;
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	4a05      	ldr	r2, [pc, #20]	; (800311c <TbxMbPortUartTransmit+0x44>)
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	2201      	movs	r2, #1
 800310c:	809a      	strh	r2, [r3, #4]
   *   byte (len == 1), otherwise enable the transmit data register empty (TXE)
   *   interrupt.
   */

  /* Give the result back to the caller. */
  return result;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxMbPortUartTransmit ***/
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	200008e0 	.word	0x200008e0

08003120 <TbxMbPortTimerCount>:
**            accuracy of the T1_5 and T3_5 timings, so there's a trade off involved.
** \return    Free running counter value.
**
****************************************************************************************/
uint16_t TbxMbPortTimerCount(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
   * approach would cause a high interrupt load. It is therefore better from a run-time
   * performance perspective to simply  configure your timer to increment its free
   * running counter every 50 microseconds.
   */

  return 0U;
 8003124:	2300      	movs	r3, #0
} /*** end of TbxMbPortTimerCount ***/
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <TbxMbRtuCreate>:
tTbxMbTp TbxMbRtuCreate(uint8_t            nodeAddr, 
                        tTbxMbUartPort     port, 
                        tTbxMbUartBaudrate baudrate,
                        tTbxMbUartStopbits stopbits,
                        tTbxMbUartParity   parity)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b08f      	sub	sp, #60	; 0x3c
 8003134:	af04      	add	r7, sp, #16
 8003136:	4604      	mov	r4, r0
 8003138:	4608      	mov	r0, r1
 800313a:	4611      	mov	r1, r2
 800313c:	461a      	mov	r2, r3
 800313e:	4623      	mov	r3, r4
 8003140:	71fb      	strb	r3, [r7, #7]
 8003142:	4603      	mov	r3, r0
 8003144:	71bb      	strb	r3, [r7, #6]
 8003146:	460b      	mov	r3, r1
 8003148:	717b      	strb	r3, [r7, #5]
 800314a:	4613      	mov	r3, r2
 800314c:	713b      	strb	r3, [r7, #4]
  tTbxMbTp result = NULL;
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make sure the OSAL event module is initialized. The application will always first
   * create a transport layer object before a channel object. Consequently, this is the
   * best place to do the OSAL module initialization.
   */
  TbxMbOsalEventInit();
 8003152:	f001 fe5d 	bl	8004e10 <TbxMbOsalEventInit>

  /* Verify parameters. */
  TBX_ASSERT((nodeAddr <= TBX_MB_TP_NODE_ADDR_MAX) &&
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	2bf7      	cmp	r3, #247	; 0xf7
 800315a:	d80c      	bhi.n	8003176 <TbxMbRtuCreate+0x46>
 800315c:	79bb      	ldrb	r3, [r7, #6]
 800315e:	2b07      	cmp	r3, #7
 8003160:	d809      	bhi.n	8003176 <TbxMbRtuCreate+0x46>
 8003162:	797b      	ldrb	r3, [r7, #5]
 8003164:	2b07      	cmp	r3, #7
 8003166:	d806      	bhi.n	8003176 <TbxMbRtuCreate+0x46>
 8003168:	793b      	ldrb	r3, [r7, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d803      	bhi.n	8003176 <TbxMbRtuCreate+0x46>
 800316e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003172:	2b02      	cmp	r3, #2
 8003174:	d903      	bls.n	800317e <TbxMbRtuCreate+0x4e>
 8003176:	2193      	movs	r1, #147	; 0x93
 8003178:	486a      	ldr	r0, [pc, #424]	; (8003324 <TbxMbRtuCreate+0x1f4>)
 800317a:	f7ff f8bd 	bl	80022f8 <TbxAssertTrigger>
             (baudrate < TBX_MB_UART_NUM_BAUDRATE) &&
             (stopbits < TBX_MB_UART_NUM_STOPBITS) &&
             (parity < TBX_MB_UART_NUM_PARITY));

  /* Only continue with valid parameters. */
  if ((nodeAddr <= TBX_MB_TP_NODE_ADDR_MAX) &&
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2bf7      	cmp	r3, #247	; 0xf7
 8003182:	f200 80c9 	bhi.w	8003318 <TbxMbRtuCreate+0x1e8>
 8003186:	79bb      	ldrb	r3, [r7, #6]
 8003188:	2b07      	cmp	r3, #7
 800318a:	f200 80c5 	bhi.w	8003318 <TbxMbRtuCreate+0x1e8>
      (port < TBX_MB_UART_NUM_PORT) && 
 800318e:	797b      	ldrb	r3, [r7, #5]
 8003190:	2b07      	cmp	r3, #7
 8003192:	f200 80c1 	bhi.w	8003318 <TbxMbRtuCreate+0x1e8>
      (baudrate < TBX_MB_UART_NUM_BAUDRATE) &&
 8003196:	793b      	ldrb	r3, [r7, #4]
 8003198:	2b01      	cmp	r3, #1
 800319a:	f200 80bd 	bhi.w	8003318 <TbxMbRtuCreate+0x1e8>
      (stopbits < TBX_MB_UART_NUM_STOPBITS) &&
 800319e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	f200 80b8 	bhi.w	8003318 <TbxMbRtuCreate+0x1e8>
      (parity < TBX_MB_UART_NUM_PARITY))
  {
    /* Allocate memory for the new transport context. */
    tTbxMbTpCtx * newTpCtx = TbxMemPoolAllocate(sizeof(tTbxMbTpCtx));
 80031a8:	f44f 7015 	mov.w	r0, #596	; 0x254
 80031ac:	f7ff fc18 	bl	80029e0 <TbxMemPoolAllocate>
 80031b0:	6238      	str	r0, [r7, #32]
    /* Automatically increase the memory pool, if it was too small. */
    if (newTpCtx == NULL)
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <TbxMbRtuCreate+0x9c>
    {
      /* No need to check the return value, because if it failed, the following
       * allocation fails too, which is verified later on.
       */
      (void)TbxMemPoolCreate(1U, sizeof(tTbxMbTpCtx));
 80031b8:	f44f 7115 	mov.w	r1, #596	; 0x254
 80031bc:	2001      	movs	r0, #1
 80031be:	f7ff fb6d 	bl	800289c <TbxMemPoolCreate>
      newTpCtx = TbxMemPoolAllocate(sizeof(tTbxMbTpCtx));      
 80031c2:	f44f 7015 	mov.w	r0, #596	; 0x254
 80031c6:	f7ff fc0b 	bl	80029e0 <TbxMemPoolAllocate>
 80031ca:	6238      	str	r0, [r7, #32]
    }
    /* Verify memory allocation of the transport context. */
    TBX_ASSERT(newTpCtx != NULL);
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d103      	bne.n	80031da <TbxMbRtuCreate+0xaa>
 80031d2:	21ac      	movs	r1, #172	; 0xac
 80031d4:	4853      	ldr	r0, [pc, #332]	; (8003324 <TbxMbRtuCreate+0x1f4>)
 80031d6:	f7ff f88f 	bl	80022f8 <TbxAssertTrigger>
    /* Only continue if the memory allocation succeeded. */
    if (newTpCtx != NULL)
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 809b 	beq.w	8003318 <TbxMbRtuCreate+0x1e8>
    {
      /* Initialize the transport context. */
      newTpCtx->type = TBX_MB_RTU_CONTEXT_TYPE;
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	2254      	movs	r2, #84	; 0x54
 80031e6:	731a      	strb	r2, [r3, #12]
      newTpCtx->instancePtr = NULL;
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
      newTpCtx->pollFcn = TbxMbRtuPoll;
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	4a4d      	ldr	r2, [pc, #308]	; (8003328 <TbxMbRtuCreate+0x1f8>)
 80031f2:	605a      	str	r2, [r3, #4]
      newTpCtx->processFcn = NULL;
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
      newTpCtx->transmitFcn = TbxMbRtuTransmit;
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	4a4b      	ldr	r2, [pc, #300]	; (800332c <TbxMbRtuCreate+0x1fc>)
 80031fe:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
      newTpCtx->receptionDoneFcn = TbxMbRtuReceptionDone;
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	4a4a      	ldr	r2, [pc, #296]	; (8003330 <TbxMbRtuCreate+0x200>)
 8003206:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
      newTpCtx->getRxPacketFcn = TbxMbRtuGetRxPacket;
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	4a49      	ldr	r2, [pc, #292]	; (8003334 <TbxMbRtuCreate+0x204>)
 800320e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
      newTpCtx->getTxPacketFcn = TbxMbRtuGetTxPacket;
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	4a48      	ldr	r2, [pc, #288]	; (8003338 <TbxMbRtuCreate+0x208>)
 8003216:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
      newTpCtx->nodeAddr = nodeAddr;
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	79fa      	ldrb	r2, [r7, #7]
 800321e:	735a      	strb	r2, [r3, #13]
      newTpCtx->port = port;
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	79ba      	ldrb	r2, [r7, #6]
 8003224:	739a      	strb	r2, [r3, #14]
      newTpCtx->state = TBX_MB_RTU_STATE_INIT;
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
      newTpCtx->rxTime = TbxMbPortTimerCount();
 800322e:	f7ff ff77 	bl	8003120 <TbxMbPortTimerCount>
 8003232:	4603      	mov	r3, r0
 8003234:	461a      	mov	r2, r3
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
      newTpCtx->initStateExitSem = TbxMbOsalSemCreate();
 800323c:	f001 fea2 	bl	8004f84 <TbxMbOsalSemCreate>
 8003240:	4602      	mov	r2, r0
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
      newTpCtx->diagInfo.busMsgCnt = 0U;
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	2200      	movs	r2, #0
 800324c:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
      newTpCtx->diagInfo.busCommErrCnt = 0U;
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	2200      	movs	r2, #0
 8003254:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
      newTpCtx->diagInfo.busExcpErrCnt = 0U;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	2200      	movs	r2, #0
 800325c:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
      newTpCtx->diagInfo.srvMsgCnt = 0U;
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	2200      	movs	r2, #0
 8003264:	f8a3 223e 	strh.w	r2, [r3, #574]	; 0x23e
      newTpCtx->diagInfo.srvNoRespCnt = 0U;
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2200      	movs	r2, #0
 800326c:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
      /* Store the transport context in the lookup table. */
      tbxMbRtuCtx[port] = newTpCtx;
 8003270:	79bb      	ldrb	r3, [r7, #6]
 8003272:	4932      	ldr	r1, [pc, #200]	; (800333c <TbxMbRtuCreate+0x20c>)
 8003274:	6a3a      	ldr	r2, [r7, #32]
 8003276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      /* Initialize the port. Note the RTU always uses 8 databits. */
      TbxMbUartInit(port, baudrate, TBX_MB_UART_8_DATABITS, stopbits, parity,
 800327a:	793a      	ldrb	r2, [r7, #4]
 800327c:	7979      	ldrb	r1, [r7, #5]
 800327e:	79b8      	ldrb	r0, [r7, #6]
 8003280:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <TbxMbRtuCreate+0x210>)
 8003282:	9302      	str	r3, [sp, #8]
 8003284:	4b2f      	ldr	r3, [pc, #188]	; (8003344 <TbxMbRtuCreate+0x214>)
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	2201      	movs	r2, #1
 8003292:	f001 ff49 	bl	8005128 <TbxMbUartInit>
      /* Determine the 1.5 and 3.5 character times in units of 50us ticks. If the
       * baudrate is greater than 19200, then these are fixed to 750us and 1750us,
       * respectively. Make sure to add one extra to adjust for timer resolution
       * inaccuracy.
       */
      if (baudrate > TBX_MB_UART_19200BPS)
 8003296:	797b      	ldrb	r3, [r7, #5]
 8003298:	2b04      	cmp	r3, #4
 800329a:	d908      	bls.n	80032ae <TbxMbRtuCreate+0x17e>
      {
        newTpCtx->t1_5Ticks = 16U;                         /* 750us / 50us ticks.      */
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	2210      	movs	r2, #16
 80032a0:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
        newTpCtx->t3_5Ticks = 36U;                         /* 1750us / 50us ticks      */
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	2224      	movs	r2, #36	; 0x24
 80032a8:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
 80032ac:	e028      	b.n	8003300 <TbxMbRtuCreate+0x1d0>
         * 
         * t1_5CharTicks = (16500000 / 50) / baudrate = 330000 / baudrate
         * t3_5CharTicks = (38500000 / 50) / baudrate = 770000 / baudrate
         * 
         */
        const uint16_t baudrateLookup[] =
 80032ae:	4a26      	ldr	r2, [pc, #152]	; (8003348 <TbxMbRtuCreate+0x218>)
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032b6:	c303      	stmia	r3!, {r0, r1}
 80032b8:	801a      	strh	r2, [r3, #0]
          19200                                            /* TBX_MB_UART_19200BPS     */
        };
        /* The following calculation does integer roundup (A + (B-1)) / B and adds one
         * extra to adjust for timer resolution inaccuracy.
         */
        uint16_t baudBps = baudrateLookup[baudrate];
 80032ba:	797b      	ldrb	r3, [r7, #5]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	3328      	adds	r3, #40	; 0x28
 80032c0:	443b      	add	r3, r7
 80032c2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80032c6:	83fb      	strh	r3, [r7, #30]
        newTpCtx->t1_5Ticks = (uint16_t)(((330000UL + (baudBps - 1UL)) / baudBps) + 1U);
 80032c8:	8bfb      	ldrh	r3, [r7, #30]
 80032ca:	f503 23a1 	add.w	r3, r3, #329728	; 0x50800
 80032ce:	f203 130f 	addw	r3, r3, #271	; 0x10f
 80032d2:	8bfa      	ldrh	r2, [r7, #30]
 80032d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
        newTpCtx->t3_5Ticks = (uint16_t)(((770000UL + (baudBps - 1UL)) / baudBps) + 1U);
 80032e4:	8bfb      	ldrh	r3, [r7, #30]
 80032e6:	f503 233b 	add.w	r3, r3, #765952	; 0xbb000
 80032ea:	f603 73cf 	addw	r3, r3, #4047	; 0xfcf
 80032ee:	8bfa      	ldrh	r2, [r7, #30]
 80032f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3301      	adds	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
      }
      /* Instruct the event task to call our polling function to be able to determine
       * when it's time to transition from INIT to IDLE.
       */
      tTbxMbEvent newEvent = {.context = newTpCtx, .id = TBX_MB_EVENT_ID_START_POLLING};
 8003300:	2300      	movs	r3, #0
 8003302:	753b      	strb	r3, [r7, #20]
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	61bb      	str	r3, [r7, #24]
      TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fd9c 	bl	8004e4c <TbxMbOsalEventPost>
      /* Update the result. */
      result = newTpCtx;
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  /* Give the result back to the caller. */
  return result;
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
} /*** end of TbxMbRtuCreate ***/  
 800331a:	4618      	mov	r0, r3
 800331c:	372c      	adds	r7, #44	; 0x2c
 800331e:	46bd      	mov	sp, r7
 8003320:	bd90      	pop	{r4, r7, pc}
 8003322:	bf00      	nop
 8003324:	08005348 	.word	0x08005348
 8003328:	0800334d 	.word	0x0800334d
 800332c:	08003569 	.word	0x08003569
 8003330:	08003709 	.word	0x08003709
 8003334:	08003781 	.word	0x08003781
 8003338:	080037e5 	.word	0x080037e5
 800333c:	20000920 	.word	0x20000920
 8003340:	08003a21 	.word	0x08003a21
 8003344:	08003981 	.word	0x08003981
 8003348:	08005370 	.word	0x08005370

0800334c <TbxMbRtuPoll>:
**            TBX_MB_EVENT_ID_STOP_POLLING events to activate and deactivate.
** \param     transport Handle to RTU transport layer object.
**
****************************************************************************************/
static void TbxMbRtuPoll(tTbxMbTp transport)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b090      	sub	sp, #64	; 0x40
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <TbxMbRtuPoll+0x18>
 800335a:	f240 1131 	movw	r1, #305	; 0x131
 800335e:	4881      	ldr	r0, [pc, #516]	; (8003564 <TbxMbRtuPoll+0x218>)
 8003360:	f7fe ffca 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80ee 	beq.w	8003548 <TbxMbRtuPoll+0x1fc>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 8003370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003372:	7b1b      	ldrb	r3, [r3, #12]
 8003374:	2b54      	cmp	r3, #84	; 0x54
 8003376:	d004      	beq.n	8003382 <TbxMbRtuPoll+0x36>
 8003378:	f240 1139 	movw	r1, #313	; 0x139
 800337c:	4879      	ldr	r0, [pc, #484]	; (8003564 <TbxMbRtuPoll+0x218>)
 800337e:	f7fe ffbb 	bl	80022f8 <TbxAssertTrigger>
    /* Filter on the current state. */
    TbxCriticalSectionEnter();
 8003382:	f7fe ffcf 	bl	8002324 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8003386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003388:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 800338c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    TbxCriticalSectionExit();
 8003390:	f7fe ffe2 	bl	8002358 <TbxCriticalSectionExit>
    switch (currentState)
 8003394:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003398:	2b03      	cmp	r3, #3
 800339a:	d008      	beq.n	80033ae <TbxMbRtuPoll+0x62>
 800339c:	2b03      	cmp	r3, #3
 800339e:	f300 80d5 	bgt.w	800354c <TbxMbRtuPoll+0x200>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80a1 	beq.w	80034ea <TbxMbRtuPoll+0x19e>
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d06a      	beq.n	8003482 <TbxMbRtuPoll+0x136>

      default:
      {
        /* In the current state, nothing needs to be done. */
      }
      break;
 80033ac:	e0ce      	b.n	800354c <TbxMbRtuPoll+0x200>
        TbxCriticalSectionEnter();
 80033ae:	f7fe ffb9 	bl	8002324 <TbxCriticalSectionEnter>
        uint16_t rxTimeCopy = tpCtx->rxTime;
 80033b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b4:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80033b8:	873b      	strh	r3, [r7, #56]	; 0x38
        TbxCriticalSectionExit();
 80033ba:	f7fe ffcd 	bl	8002358 <TbxCriticalSectionExit>
        uint16_t deltaTicks = TbxMbPortTimerCount() - rxTimeCopy;
 80033be:	f7ff feaf 	bl	8003120 <TbxMbPortTimerCount>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        if (deltaTicks >= tpCtx->t3_5Ticks)
 80033cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ce:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 80033d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80033d4:	429a      	cmp	r2, r3
 80033d6:	f0c0 80bb 	bcc.w	8003550 <TbxMbRtuPoll+0x204>
          newEvent.context = tpCtx;
 80033da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
          newEvent.id = TBX_MB_EVENT_ID_STOP_POLLING;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 80033e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f001 fd2e 	bl	8004e4c <TbxMbOsalEventPost>
          TbxCriticalSectionEnter();
 80033f0:	f7fe ff98 	bl	8002324 <TbxCriticalSectionEnter>
          uint8_t rxAduOkayCpy = tpCtx->rxAduOkay;
 80033f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f6:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 80033fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
          TbxCriticalSectionExit();
 80033fe:	f7fe ffab 	bl	8002358 <TbxCriticalSectionExit>
          if (rxAduOkayCpy == TBX_TRUE)
 8003402:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003406:	2b01      	cmp	r3, #1
 8003408:	d132      	bne.n	8003470 <TbxMbRtuPoll+0x124>
            TbxCriticalSectionEnter();
 800340a:	f7fe ff8b 	bl	8002324 <TbxCriticalSectionEnter>
            tpCtx->state = TBX_MB_RTU_STATE_VALIDATION;
 800340e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003410:	2204      	movs	r2, #4
 8003412:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
            TbxCriticalSectionExit();
 8003416:	f7fe ff9f 	bl	8002358 <TbxCriticalSectionExit>
            tpCtx->rxPacket.dataLen = tpCtx->rxAduWrIdx - 4U;
 800341a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341c:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 8003420:	b2db      	uxtb	r3, r3
 8003422:	3b04      	subs	r3, #4
 8003424:	b2da      	uxtb	r2, r3
 8003426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003428:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
            tpCtx->rxPacket.node = tpCtx->rxPacket.head[TBX_MB_TP_ADU_HEAD_LEN_MAX-1U];
 800342c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342e:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 8003432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003434:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
            if (TbxMbRtuValidate(tpCtx) != TBX_OK)
 8003438:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800343a:	f000 fa05 	bl	8003848 <TbxMbRtuValidate>
 800343e:	4603      	mov	r3, r0
 8003440:	2b01      	cmp	r3, #1
 8003442:	d008      	beq.n	8003456 <TbxMbRtuPoll+0x10a>
              TbxCriticalSectionEnter();
 8003444:	f7fe ff6e 	bl	8002324 <TbxCriticalSectionEnter>
              tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 8003448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344a:	2201      	movs	r2, #1
 800344c:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
              TbxCriticalSectionExit();
 8003450:	f7fe ff82 	bl	8002358 <TbxCriticalSectionExit>
      break;
 8003454:	e07c      	b.n	8003550 <TbxMbRtuPoll+0x204>
              pduRxEvent.context = tpCtx->channelCtx;
 8003456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003458:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800345c:	623b      	str	r3, [r7, #32]
              pduRxEvent.id = TBX_MB_EVENT_ID_PDU_RECEIVED;
 800345e:	2302      	movs	r3, #2
 8003460:	773b      	strb	r3, [r7, #28]
              TbxMbOsalEventPost(&pduRxEvent, TBX_FALSE);
 8003462:	f107 031c 	add.w	r3, r7, #28
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f001 fcef 	bl	8004e4c <TbxMbOsalEventPost>
      break;
 800346e:	e06f      	b.n	8003550 <TbxMbRtuPoll+0x204>
            TbxCriticalSectionEnter();
 8003470:	f7fe ff58 	bl	8002324 <TbxCriticalSectionEnter>
            tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 8003474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003476:	2201      	movs	r2, #1
 8003478:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
            TbxCriticalSectionExit();
 800347c:	f7fe ff6c 	bl	8002358 <TbxCriticalSectionExit>
      break;
 8003480:	e066      	b.n	8003550 <TbxMbRtuPoll+0x204>
        TbxCriticalSectionEnter();
 8003482:	f7fe ff4f 	bl	8002324 <TbxCriticalSectionEnter>
        uint16_t txDoneTimeCopy = tpCtx->txDoneTime;
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800348c:	867b      	strh	r3, [r7, #50]	; 0x32
        TbxCriticalSectionExit();
 800348e:	f7fe ff63 	bl	8002358 <TbxCriticalSectionExit>
        uint16_t deltaTicks = TbxMbPortTimerCount() - txDoneTimeCopy;
 8003492:	f7ff fe45 	bl	8003120 <TbxMbPortTimerCount>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	863b      	strh	r3, [r7, #48]	; 0x30
        if (deltaTicks >= tpCtx->t3_5Ticks)
 80034a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a2:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 80034a6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d353      	bcc.n	8003554 <TbxMbRtuPoll+0x208>
          TbxCriticalSectionEnter();
 80034ac:	f7fe ff3a 	bl	8002324 <TbxCriticalSectionEnter>
          tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 80034b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
          TbxCriticalSectionExit();
 80034b8:	f7fe ff4e 	bl	8002358 <TbxCriticalSectionExit>
          newEvent.context = tpCtx;
 80034bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034be:	61bb      	str	r3, [r7, #24]
          newEvent.id = TBX_MB_EVENT_ID_STOP_POLLING;
 80034c0:	2301      	movs	r3, #1
 80034c2:	753b      	strb	r3, [r7, #20]
          TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 fcbe 	bl	8004e4c <TbxMbOsalEventPost>
          newEvent.context = tpCtx->channelCtx;
 80034d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d2:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80034d6:	61bb      	str	r3, [r7, #24]
          newEvent.id = TBX_MB_EVENT_ID_PDU_TRANSMITTED;
 80034d8:	2303      	movs	r3, #3
 80034da:	753b      	strb	r3, [r7, #20]
          TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	2100      	movs	r1, #0
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 fcb2 	bl	8004e4c <TbxMbOsalEventPost>
      break;
 80034e8:	e034      	b.n	8003554 <TbxMbRtuPoll+0x208>
        TbxCriticalSectionEnter();
 80034ea:	f7fe ff1b 	bl	8002324 <TbxCriticalSectionEnter>
        uint16_t rxTimeCopy = tpCtx->rxTime;
 80034ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f0:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80034f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        TbxCriticalSectionExit();
 80034f6:	f7fe ff2f 	bl	8002358 <TbxCriticalSectionExit>
        uint16_t deltaTicks = TbxMbPortTimerCount() - rxTimeCopy;
 80034fa:	f7ff fe11 	bl	8003120 <TbxMbPortTimerCount>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if (deltaTicks >= tpCtx->t3_5Ticks)
 8003508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350a:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 800350e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003510:	429a      	cmp	r2, r3
 8003512:	d321      	bcc.n	8003558 <TbxMbRtuPoll+0x20c>
          TbxCriticalSectionEnter();
 8003514:	f7fe ff06 	bl	8002324 <TbxCriticalSectionEnter>
          tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 8003518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351a:	2201      	movs	r2, #1
 800351c:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
          TbxCriticalSectionExit();
 8003520:	f7fe ff1a 	bl	8002358 <TbxCriticalSectionExit>
          newEvent.context = tpCtx;
 8003524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003526:	613b      	str	r3, [r7, #16]
          newEvent.id = TBX_MB_EVENT_ID_STOP_POLLING;
 8003528:	2301      	movs	r3, #1
 800352a:	733b      	strb	r3, [r7, #12]
          TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 800352c:	f107 030c 	add.w	r3, r7, #12
 8003530:	2100      	movs	r1, #0
 8003532:	4618      	mov	r0, r3
 8003534:	f001 fc8a 	bl	8004e4c <TbxMbOsalEventPost>
          TbxMbOsalSemGive(tpCtx->initStateExitSem, TBX_FALSE);
 8003538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f001 fd4d 	bl	8004fe0 <TbxMbOsalSemGive>
      break;
 8003546:	e007      	b.n	8003558 <TbxMbRtuPoll+0x20c>
    }
  }
 8003548:	bf00      	nop
 800354a:	e006      	b.n	800355a <TbxMbRtuPoll+0x20e>
      break;
 800354c:	bf00      	nop
 800354e:	e004      	b.n	800355a <TbxMbRtuPoll+0x20e>
      break;
 8003550:	bf00      	nop
 8003552:	e002      	b.n	800355a <TbxMbRtuPoll+0x20e>
      break;
 8003554:	bf00      	nop
 8003556:	e000      	b.n	800355a <TbxMbRtuPoll+0x20e>
      break;
 8003558:	bf00      	nop
} /*** end of TbxMbRtuPoll ***/
 800355a:	bf00      	nop
 800355c:	3740      	adds	r7, #64	; 0x40
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	08005348 	.word	0x08005348

08003568 <TbxMbRtuTransmit>:
** \param     transport Handle to RTU transport layer object.
** \return    TBX_OK if successful, TBX_ERROR otherwise. 
**
****************************************************************************************/
static uint8_t TbxMbRtuTransmit(tTbxMbTp transport)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint8_t result = TBX_ERROR;
 8003570:	2300      	movs	r3, #0
 8003572:	77fb      	strb	r3, [r7, #31]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d104      	bne.n	8003584 <TbxMbRtuTransmit+0x1c>
 800357a:	f240 11e5 	movw	r1, #485	; 0x1e5
 800357e:	4860      	ldr	r0, [pc, #384]	; (8003700 <TbxMbRtuTransmit+0x198>)
 8003580:	f7fe feba 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80b4 	beq.w	80036f4 <TbxMbRtuTransmit+0x18c>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	61bb      	str	r3, [r7, #24]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	7b1b      	ldrb	r3, [r3, #12]
 8003594:	2b54      	cmp	r3, #84	; 0x54
 8003596:	d004      	beq.n	80035a2 <TbxMbRtuTransmit+0x3a>
 8003598:	f240 11ed 	movw	r1, #493	; 0x1ed
 800359c:	4858      	ldr	r0, [pc, #352]	; (8003700 <TbxMbRtuTransmit+0x198>)
 800359e:	f7fe feab 	bl	80022f8 <TbxAssertTrigger>
    /* Are we requested to transmit an exception response? */
    TbxCriticalSectionEnter();
 80035a2:	f7fe febf 	bl	8002324 <TbxCriticalSectionEnter>
    uint8_t codeCopy = tpCtx->txPacket.pdu.code;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	7d9b      	ldrb	r3, [r3, #22]
 80035aa:	75fb      	strb	r3, [r7, #23]
    TbxCriticalSectionExit();
 80035ac:	f7fe fed4 	bl	8002358 <TbxCriticalSectionExit>
    if ((codeCopy & TBX_MB_FC_EXCEPTION_MASK) == TBX_MB_FC_EXCEPTION_MASK)
 80035b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	da07      	bge.n	80035c8 <TbxMbRtuTransmit+0x60>
    {
      /* Increment the total number of exception responses. */
      tpCtx->diagInfo.busExcpErrCnt++;
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f8b3 323c 	ldrh.w	r3, [r3, #572]	; 0x23c
 80035be:	3301      	adds	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
    }
    TbxCriticalSectionEnter();
 80035c8:	f7fe feac 	bl	8002324 <TbxCriticalSectionEnter>
    /* Still in the INIT state and configured as a client? */
    if ( (tpCtx->state == TBX_MB_RTU_STATE_INIT) && (tpCtx->isClient == TBX_TRUE) )
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d121      	bne.n	800361a <TbxMbRtuTransmit+0xb2>
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d11c      	bne.n	800361a <TbxMbRtuTransmit+0xb2>
       * The largest ADU to receive is 256 bytes. Adding the t3_5 end-of-frame time, 
       * means the longest time to wait for a transition to the IDLE state is:
       * 256 + 3.5 = 259.5 characters. This is ceil(259.5/3.5) = 75 times the t3_5
       * timer interval. Use this to calculate the timeout in ticks of the RTU timer.
       */
      uint16_t waitTimeoutTicks = tpCtx->t3_5Ticks * 75U;
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 80035e6:	461a      	mov	r2, r3
 80035e8:	0092      	lsls	r2, r2, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	0112      	lsls	r2, r2, #4
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	82bb      	strh	r3, [r7, #20]
      /* Convert it to milliseconds. Knowing that the RTU timer always runs at 20 kHz,
       * divide by 20. Just make sure to do integer roundup (A + (B-1)) / B.
       */
      uint16_t waitTimeoutMs = (waitTimeoutTicks + 19U) / 20U;
 80035f4:	8abb      	ldrh	r3, [r7, #20]
 80035f6:	3313      	adds	r3, #19
 80035f8:	4a42      	ldr	r2, [pc, #264]	; (8003704 <TbxMbRtuTransmit+0x19c>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	827b      	strh	r3, [r7, #18]
       * done later on in this function, so that error situation is already handled.
       * Make sure to briefly leave the critical section for calling TbxMbOsalSemTake().
       * With an RTOS this could lead to a context switch for which interrupts need to
       * be enabled.
       */
      TbxCriticalSectionExit();
 8003602:	f7fe fea9 	bl	8002358 <TbxCriticalSectionExit>
      (void)TbxMbOsalSemTake(tpCtx->initStateExitSem, waitTimeoutMs);
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800360c:	8a7a      	ldrh	r2, [r7, #18]
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f001 fd0f 	bl	8005034 <TbxMbOsalSemTake>
      TbxCriticalSectionEnter();
 8003616:	f7fe fe85 	bl	8002324 <TbxCriticalSectionEnter>
    }
    /* New transmissions are only possible from the IDLE state. */
    uint8_t okayToTransmit = TBX_FALSE;
 800361a:	2300      	movs	r3, #0
 800361c:	77bb      	strb	r3, [r7, #30]
    if (tpCtx->state == TBX_MB_RTU_STATE_IDLE)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d112      	bne.n	800364e <TbxMbRtuTransmit+0xe6>
      /* Should a response actually be transmitted? If we are a server, then upon
       * reception packet validation, txPacket.node was already set to 
       * TBX_MB_TP_NODE_ADDR_BROADCAST for us, in case of a broadcast request, which
       * does not require a response.
       */
      if ( (tpCtx->isClient == TBX_FALSE) && 
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <TbxMbRtuTransmit+0xda>
           (tpCtx->txPacket.node == TBX_MB_TP_NODE_ADDR_BROADCAST) )
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
      if ( (tpCtx->isClient == TBX_FALSE) && 
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <TbxMbRtuTransmit+0xda>
      {
        /* To bypass the actual response transmission, simply update the result to
         * indicate success and keep the okayToTransmit set to its default TBX_FALSE.
         */
        result = TBX_OK;
 800363c:	2301      	movs	r3, #1
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e005      	b.n	800364e <TbxMbRtuTransmit+0xe6>
      }
      /* Okay to transmit the response. */
      else
      {
        okayToTransmit = TBX_TRUE;
 8003642:	2301      	movs	r3, #1
 8003644:	77bb      	strb	r3, [r7, #30]
        /* Transition to the TRANSMISSION state to lock access to the txPacket for the
         * duration of the transmission. Note that the unlock happens once the state 
         * transitions back to IDLE. This happens 3.5 character times after the 
         * completion of the transmission.
         */
        tpCtx->state = TBX_MB_RTU_STATE_TRANSMISSION;
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
      }
    }
    TbxCriticalSectionExit();
 800364e:	f7fe fe83 	bl	8002358 <TbxCriticalSectionExit>
    /* Only continue if no other packet transmission is already in progress. */
    if (okayToTransmit == TBX_TRUE)
 8003652:	7fbb      	ldrb	r3, [r7, #30]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d142      	bne.n	80036de <TbxMbRtuTransmit+0x176>
       * - Node address (1 byte)
       * - Function code (1 byte)
       * - Packet data (dataLen bytes)
       * - CRC16 (2 bytes)
       */
      uint8_t * aduPtr = &tpCtx->txPacket.head[TBX_MB_TP_ADU_HEAD_LEN_MAX-1U];
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	3315      	adds	r3, #21
 800365c:	60fb      	str	r3, [r7, #12]
      uint16_t  aduLen = tpCtx->txPacket.dataLen + 4U;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8003664:	b29b      	uxth	r3, r3
 8003666:	3304      	adds	r3, #4
 8003668:	817b      	strh	r3, [r7, #10]
       * PDU. For client->server transfers the address field is the servers's node
       * address (unicast) or 0 (broadcast) and the client channel will have stored it in
       * the txPacket.node element. For server-client transfers it always the servers's
       * node address as stored when creating the RTU transport layer context.
       */
      aduPtr[0] = (tpCtx->isClient == TBX_TRUE) ? tpCtx->txPacket.node : tpCtx->nodeAddr;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
 8003670:	2b01      	cmp	r3, #1
 8003672:	d103      	bne.n	800367c <TbxMbRtuTransmit+0x114>
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800367a:	e001      	b.n	8003680 <TbxMbRtuTransmit+0x118>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	7b5b      	ldrb	r3, [r3, #13]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	7013      	strb	r3, [r2, #0]
      /* Populate the ADU tail. For RTU it is the CRC16 right after the PDU's data. */
      uint16_t adu_crc = TbxMbRtuCalculatCrc(aduPtr, aduLen - 2U);
 8003684:	897b      	ldrh	r3, [r7, #10]
 8003686:	3b02      	subs	r3, #2
 8003688:	b29b      	uxth	r3, r3
 800368a:	4619      	mov	r1, r3
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fa93 	bl	8003bb8 <TbxMbRtuCalculatCrc>
 8003692:	4603      	mov	r3, r0
 8003694:	813b      	strh	r3, [r7, #8]
      aduPtr[aduLen - 2U] = (uint8_t)adu_crc;                         /* CRC16 low.  */
 8003696:	897b      	ldrh	r3, [r7, #10]
 8003698:	3b02      	subs	r3, #2
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	893a      	ldrh	r2, [r7, #8]
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]
      aduPtr[aduLen - 1U] = (uint8_t)(adu_crc >> 8U);                 /* CRC16 high. */
 80036a4:	893b      	ldrh	r3, [r7, #8]
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	b299      	uxth	r1, r3
 80036aa:	897b      	ldrh	r3, [r7, #10]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4413      	add	r3, r2
 80036b2:	b2ca      	uxtb	r2, r1
 80036b4:	701a      	strb	r2, [r3, #0]
      /* Pass ADU transmit request on to the UART module. */
      result = TbxMbUartTransmit(tpCtx->port, aduPtr, aduLen);
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	7b9b      	ldrb	r3, [r3, #14]
 80036ba:	897a      	ldrh	r2, [r7, #10]
 80036bc:	68f9      	ldr	r1, [r7, #12]
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 fd80 	bl	80051c4 <TbxMbUartTransmit>
 80036c4:	4603      	mov	r3, r0
 80036c6:	77fb      	strb	r3, [r7, #31]
      /* Transition back to the IDLE state, because the transmission could not be
       * started. The unlocks access to txPacket for a possible future transmission.
       */
      if (result != TBX_OK)
 80036c8:	7ffb      	ldrb	r3, [r7, #31]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d007      	beq.n	80036de <TbxMbRtuTransmit+0x176>
      {
        TbxCriticalSectionEnter();
 80036ce:	f7fe fe29 	bl	8002324 <TbxCriticalSectionEnter>
        tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
        TbxCriticalSectionExit();
 80036da:	f7fe fe3d 	bl	8002358 <TbxCriticalSectionExit>
      }
    }
    /* Problem detected that prevented the response from being sent? */
    if (result == TBX_ERROR)
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d107      	bne.n	80036f4 <TbxMbRtuTransmit+0x18c>
    {
      /* Increment the total number of not sent responses. */
      tpCtx->diagInfo.srvNoRespCnt++;
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 80036ea:	3301      	adds	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
    }
  }
  /* Give the result back to the caller. */
  return result;
 80036f4:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of TbxMbRtuTransmit ***/
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	08005348 	.word	0x08005348
 8003704:	cccccccd 	.word	0xcccccccd

08003708 <TbxMbRtuReceptionDone>:
**            context.
** \param     transport Handle to RTU transport layer object.
**
****************************************************************************************/
static void TbxMbRtuReceptionDone(tTbxMbTp transport)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <TbxMbRtuReceptionDone+0x18>
 8003716:	f240 2173 	movw	r1, #627	; 0x273
 800371a:	4818      	ldr	r0, [pc, #96]	; (800377c <TbxMbRtuReceptionDone+0x74>)
 800371c:	f7fe fdec 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d025      	beq.n	8003772 <TbxMbRtuReceptionDone+0x6a>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	60fb      	str	r3, [r7, #12]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	7b1b      	ldrb	r3, [r3, #12]
 800372e:	2b54      	cmp	r3, #84	; 0x54
 8003730:	d004      	beq.n	800373c <TbxMbRtuReceptionDone+0x34>
 8003732:	f240 217b 	movw	r1, #635	; 0x27b
 8003736:	4811      	ldr	r0, [pc, #68]	; (800377c <TbxMbRtuReceptionDone+0x74>)
 8003738:	f7fe fdde 	bl	80022f8 <TbxAssertTrigger>
    /* This function should only be called in the VALIDATION state. Verify this. */
    TbxCriticalSectionEnter();
 800373c:	f7fe fdf2 	bl	8002324 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003746:	72fb      	strb	r3, [r7, #11]
    TbxCriticalSectionExit();
 8003748:	f7fe fe06 	bl	8002358 <TbxCriticalSectionExit>
    TBX_ASSERT(currentState == TBX_MB_RTU_STATE_VALIDATION);
 800374c:	7afb      	ldrb	r3, [r7, #11]
 800374e:	2b04      	cmp	r3, #4
 8003750:	d004      	beq.n	800375c <TbxMbRtuReceptionDone+0x54>
 8003752:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003756:	4809      	ldr	r0, [pc, #36]	; (800377c <TbxMbRtuReceptionDone+0x74>)
 8003758:	f7fe fdce 	bl	80022f8 <TbxAssertTrigger>
    /* Only continue in the VALIDATION state. Note that in the VALIDATION state, the data
     * reception path is locked until a transition back to IDLE state is made, which is
     * handled by this function.
     */
    if (currentState == TBX_MB_RTU_STATE_VALIDATION)
 800375c:	7afb      	ldrb	r3, [r7, #11]
 800375e:	2b04      	cmp	r3, #4
 8003760:	d107      	bne.n	8003772 <TbxMbRtuReceptionDone+0x6a>
    {
      /* Transistion back to the IDLE state to unlock the data reception path, allowing
       * the reception of new packets.
       */
      TbxCriticalSectionEnter();
 8003762:	f7fe fddf 	bl	8002324 <TbxCriticalSectionEnter>
      tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
      TbxCriticalSectionExit();
 800376e:	f7fe fdf3 	bl	8002358 <TbxCriticalSectionExit>
    }
  }
} /*** end of TbxMbRtuReceptionDone ****/
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	08005348 	.word	0x08005348

08003780 <TbxMbRtuGetRxPacket>:
** \param     transport Handle to RTU transport layer object.
** \return    Pointer to the packet or NULL if currently not accessible.
**
****************************************************************************************/
static tTbxMbTpPacket * TbxMbRtuGetRxPacket(tTbxMbTp transport)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  tTbxMbTpPacket * result = NULL;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <TbxMbRtuGetRxPacket+0x1c>
 8003792:	f240 219f 	movw	r1, #671	; 0x29f
 8003796:	4812      	ldr	r0, [pc, #72]	; (80037e0 <TbxMbRtuGetRxPacket+0x60>)
 8003798:	f7fe fdae 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d019      	beq.n	80037d6 <TbxMbRtuGetRxPacket+0x56>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	613b      	str	r3, [r7, #16]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	7b1b      	ldrb	r3, [r3, #12]
 80037aa:	2b54      	cmp	r3, #84	; 0x54
 80037ac:	d004      	beq.n	80037b8 <TbxMbRtuGetRxPacket+0x38>
 80037ae:	f240 21a7 	movw	r1, #679	; 0x2a7
 80037b2:	480b      	ldr	r0, [pc, #44]	; (80037e0 <TbxMbRtuGetRxPacket+0x60>)
 80037b4:	f7fe fda0 	bl	80022f8 <TbxAssertTrigger>
    /* Access to the reception packet by a channel is only allowed in the VALIDATION
     * state. In this state the reception path is locked until a transition back to IDLE
     * state is made. This happens once the channel called receptionDoneFcn().
     */
    TbxCriticalSectionEnter();
 80037b8:	f7fe fdb4 	bl	8002324 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 80037c2:	73fb      	strb	r3, [r7, #15]
    TbxCriticalSectionExit();
 80037c4:	f7fe fdc8 	bl	8002358 <TbxCriticalSectionExit>
    if (currentState == TBX_MB_RTU_STATE_VALIDATION)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d103      	bne.n	80037d6 <TbxMbRtuGetRxPacket+0x56>
    {
      /* Update the result. */
      result = &tpCtx->rxPacket;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80037d4:	617b      	str	r3, [r7, #20]
    }
  }
  /* Give the result back to the caller. */
  return result;
 80037d6:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMbRtuGetRxPacket ***/
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	08005348 	.word	0x08005348

080037e4 <TbxMbRtuGetTxPacket>:
** \param     transport Handle to RTU transport layer object.
** \return    Pointer to the packet or NULL if currently not accessible.
**
****************************************************************************************/
static tTbxMbTpPacket * TbxMbRtuGetTxPacket(tTbxMbTp transport)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  tTbxMbTpPacket * result = NULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <TbxMbRtuGetTxPacket+0x1c>
 80037f6:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 80037fa:	4812      	ldr	r0, [pc, #72]	; (8003844 <TbxMbRtuGetTxPacket+0x60>)
 80037fc:	f7fe fd7c 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d018      	beq.n	8003838 <TbxMbRtuGetTxPacket+0x54>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	613b      	str	r3, [r7, #16]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	7b1b      	ldrb	r3, [r3, #12]
 800380e:	2b54      	cmp	r3, #84	; 0x54
 8003810:	d004      	beq.n	800381c <TbxMbRtuGetTxPacket+0x38>
 8003812:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8003816:	480b      	ldr	r0, [pc, #44]	; (8003844 <TbxMbRtuGetTxPacket+0x60>)
 8003818:	f7fe fd6e 	bl	80022f8 <TbxAssertTrigger>
    /* Access to the transmission packet by a channel is only allowed outside the 
     * TRANSMISSION state. In this state the transmission path is locked until a
     * transition back to IDLE state is made. This happens once the transport layer
     * completed the packet transmission.
     */
    TbxCriticalSectionEnter();
 800381c:	f7fe fd82 	bl	8002324 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003826:	73fb      	strb	r3, [r7, #15]
    TbxCriticalSectionExit();
 8003828:	f7fe fd96 	bl	8002358 <TbxCriticalSectionExit>
    if (currentState != TBX_MB_RTU_STATE_TRANSMISSION)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d002      	beq.n	8003838 <TbxMbRtuGetTxPacket+0x54>
    {
      /* Update the result. */
      result = &tpCtx->txPacket;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	330f      	adds	r3, #15
 8003836:	617b      	str	r3, [r7, #20]
    }
  }
  /* Give the result back to the caller. */
  return result;
 8003838:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMbRtuGetTxPacket ***/
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	08005348 	.word	0x08005348

08003848 <TbxMbRtuValidate>:
** \param     transport Handle to RTU transport layer object.
** \return    TBX_OK if successful, TBX_ERROR otherwise. 
**
****************************************************************************************/
static uint8_t TbxMbRtuValidate(tTbxMbTp transport)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint8_t result = TBX_ERROR;
 8003850:	2300      	movs	r3, #0
 8003852:	77fb      	strb	r3, [r7, #31]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d104      	bne.n	8003864 <TbxMbRtuValidate+0x1c>
 800385a:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800385e:	4847      	ldr	r0, [pc, #284]	; (800397c <TbxMbRtuValidate+0x134>)
 8003860:	f7fe fd4a 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8083 	beq.w	8003972 <TbxMbRtuValidate+0x12a>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	61bb      	str	r3, [r7, #24]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	7b1b      	ldrb	r3, [r3, #12]
 8003874:	2b54      	cmp	r3, #84	; 0x54
 8003876:	d004      	beq.n	8003882 <TbxMbRtuValidate+0x3a>
 8003878:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 800387c:	483f      	ldr	r0, [pc, #252]	; (800397c <TbxMbRtuValidate+0x134>)
 800387e:	f7fe fd3b 	bl	80022f8 <TbxAssertTrigger>
    /* This function should only be called in the VALIDATION state. Verify this. */
    TbxCriticalSectionEnter();
 8003882:	f7fe fd4f 	bl	8002324 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 800388c:	75fb      	strb	r3, [r7, #23]
    TbxCriticalSectionExit();
 800388e:	f7fe fd63 	bl	8002358 <TbxCriticalSectionExit>
    TBX_ASSERT(currentState == TBX_MB_RTU_STATE_VALIDATION);
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d004      	beq.n	80038a2 <TbxMbRtuValidate+0x5a>
 8003898:	f240 21fd 	movw	r1, #765	; 0x2fd
 800389c:	4837      	ldr	r0, [pc, #220]	; (800397c <TbxMbRtuValidate+0x134>)
 800389e:	f7fe fd2b 	bl	80022f8 <TbxAssertTrigger>
    /* Only continue in the VALIDATION state. Note that in the VALIDATION state, the data
     * reception path is locked until a transition back to IDLE state is made.
     * Consequenty, there is no need for critical sections when accessing the .rxXyz
     * elements of the TP context. 
     */
    if (currentState == TBX_MB_RTU_STATE_VALIDATION)
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d164      	bne.n	8003972 <TbxMbRtuValidate+0x12a>
    {
      /* Increment the total number of received packets, regardless of addressing or
       * CRC.
       */
      tpCtx->diagInfo.busMsgCnt++;
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 80038ae:	3301      	adds	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
      /* The ADU for an RTU packet starts at one byte before the PDU, which is the last
       * byte of head[]. Get the pointer of where the ADU starts in the rxPacket.
       */
      uint8_t * aduPtr = &tpCtx->rxPacket.head[TBX_MB_TP_ADU_HEAD_LEN_MAX-1U];
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80038be:	613b      	str	r3, [r7, #16]
       * - Node address (1 byte)
       * - Function code (1 byte)
       * - Packet data (dataLen bytes)
       * - CRC16 (2 bytes)
       */
      uint8_t const * crcPtr = &aduPtr[2U + tpCtx->rxPacket.dataLen];
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 80038c6:	3302      	adds	r3, #2
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
      /* Read out the CRC16 stored in the ADU packet. */
      uint16_t packetCrc = crcPtr[0] | (uint16_t)(crcPtr[1] << 8U);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3301      	adds	r3, #1
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	b29b      	uxth	r3, r3
 80038e0:	4313      	orrs	r3, r2
 80038e2:	817b      	strh	r3, [r7, #10]
      /* Calculate the CRC16 based on the packet contents. It's calculated over the
       * entire ADU data, just excluding the last two byte with the CRC16.
       */
      uint16_t calcCrc = TbxMbRtuCalculatCrc(aduPtr, tpCtx->rxPacket.dataLen + 2U);
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3302      	adds	r3, #2
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	4619      	mov	r1, r3
 80038f2:	6938      	ldr	r0, [r7, #16]
 80038f4:	f000 f960 	bl	8003bb8 <TbxMbRtuCalculatCrc>
 80038f8:	4603      	mov	r3, r0
 80038fa:	813b      	strh	r3, [r7, #8]
      /* Are the two CRC16s a mismatch? */
      if (packetCrc != calcCrc)
 80038fc:	897a      	ldrh	r2, [r7, #10]
 80038fe:	893b      	ldrh	r3, [r7, #8]
 8003900:	429a      	cmp	r2, r3
 8003902:	d008      	beq.n	8003916 <TbxMbRtuValidate+0xce>
      {
        /* Increment the total number of received packets with an incorrect CRC. */
        tpCtx->diagInfo.busCommErrCnt++;
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 800390a:	3301      	adds	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
 8003914:	e02d      	b.n	8003972 <TbxMbRtuValidate+0x12a>
      else
      {
        /* Continue checking if the ADU is addressed to us. This check is different for a
         * server and a client. Start with the server case.
         */
        if (tpCtx->isClient == TBX_FALSE)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
 800391c:	2b00      	cmp	r3, #0
 800391e:	d11c      	bne.n	800395a <TbxMbRtuValidate+0x112>
        {
          /* Only process frames that are addressed to us (unicast or broadcast). */
          if ((tpCtx->rxPacket.node == tpCtx->nodeAddr) ||
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f893 2221 	ldrb.w	r2, [r3, #545]	; 0x221
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	7b5b      	ldrb	r3, [r3, #13]
 800392a:	429a      	cmp	r2, r3
 800392c:	d004      	beq.n	8003938 <TbxMbRtuValidate+0xf0>
              (tpCtx->rxPacket.node == TBX_MB_TP_NODE_ADDR_BROADCAST))
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
          if ((tpCtx->rxPacket.node == tpCtx->nodeAddr) ||
 8003934:	2b00      	cmp	r3, #0
 8003936:	d11c      	bne.n	8003972 <TbxMbRtuValidate+0x12a>
          {
            /* Increment the total number of received packets with a correct CRC, that
             * were addressed to us. Either via unicast of broadcast.
             */
            tpCtx->diagInfo.srvMsgCnt++;
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f8b3 323e 	ldrh.w	r3, [r3, #574]	; 0x23e
 800393e:	3301      	adds	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f8a3 223e 	strh.w	r2, [r3, #574]	; 0x23e
             * transmission to decide if the actual sending of the response should be
             * suppressed, which is the case for TBX_MB_TP_NODE_ADDR_BROADCAST. No need
             * for a critical section, because we are guaranteed not in the IDLE or
             * TRANSMISSION states.
             */
            tpCtx->txPacket.node = tpCtx->rxPacket.node;
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f893 2221 	ldrb.w	r2, [r3, #545]	; 0x221
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
            /* Packet is valid. Update the result accordingly. */
            result = TBX_OK;
 8003954:	2301      	movs	r3, #1
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e00b      	b.n	8003972 <TbxMbRtuValidate+0x12a>
        }
        /* Linked to a client channel. */
        else
        {
          /* Only process frames that are send from a valid server. */
          if ( (tpCtx->rxPacket.node >= TBX_MB_TP_NODE_ADDR_MIN) ||
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 8003960:	2b00      	cmp	r3, #0
 8003962:	d104      	bne.n	800396e <TbxMbRtuValidate+0x126>
               (tpCtx->rxPacket.node <= TBX_MB_TP_NODE_ADDR_MAX) )
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
          if ( (tpCtx->rxPacket.node >= TBX_MB_TP_NODE_ADDR_MIN) ||
 800396a:	2bf7      	cmp	r3, #247	; 0xf7
 800396c:	d801      	bhi.n	8003972 <TbxMbRtuValidate+0x12a>
          {
            /* Packet is valid. Update the result accordingly. */
            result = TBX_OK;
 800396e:	2301      	movs	r3, #1
 8003970:	77fb      	strb	r3, [r7, #31]
        }
      }
    }
  }
  /* Give the result back to the caller. */
  return result;
 8003972:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of TbxMbRtuValidate ***/
 8003974:	4618      	mov	r0, r3
 8003976:	3720      	adds	r7, #32
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	08005348 	.word	0x08005348

08003980 <TbxMbRtuTransmitComplete>:
**            access to the shared resource.
** \param     port The serial port that the transfer completed on.
**
****************************************************************************************/
static void TbxMbRtuTransmitComplete(tTbxMbUartPort port)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
  /* Verify parameters. */
  TBX_ASSERT(port < TBX_MB_UART_NUM_PORT);
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	2b07      	cmp	r3, #7
 800398e:	d904      	bls.n	800399a <TbxMbRtuTransmitComplete+0x1a>
 8003990:	f240 315e 	movw	r1, #862	; 0x35e
 8003994:	4820      	ldr	r0, [pc, #128]	; (8003a18 <TbxMbRtuTransmitComplete+0x98>)
 8003996:	f7fe fcaf 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (port < TBX_MB_UART_NUM_PORT)
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	2b07      	cmp	r3, #7
 800399e:	d837      	bhi.n	8003a10 <TbxMbRtuTransmitComplete+0x90>
  {
    /* Obtain transport layer context linked to UART port of this event. */
    tTbxMbTpCtx volatile * tpCtx = tbxMbRtuCtx[port];
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	4a1e      	ldr	r2, [pc, #120]	; (8003a1c <TbxMbRtuTransmitComplete+0x9c>)
 80039a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a8:	617b      	str	r3, [r7, #20]
    /* Verify transport layer context. */
    TBX_ASSERT(tpCtx != NULL)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <TbxMbRtuTransmitComplete+0x3a>
 80039b0:	f240 3166 	movw	r1, #870	; 0x366
 80039b4:	4818      	ldr	r0, [pc, #96]	; (8003a18 <TbxMbRtuTransmitComplete+0x98>)
 80039b6:	f7fe fc9f 	bl	80022f8 <TbxAssertTrigger>
    /* Only continue with a valid transport layer context. Note that there is no need
     * to also check the transport layer type, because only RTU types are stored in the
     * tbxMbRtuCtx[] array.
     */
    if (tpCtx != NULL)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d027      	beq.n	8003a10 <TbxMbRtuTransmitComplete+0x90>
    {
      TbxCriticalSectionEnter();
 80039c0:	f7fe fcb0 	bl	8002324 <TbxCriticalSectionEnter>
      uint8_t stateCopy = tpCtx->state;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 80039ca:	74fb      	strb	r3, [r7, #19]
      TbxCriticalSectionExit();
 80039cc:	f7fe fcc4 	bl	8002358 <TbxCriticalSectionExit>
      /* This function should only be called when in the TRANSMISSION state. Verify
       * this. 
       */
      TBX_ASSERT(stateCopy == TBX_MB_RTU_STATE_TRANSMISSION);
 80039d0:	7cfb      	ldrb	r3, [r7, #19]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d004      	beq.n	80039e0 <TbxMbRtuTransmitComplete+0x60>
 80039d6:	f240 3173 	movw	r1, #883	; 0x373
 80039da:	480f      	ldr	r0, [pc, #60]	; (8003a18 <TbxMbRtuTransmitComplete+0x98>)
 80039dc:	f7fe fc8c 	bl	80022f8 <TbxAssertTrigger>
      /* Only continue in the TRANSMISSION state. */
      if (stateCopy == TBX_MB_RTU_STATE_TRANSMISSION)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d114      	bne.n	8003a10 <TbxMbRtuTransmitComplete+0x90>
      {
        /* Store the time that the transmission completed. */
        TbxCriticalSectionEnter();
 80039e6:	f7fe fc9d 	bl	8002324 <TbxCriticalSectionEnter>
        tpCtx->txDoneTime = TbxMbPortTimerCount();
 80039ea:	f7ff fb99 	bl	8003120 <TbxMbPortTimerCount>
 80039ee:	4603      	mov	r3, r0
 80039f0:	461a      	mov	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
        TbxCriticalSectionExit();
 80039f8:	f7fe fcae 	bl	8002358 <TbxCriticalSectionExit>
        /* Instruct the event task to start calling our polling function. Needed to
         * detect the 3.5 character timeout, after which we can transition back to the
         * IDLE state.
         */
        tTbxMbEvent newEvent;
        newEvent.context = (void *)tpCtx;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	60fb      	str	r3, [r7, #12]
        newEvent.id = TBX_MB_EVENT_ID_START_POLLING;
 8003a00:	2300      	movs	r3, #0
 8003a02:	723b      	strb	r3, [r7, #8]
        TbxMbOsalEventPost(&newEvent, TBX_TRUE);
 8003a04:	f107 0308 	add.w	r3, r7, #8
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 fa1e 	bl	8004e4c <TbxMbOsalEventPost>
      }
    }
  }
} /*** end of TbxMbRtuTransmitComplete ***/
 8003a10:	bf00      	nop
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	08005348 	.word	0x08005348
 8003a1c:	20000920 	.word	0x20000920

08003a20 <TbxMbRtuDataReceived>:
**
****************************************************************************************/
static void TbxMbRtuDataReceived(tTbxMbUartPort         port, 
                                 uint8_t        const * data, 
                                 uint8_t                len)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	71bb      	strb	r3, [r7, #6]
  /* Verify parameters. */
  TBX_ASSERT((port < TBX_MB_UART_NUM_PORT) && 
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	2b07      	cmp	r3, #7
 8003a34:	d805      	bhi.n	8003a42 <TbxMbRtuDataReceived+0x22>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <TbxMbRtuDataReceived+0x22>
 8003a3c:	79bb      	ldrb	r3, [r7, #6]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d104      	bne.n	8003a4c <TbxMbRtuDataReceived+0x2c>
 8003a42:	f240 319d 	movw	r1, #925	; 0x39d
 8003a46:	485a      	ldr	r0, [pc, #360]	; (8003bb0 <TbxMbRtuDataReceived+0x190>)
 8003a48:	f7fe fc56 	bl	80022f8 <TbxAssertTrigger>
             (data != NULL) &&
             (len > 0U));

  /* Only continue with valid parameters. */
  if ((port < TBX_MB_UART_NUM_PORT) && 
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	2b07      	cmp	r3, #7
 8003a50:	f200 80a9 	bhi.w	8003ba6 <TbxMbRtuDataReceived+0x186>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80a5 	beq.w	8003ba6 <TbxMbRtuDataReceived+0x186>
      (data != NULL) &&
 8003a5c:	79bb      	ldrb	r3, [r7, #6]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80a1 	beq.w	8003ba6 <TbxMbRtuDataReceived+0x186>
      (len > 0U))
  {
    /* Obtain transport layer context linked to UART port of this event. */
    tTbxMbTpCtx volatile * tpCtx = tbxMbRtuCtx[port];
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	4a53      	ldr	r2, [pc, #332]	; (8003bb4 <TbxMbRtuDataReceived+0x194>)
 8003a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6c:	623b      	str	r3, [r7, #32]
    /* Verify transport layer context. */
    TBX_ASSERT(tpCtx != NULL)
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d104      	bne.n	8003a7e <TbxMbRtuDataReceived+0x5e>
 8003a74:	f240 31a9 	movw	r1, #937	; 0x3a9
 8003a78:	484d      	ldr	r0, [pc, #308]	; (8003bb0 <TbxMbRtuDataReceived+0x190>)
 8003a7a:	f7fe fc3d 	bl	80022f8 <TbxAssertTrigger>
    /* Only continue with a valid transport layer context. Note that there is no need
     * to also check the transport layer type, because only RTU types are stored in the
     * tbxMbRtuCtx[] array.
     */
    if (tpCtx != NULL)
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8090 	beq.w	8003ba6 <TbxMbRtuDataReceived+0x186>
    {
      /* Get current time in RTU timer ticks. */
      uint16_t currentTime = TbxMbPortTimerCount();
 8003a86:	f7ff fb4b 	bl	8003120 <TbxMbPortTimerCount>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	83fb      	strh	r3, [r7, #30]
      TbxCriticalSectionEnter();
 8003a8e:	f7fe fc49 	bl	8002324 <TbxCriticalSectionEnter>
       * which is needed later on to do the 1.5 character timeout detection.
       */
      #if (TBX_MB_RTU_T1_5_TIMEOUT_ENABLE > 0U)        
      uint16_t oldRxTime = tpCtx->rxTime;
      #endif
      tpCtx->rxTime = currentTime;
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	8bfa      	ldrh	r2, [r7, #30]
 8003a96:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
      /* The ADU for an RTU packet starts at one byte before the PDU, which is the last
       * byte of head[]. Get the pointer of where the ADU starts in the rxPacket.
       */
      uint8_t volatile * aduPtr = &tpCtx->rxPacket.head[TBX_MB_TP_ADU_HEAD_LEN_MAX-1U];
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003aa0:	61bb      	str	r3, [r7, #24]
      /* Get copy of the state so the we can exit the critical section. */
      uint8_t stateCopy = tpCtx->state;
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003aa8:	75fb      	strb	r3, [r7, #23]
      TbxCriticalSectionExit();
 8003aaa:	f7fe fc55 	bl	8002358 <TbxCriticalSectionExit>
      /* Are we in the RECEPTION state? Make sure to check this one first, as it will 
       * happen the most.
       */
      if (stateCopy == TBX_MB_RTU_STATE_RECEPTION)
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d142      	bne.n	8003b3a <TbxMbRtuDataReceived+0x11a>
      {
        TbxCriticalSectionEnter();
 8003ab4:	f7fe fc36 	bl	8002324 <TbxCriticalSectionEnter>
         * - Node address (1 byte)
         * - Function code (1 byte)
         * - Packet data (max 252 bytes)
         * - CRC16 (2 bytes)
         */
        if ((tpCtx->rxAduWrIdx + len) > 256U)
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	79bb      	ldrb	r3, [r7, #6]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aca:	d903      	bls.n	8003ad4 <TbxMbRtuDataReceived+0xb4>
        {
          /* Flag frame as not okay (NOK). */
          tpCtx->rxAduOkay = TBX_FALSE;
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
        /* Only process the newly received data if the ADU reception frame is still
         * flagged as OK. If not, then eventually a 3.5 character idle time will be
         * detected to mark the end of the packet/frame. At which point its data will be
         * discarded.
         */
        if (tpCtx->rxAduOkay == TBX_TRUE)
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d129      	bne.n	8003b34 <TbxMbRtuDataReceived+0x114>
        {
          /* Append the received data to the ADU. */
          for (uint8_t idx = 0U; idx < len; idx++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ae6:	e015      	b.n	8003b14 <TbxMbRtuDataReceived+0xf4>
          {
            aduPtr[tpCtx->rxAduWrIdx + idx] = data[idx];
 8003ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	441a      	add	r2, r3
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	4619      	mov	r1, r3
 8003afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003afe:	440b      	add	r3, r1
 8003b00:	4619      	mov	r1, r3
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	440b      	add	r3, r1
 8003b06:	7812      	ldrb	r2, [r2, #0]
 8003b08:	701a      	strb	r2, [r3, #0]
          for (uint8_t idx = 0U; idx < len; idx++)
 8003b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b0e:	3301      	adds	r3, #1
 8003b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b14:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b18:	79bb      	ldrb	r3, [r7, #6]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d3e4      	bcc.n	8003ae8 <TbxMbRtuDataReceived+0xc8>
          }
          /* Update the write indexer into the ADU reception packet. */
          tpCtx->rxAduWrIdx += len;
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	79bb      	ldrb	r3, [r7, #6]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
        }
        TbxCriticalSectionExit();
 8003b34:	f7fe fc10 	bl	8002358 <TbxCriticalSectionExit>
      {
        /* Nothing left to do, but MISRA requires this terminating else statement. */
      }
    }
  }
} /*** end of TbxMbRtuDataReceived ***/
 8003b38:	e035      	b.n	8003ba6 <TbxMbRtuDataReceived+0x186>
      else if (stateCopy == TBX_MB_RTU_STATE_IDLE)
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d132      	bne.n	8003ba6 <TbxMbRtuDataReceived+0x186>
        TbxCriticalSectionEnter();
 8003b40:	f7fe fbf0 	bl	8002324 <TbxCriticalSectionEnter>
        tpCtx->state = TBX_MB_RTU_STATE_RECEPTION;
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	2203      	movs	r2, #3
 8003b48:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
        for (uint8_t idx = 0U; idx < len; idx++)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003b52:	e00e      	b.n	8003b72 <TbxMbRtuDataReceived+0x152>
          aduPtr[idx] = data[idx];
 8003b54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	441a      	add	r2, r3
 8003b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b60:	69b9      	ldr	r1, [r7, #24]
 8003b62:	440b      	add	r3, r1
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	701a      	strb	r2, [r3, #0]
        for (uint8_t idx = 0U; idx < len; idx++)
 8003b68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003b72:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003b76:	79bb      	ldrb	r3, [r7, #6]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d3eb      	bcc.n	8003b54 <TbxMbRtuDataReceived+0x134>
        tpCtx->rxAduWrIdx = len;
 8003b7c:	79bb      	ldrb	r3, [r7, #6]
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
        tpCtx->rxAduOkay = TBX_TRUE;
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
        TbxCriticalSectionExit();
 8003b8e:	f7fe fbe3 	bl	8002358 <TbxCriticalSectionExit>
        newEvent.context = (void *)tpCtx;
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	613b      	str	r3, [r7, #16]
        newEvent.id = TBX_MB_EVENT_ID_START_POLLING;
 8003b96:	2300      	movs	r3, #0
 8003b98:	733b      	strb	r3, [r7, #12]
        TbxMbOsalEventPost(&newEvent, TBX_TRUE);
 8003b9a:	f107 030c 	add.w	r3, r7, #12
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 f953 	bl	8004e4c <TbxMbOsalEventPost>
} /*** end of TbxMbRtuDataReceived ***/
 8003ba6:	bf00      	nop
 8003ba8:	3728      	adds	r7, #40	; 0x28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	08005348 	.word	0x08005348
 8003bb4:	20000920 	.word	0x20000920

08003bb8 <TbxMbRtuCalculatCrc>:
** \return    The calculated CRC16 checksum value.
**
****************************************************************************************/
static uint16_t TbxMbRtuCalculatCrc(uint8_t  const * data, 
                                    uint16_t         len)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
    0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
    0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
  };
  uint16_t result = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	817b      	strh	r3, [r7, #10]
  uint16_t crc = 0xFFFFU;
 8003bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bcc:	81fb      	strh	r3, [r7, #14]

  /* Loop over all the data bytes. */
  for (uint16_t byteIdx = 0; byteIdx < len; byteIdx++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	81bb      	strh	r3, [r7, #12]
 8003bd2:	e014      	b.n	8003bfe <TbxMbRtuCalculatCrc+0x46>
  {
    /* Calculate the index into the CRC lookup table. */
    uint8_t tableIdx = data[byteIdx] ^ crc;
 8003bd4:	89bb      	ldrh	r3, [r7, #12]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	781a      	ldrb	r2, [r3, #0]
 8003bdc:	89fb      	ldrh	r3, [r7, #14]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4053      	eors	r3, r2
 8003be2:	727b      	strb	r3, [r7, #9]
    crc >>= 8;
 8003be4:	89fb      	ldrh	r3, [r7, #14]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	81fb      	strh	r3, [r7, #14]
    crc ^= tbxMbRtuCrcTable[tableIdx];
 8003bea:	7a7b      	ldrb	r3, [r7, #9]
 8003bec:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <TbxMbRtuCalculatCrc+0x60>)
 8003bee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003bf2:	89fb      	ldrh	r3, [r7, #14]
 8003bf4:	4053      	eors	r3, r2
 8003bf6:	81fb      	strh	r3, [r7, #14]
  for (uint16_t byteIdx = 0; byteIdx < len; byteIdx++)
 8003bf8:	89bb      	ldrh	r3, [r7, #12]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	81bb      	strh	r3, [r7, #12]
 8003bfe:	89ba      	ldrh	r2, [r7, #12]
 8003c00:	887b      	ldrh	r3, [r7, #2]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3e6      	bcc.n	8003bd4 <TbxMbRtuCalculatCrc+0x1c>
  }
  /* Update the result. */
  result = crc;
 8003c06:	89fb      	ldrh	r3, [r7, #14]
 8003c08:	817b      	strh	r3, [r7, #10]
  /* Give the result back to the caller. */
  return result;
 8003c0a:	897b      	ldrh	r3, [r7, #10]
} /*** end of TbxMbRtuCalculatCrc ***/
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	08005418 	.word	0x08005418

08003c1c <TbxMbCommonExtractUInt16BE>:
**            in the big endian format.
** \return    The 16-bit unsigned integer value.
**
****************************************************************************************/
static inline uint16_t TbxMbCommonExtractUInt16BE(uint8_t const * data)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  return ((uint16_t)data[0] << 8U) | data[1];
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	b21a      	sxth	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	b21b      	sxth	r3, r3
 8003c34:	4313      	orrs	r3, r2
 8003c36:	b21b      	sxth	r3, r3
 8003c38:	b29b      	uxth	r3, r3
} /*** end of TbxMbCommonExtractUInt16BE ***/
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <TbxMbCommonStoreUInt16BE>:
**            format.
**
****************************************************************************************/
static inline void TbxMbCommonStoreUInt16BE(uint16_t   value,
                                            uint8_t  * data)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	6039      	str	r1, [r7, #0]
 8003c50:	80fb      	strh	r3, [r7, #6]
  data[0] = (uint8_t)(value >> 8U);
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	701a      	strb	r2, [r3, #0]
  data[1] = (uint8_t)value;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	88fa      	ldrh	r2, [r7, #6]
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]
} /*** end of TbxMbCommonExtractUInt16BE ***/
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <TbxMbServerCreate>:
** \return    Handle to the newly created Modbus server channel object if successful,
**            NULL otherwise.
**
****************************************************************************************/
tTbxMbServer TbxMbServerCreate(tTbxMbTp transport)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  tTbxMbServer result = NULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d103      	bne.n	8003c8e <TbxMbServerCreate+0x1a>
 8003c86:	2169      	movs	r1, #105	; 0x69
 8003c88:	4839      	ldr	r0, [pc, #228]	; (8003d70 <TbxMbServerCreate+0xfc>)
 8003c8a:	f7fe fb35 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d067      	beq.n	8003d64 <TbxMbServerCreate+0xf0>
  {
    /* Allocate memory for the new channel context. */
    tTbxMbServerCtx * newServerCtx = TbxMemPoolAllocate(sizeof(tTbxMbServerCtx));
 8003c94:	2030      	movs	r0, #48	; 0x30
 8003c96:	f7fe fea3 	bl	80029e0 <TbxMemPoolAllocate>
 8003c9a:	6138      	str	r0, [r7, #16]
    /* Automatically increase the memory pool, if it was too small. */
    if (newServerCtx == NULL)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d107      	bne.n	8003cb2 <TbxMbServerCreate+0x3e>
    {
      /* No need to check the return value, because if it failed, the following
       * allocation fails too, which is verified later on.
       */
      (void)TbxMemPoolCreate(1U, sizeof(tTbxMbServerCtx));
 8003ca2:	2130      	movs	r1, #48	; 0x30
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	f7fe fdf9 	bl	800289c <TbxMemPoolCreate>
      newServerCtx = TbxMemPoolAllocate(sizeof(tTbxMbServerCtx));      
 8003caa:	2030      	movs	r0, #48	; 0x30
 8003cac:	f7fe fe98 	bl	80029e0 <TbxMemPoolAllocate>
 8003cb0:	6138      	str	r0, [r7, #16]
    }
    /* Verify memory allocation of the channel context. */
    TBX_ASSERT(newServerCtx != NULL);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d103      	bne.n	8003cc0 <TbxMbServerCreate+0x4c>
 8003cb8:	217a      	movs	r1, #122	; 0x7a
 8003cba:	482d      	ldr	r0, [pc, #180]	; (8003d70 <TbxMbServerCreate+0xfc>)
 8003cbc:	f7fe fb1c 	bl	80022f8 <TbxAssertTrigger>
    /* Only continue if the memory allocation succeeded. */
    if (newServerCtx != NULL)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d04e      	beq.n	8003d64 <TbxMbServerCreate+0xf0>
    {
      /* Convert the TP channel pointer to the context structure. */
      tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]
      /* Sanity check on the transport layer's interface function. That way there is 
       * no need to do it later on, making it more run-time efficient. Also check that
       * it's not already linked to another channel.
       */
      TBX_ASSERT((tpCtx->transmitFcn != NULL) && (tpCtx->receptionDoneFcn != NULL) &&
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d013      	beq.n	8003cfc <TbxMbServerCreate+0x88>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00e      	beq.n	8003cfc <TbxMbServerCreate+0x88>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d009      	beq.n	8003cfc <TbxMbServerCreate+0x88>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <TbxMbServerCreate+0x88>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <TbxMbServerCreate+0x90>
 8003cfc:	2184      	movs	r1, #132	; 0x84
 8003cfe:	481c      	ldr	r0, [pc, #112]	; (8003d70 <TbxMbServerCreate+0xfc>)
 8003d00:	f7fe fafa 	bl	80022f8 <TbxAssertTrigger>
                 (tpCtx->getRxPacketFcn != NULL) && (tpCtx->getTxPacketFcn != NULL) &&
                 (tpCtx->channelCtx == NULL));              
      /* Initialize the channel context. Start by crosslinking the transport layer. */
      newServerCtx->type = TBX_MB_SERVER_CONTEXT_TYPE;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2225      	movs	r2, #37	; 0x25
 8003d08:	731a      	strb	r2, [r3, #12]
      newServerCtx->instancePtr = NULL;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
      newServerCtx->pollFcn = NULL;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2200      	movs	r2, #0
 8003d14:	605a      	str	r2, [r3, #4]
      newServerCtx->processFcn = TbxMbServerProcessEvent;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4a16      	ldr	r2, [pc, #88]	; (8003d74 <TbxMbServerCreate+0x100>)
 8003d1a:	609a      	str	r2, [r3, #8]
      newServerCtx->readInputFcn = NULL;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	615a      	str	r2, [r3, #20]
      newServerCtx->readCoilFcn = NULL;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2200      	movs	r2, #0
 8003d26:	619a      	str	r2, [r3, #24]
      newServerCtx->writeCoilFcn = NULL;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	61da      	str	r2, [r3, #28]
      newServerCtx->readInputRegFcn = NULL;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2200      	movs	r2, #0
 8003d32:	621a      	str	r2, [r3, #32]
      newServerCtx->readHoldingRegFcn = NULL;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2200      	movs	r2, #0
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
      newServerCtx->writeHoldingRegFcn = NULL;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
      newServerCtx->customFunctionFcn = NULL;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2200      	movs	r2, #0
 8003d44:	62da      	str	r2, [r3, #44]	; 0x2c
      newServerCtx->tpCtx = tpCtx;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	611a      	str	r2, [r3, #16]
      newServerCtx->tpCtx->channelCtx = newServerCtx;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
      newServerCtx->tpCtx->isClient = TBX_FALSE;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 222d 	strb.w	r2, [r3, #557]	; 0x22d
      /* Update the result. */
      result = newServerCtx;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	617b      	str	r3, [r7, #20]
    }
  }
  /* Give the result back to the caller. */
  return result;
 8003d64:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMbServerCreate ****/
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	0800537c 	.word	0x0800537c
 8003d74:	08003d79 	.word	0x08003d79

08003d78 <TbxMbServerProcessEvent>:
** \param     event Pointer to the event to process. Note that the event->context points
**            to the handle of the Modbus server channel object.
**
****************************************************************************************/
static void TbxMbServerProcessEvent(tTbxMbEvent * event)
{
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b08b      	sub	sp, #44	; 0x2c
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT(event != NULL);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d104      	bne.n	8003d90 <TbxMbServerProcessEvent+0x18>
 8003d86:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003d8a:	488f      	ldr	r0, [pc, #572]	; (8003fc8 <TbxMbServerProcessEvent+0x250>)
 8003d8c:	f7fe fab4 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (event != NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 810f 	beq.w	8003fb6 <TbxMbServerProcessEvent+0x23e>
  {
    /* Sanity check the context. */
    TBX_ASSERT(event->context != NULL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <TbxMbServerProcessEvent+0x32>
 8003da0:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8003da4:	4888      	ldr	r0, [pc, #544]	; (8003fc8 <TbxMbServerProcessEvent+0x250>)
 8003da6:	f7fe faa7 	bl	80022f8 <TbxAssertTrigger>
    /* Convert the event context to the server channel context structure. */
    tTbxMbServerCtx * serverCtx = (tTbxMbServerCtx *)event->context;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	623b      	str	r3, [r7, #32]
    /* Make sure the context is valid. */
    TBX_ASSERT(serverCtx != NULL);
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d104      	bne.n	8003dc0 <TbxMbServerProcessEvent+0x48>
 8003db6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8003dba:	4883      	ldr	r0, [pc, #524]	; (8003fc8 <TbxMbServerProcessEvent+0x250>)
 8003dbc:	f7fe fa9c 	bl	80022f8 <TbxAssertTrigger>
    /* Only continue with a valid context. */
    if (serverCtx != NULL)
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80f7 	beq.w	8003fb6 <TbxMbServerProcessEvent+0x23e>
    {
      /* Sanity check on the context type. */
      TBX_ASSERT(serverCtx->type == TBX_MB_SERVER_CONTEXT_TYPE);
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	7b1b      	ldrb	r3, [r3, #12]
 8003dcc:	2b25      	cmp	r3, #37	; 0x25
 8003dce:	d004      	beq.n	8003dda <TbxMbServerProcessEvent+0x62>
 8003dd0:	f240 119f 	movw	r1, #415	; 0x19f
 8003dd4:	487c      	ldr	r0, [pc, #496]	; (8003fc8 <TbxMbServerProcessEvent+0x250>)
 8003dd6:	f7fe fa8f 	bl	80022f8 <TbxAssertTrigger>
      /* Filter on the event identifier. */
      switch (event->id)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d003      	beq.n	8003dea <TbxMbServerProcessEvent+0x72>
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	f000 80e9 	beq.w	8003fba <TbxMbServerProcessEvent+0x242>
 8003de8:	e0df      	b.n	8003faa <TbxMbServerProcessEvent+0x232>
      {
        case TBX_MB_EVENT_ID_PDU_RECEIVED:
        {
          uint8_t okayToSendResponse = TBX_FALSE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          /* Obtain read access to the newly received packet and write access to the
           * response packet. 
           */
          tTbxMbTpPacket * rxPacket = serverCtx->tpCtx->getRxPacketFcn(serverCtx->tpCtx);
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8003df8:	6a3a      	ldr	r2, [r7, #32]
 8003dfa:	6912      	ldr	r2, [r2, #16]
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4798      	blx	r3
 8003e00:	61f8      	str	r0, [r7, #28]
          tTbxMbTpPacket * txPacket = serverCtx->tpCtx->getTxPacketFcn(serverCtx->tpCtx);
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8003e0a:	6a3a      	ldr	r2, [r7, #32]
 8003e0c:	6912      	ldr	r2, [r2, #16]
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4798      	blx	r3
 8003e12:	61b8      	str	r0, [r7, #24]
          /* Since we're requested to process a newly received PDU, these packet accesses
           * should always succeed. Sanity check anyways, just in case.
           */
          TBX_ASSERT((rxPacket != NULL) && (txPacket != NULL));
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <TbxMbServerProcessEvent+0xa8>
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <TbxMbServerProcessEvent+0xb2>
 8003e20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003e24:	4868      	ldr	r0, [pc, #416]	; (8003fc8 <TbxMbServerProcessEvent+0x250>)
 8003e26:	f7fe fa67 	bl	80022f8 <TbxAssertTrigger>
          /* Only continue with packet access. */
          if ((rxPacket != NULL) && (txPacket != NULL))
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a4 	beq.w	8003f7a <TbxMbServerProcessEvent+0x202>
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80a0 	beq.w	8003f7a <TbxMbServerProcessEvent+0x202>
          {
            /* Update flag that we can actually send a response, now that we know we 
             * have access to txPacket.
             */
            okayToSendResponse = TBX_TRUE;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* Prepare the response packet function code. */
            txPacket->pdu.code = rxPacket->pdu.code;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	79da      	ldrb	r2, [r3, #7]
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	71da      	strb	r2, [r3, #7]
            /* Filter on the function code. */
            switch (rxPacket->pdu.code)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	79db      	ldrb	r3, [r3, #7]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	2b0f      	cmp	r3, #15
 8003e50:	d858      	bhi.n	8003f04 <TbxMbServerProcessEvent+0x18c>
 8003e52:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <TbxMbServerProcessEvent+0xe0>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003e99 	.word	0x08003e99
 8003e5c:	08003ea5 	.word	0x08003ea5
 8003e60:	08003eb1 	.word	0x08003eb1
 8003e64:	08003ebd 	.word	0x08003ebd
 8003e68:	08003ec9 	.word	0x08003ec9
 8003e6c:	08003ed5 	.word	0x08003ed5
 8003e70:	08003f05 	.word	0x08003f05
 8003e74:	08003ee1 	.word	0x08003ee1
 8003e78:	08003f05 	.word	0x08003f05
 8003e7c:	08003f05 	.word	0x08003f05
 8003e80:	08003f05 	.word	0x08003f05
 8003e84:	08003f05 	.word	0x08003f05
 8003e88:	08003f05 	.word	0x08003f05
 8003e8c:	08003f05 	.word	0x08003f05
 8003e90:	08003eed 	.word	0x08003eed
 8003e94:	08003ef9 	.word	0x08003ef9
            {
              /* ---------------- FC01 - Read Coils ---------------------------------- */
              case TBX_MB_FC01_READ_COILS:
              {
                TbxMbServerFC01ReadCoils(serverCtx, rxPacket, txPacket);
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	69f9      	ldr	r1, [r7, #28]
 8003e9c:	6a38      	ldr	r0, [r7, #32]
 8003e9e:	f000 f895 	bl	8003fcc <TbxMbServerFC01ReadCoils>
              }
              break;
 8003ea2:	e06d      	b.n	8003f80 <TbxMbServerProcessEvent+0x208>

              /* ---------------- FC02 - Read Discrete Inputs ------------------------ */
              case TBX_MB_FC02_READ_DISCRETE_INPUTS:
              {
                TbxMbServerFC02ReadInputs(serverCtx, rxPacket, txPacket);
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	69f9      	ldr	r1, [r7, #28]
 8003ea8:	6a38      	ldr	r0, [r7, #32]
 8003eaa:	f000 f971 	bl	8004190 <TbxMbServerFC02ReadInputs>
              }
              break;
 8003eae:	e067      	b.n	8003f80 <TbxMbServerProcessEvent+0x208>

              /* ---------------- FC03 - Read Holding Registers ---------------------- */
              case TBX_MB_FC03_READ_HOLDING_REGISTERS:
              {
                TbxMbServerFC03ReadHoldingRegs(serverCtx, rxPacket, txPacket);
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	69f9      	ldr	r1, [r7, #28]
 8003eb4:	6a38      	ldr	r0, [r7, #32]
 8003eb6:	f000 fa4d 	bl	8004354 <TbxMbServerFC03ReadHoldingRegs>
              }
              break;
 8003eba:	e061      	b.n	8003f80 <TbxMbServerProcessEvent+0x208>

              /* ---------------- FC04 - Read Input Registers ------------------------ */
              case TBX_MB_FC04_READ_INPUT_REGISTERS:
              {
                TbxMbServerFC04ReadInputRegs(serverCtx, rxPacket, txPacket);
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	69f9      	ldr	r1, [r7, #28]
 8003ec0:	6a38      	ldr	r0, [r7, #32]
 8003ec2:	f000 faef 	bl	80044a4 <TbxMbServerFC04ReadInputRegs>
              }
              break;
 8003ec6:	e05b      	b.n	8003f80 <TbxMbServerProcessEvent+0x208>

              /* ---------------- FC05 - Write Single Coil --------------------------- */
              case TBX_MB_FC05_WRITE_SINGLE_COIL:
              {
                TbxMbServerFC05WriteSingleCoil(serverCtx, rxPacket, txPacket);
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	69f9      	ldr	r1, [r7, #28]
 8003ecc:	6a38      	ldr	r0, [r7, #32]
 8003ece:	f000 fb91 	bl	80045f4 <TbxMbServerFC05WriteSingleCoil>
              }
              break;
 8003ed2:	e055      	b.n	8003f80 <TbxMbServerProcessEvent+0x208>

              /* ---------------- FC06 - Write Single Register ----------------------- */
              case TBX_MB_FC06_WRITE_SINGLE_REGISTER:
              {
                TbxMbServerFC06WriteSingleReg(serverCtx, rxPacket, txPacket);
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	69f9      	ldr	r1, [r7, #28]
 8003ed8:	6a38      	ldr	r0, [r7, #32]
 8003eda:	f000 fc21 	bl	8004720 <TbxMbServerFC06WriteSingleReg>
              }
              break;
 8003ede:	e04f      	b.n	8003f80 <TbxMbServerProcessEvent+0x208>

              /* ---------------- FC08 - Diagnostics --------------------------------- */
              case TBX_MB_FC08_DIAGNOSTICS:
              {
                TbxMbServerFC08Diagnostics(serverCtx, rxPacket, txPacket);
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	69f9      	ldr	r1, [r7, #28]
 8003ee4:	6a38      	ldr	r0, [r7, #32]
 8003ee6:	f000 fc93 	bl	8004810 <TbxMbServerFC08Diagnostics>
              }
              break;
 8003eea:	e049      	b.n	8003f80 <TbxMbServerProcessEvent+0x208>

              /* ---------------- FC15 - Write Multiple Coils ------------------------ */
              case TBX_MB_FC15_WRITE_MULTIPLE_COILS:
              {
                TbxMbServerFC15WriteMultipleCoils(serverCtx, rxPacket, txPacket);
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	69f9      	ldr	r1, [r7, #28]
 8003ef0:	6a38      	ldr	r0, [r7, #32]
 8003ef2:	f000 fde7 	bl	8004ac4 <TbxMbServerFC15WriteMultipleCoils>
              }
              break;
 8003ef6:	e043      	b.n	8003f80 <TbxMbServerProcessEvent+0x208>

              /* ---------------- FC16 - Write Multiple Registers -------------------- */
              case TBX_MB_FC16_WRITE_MULTIPLE_REGISTERS:
              {
                TbxMbServerFC16WriteMultipleRegs(serverCtx, rxPacket, txPacket);
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	69f9      	ldr	r1, [r7, #28]
 8003efc:	6a38      	ldr	r0, [r7, #32]
 8003efe:	f000 fed3 	bl	8004ca8 <TbxMbServerFC16WriteMultipleRegs>
              }
              break;
 8003f02:	e03d      	b.n	8003f80 <TbxMbServerProcessEvent+0x208>

              /* ---------------- Unsupported function code -------------------------- */
              default:
              {
                uint8_t handled = TBX_FALSE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                /* Is a custom function code callback configured? */
                if (serverCtx->customFunctionFcn != NULL)
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d020      	beq.n	8003f54 <TbxMbServerProcessEvent+0x1dc>
                {
                  /* Prepare callback parameters. */
                  uint8_t const * rxPdu  = &rxPacket->pdu.code;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3307      	adds	r3, #7
 8003f16:	617b      	str	r3, [r7, #20]
                  uint8_t       * txPdu  = &txPacket->pdu.code;
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	3307      	adds	r3, #7
 8003f1c:	613b      	str	r3, [r7, #16]
                  uint8_t         pduLen = rxPacket->dataLen + 1U;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003f24:	3301      	adds	r3, #1
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	73fb      	strb	r3, [r7, #15]
                  /* Call the custom function code callback. */
                  handled = serverCtx->customFunctionFcn(serverCtx, rxPdu, txPdu, 
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003f2e:	f107 030f 	add.w	r3, r7, #15
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	6979      	ldr	r1, [r7, #20]
 8003f36:	6a38      	ldr	r0, [r7, #32]
 8003f38:	47a0      	blx	r4
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                                         &pduLen);
                  /* Did the callback process the PDU and prepare a response? */
                  if (handled == TBX_TRUE)
 8003f40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <TbxMbServerProcessEvent+0x1dc>
                  {
                    /* Set the response data length. */
                    txPacket->dataLen = pduLen - 1U;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                  }
                }
                /* Did the custom function code callback not handle the PDU? */
                if (handled == TBX_FALSE)
 8003f54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d110      	bne.n	8003f7e <TbxMbServerProcessEvent+0x206>
                {
                  /* This function code is currently not supported. */
                  txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	79db      	ldrb	r3, [r3, #7]
 8003f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	71da      	strb	r2, [r3, #7]
                  txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	721a      	strb	r2, [r3, #8]
                  txPacket->dataLen = 1U;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                }
              }
              break;
 8003f78:	e001      	b.n	8003f7e <TbxMbServerProcessEvent+0x206>
            }
          }
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <TbxMbServerProcessEvent+0x208>
              break;
 8003f7e:	bf00      	nop
          /* Inform the transport layer that were done with the rx packet and no longer
           * need access to it.
           */
          serverCtx->tpCtx->receptionDoneFcn(serverCtx->tpCtx);
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8003f88:	6a3a      	ldr	r2, [r7, #32]
 8003f8a:	6912      	ldr	r2, [r2, #16]
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4798      	blx	r3
          /* Request the transport layer to transmit the response. Note that
           * transmitFcn() should only be called after calling receptionDoneFcn().
           */
          if (okayToSendResponse == TBX_TRUE)
 8003f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d112      	bne.n	8003fbe <TbxMbServerProcessEvent+0x246>
          {
            (void)serverCtx->tpCtx->transmitFcn(serverCtx->tpCtx);
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8003fa0:	6a3a      	ldr	r2, [r7, #32]
 8003fa2:	6912      	ldr	r2, [r2, #16]
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4798      	blx	r3
          }
        }
        break;
 8003fa8:	e009      	b.n	8003fbe <TbxMbServerProcessEvent+0x246>
        break;

        default:
        {
          /* An unsupported event was dispatched to us. Should not happen. */
          TBX_ASSERT(TBX_FALSE);
 8003faa:	f240 2135 	movw	r1, #565	; 0x235
 8003fae:	4806      	ldr	r0, [pc, #24]	; (8003fc8 <TbxMbServerProcessEvent+0x250>)
 8003fb0:	f7fe f9a2 	bl	80022f8 <TbxAssertTrigger>
        }
        break;
 8003fb4:	e004      	b.n	8003fc0 <TbxMbServerProcessEvent+0x248>
      }
    }
 8003fb6:	bf00      	nop
 8003fb8:	e002      	b.n	8003fc0 <TbxMbServerProcessEvent+0x248>
        break;
 8003fba:	bf00      	nop
 8003fbc:	e000      	b.n	8003fc0 <TbxMbServerProcessEvent+0x248>
        break;
 8003fbe:	bf00      	nop
  }
} /*** end of TbxMbServerProcessEvent ***/
 8003fc0:	bf00      	nop
 8003fc2:	372c      	adds	r7, #44	; 0x2c
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd90      	pop	{r4, r7, pc}
 8003fc8:	0800537c 	.word	0x0800537c

08003fcc <TbxMbServerFC01ReadCoils>:
**
****************************************************************************************/
static void TbxMbServerFC01ReadCoils(tTbxMbServerCtx       * context,
                                     tTbxMbTpPacket  const * rxPacket,
                                     tTbxMbTpPacket        * txPacket)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <TbxMbServerFC01ReadCoils+0x1e>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <TbxMbServerFC01ReadCoils+0x1e>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d104      	bne.n	8003ff4 <TbxMbServerFC01ReadCoils+0x28>
 8003fea:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8003fee:	4867      	ldr	r0, [pc, #412]	; (800418c <TbxMbServerFC01ReadCoils+0x1c0>)
 8003ff0:	f7fe f982 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80c4 	beq.w	8004184 <TbxMbServerFC01ReadCoils+0x1b8>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80c0 	beq.w	8004184 <TbxMbServerFC01ReadCoils+0x1b8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 80bc 	beq.w	8004184 <TbxMbServerFC01ReadCoils+0x1b8>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	3308      	adds	r3, #8
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fe03 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 8004016:	4603      	mov	r3, r0
 8004018:	843b      	strh	r3, [r7, #32]
    uint16_t numCoils  = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	330a      	adds	r3, #10
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fdfc 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 8004024:	4603      	mov	r3, r0
 8004026:	83fb      	strh	r3, [r7, #30]

    /* Check if a callback function was registered. */
    if (context->readCoilFcn == NULL)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10e      	bne.n	800404e <TbxMbServerFC01ReadCoils+0x82>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	79db      	ldrb	r3, [r3, #7]
 8004034:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004038:	b2da      	uxtb	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC01ReadCoils ***/
 800404c:	e09a      	b.n	8004184 <TbxMbServerFC01ReadCoils+0x1b8>
    else if ((numCoils < 1U) || (numCoils > 2000U))
 800404e:	8bfb      	ldrh	r3, [r7, #30]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <TbxMbServerFC01ReadCoils+0x90>
 8004054:	8bfb      	ldrh	r3, [r7, #30]
 8004056:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800405a:	d90e      	bls.n	800407a <TbxMbServerFC01ReadCoils+0xae>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	79db      	ldrb	r3, [r3, #7]
 8004060:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004064:	b2da      	uxtb	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2203      	movs	r2, #3
 800406e:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC01ReadCoils ***/
 8004078:	e084      	b.n	8004184 <TbxMbServerFC01ReadCoils+0x1b8>
      uint8_t numBytes = (uint8_t)(numCoils / 8U);
 800407a:	8bfb      	ldrh	r3, [r7, #30]
 800407c:	08db      	lsrs	r3, r3, #3
 800407e:	b29b      	uxth	r3, r3
 8004080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if ((numCoils % 8U) != 0U)
 8004084:	8bfb      	ldrh	r3, [r7, #30]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d004      	beq.n	800409a <TbxMbServerFC01ReadCoils+0xce>
        numBytes++;
 8004090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004094:	3301      	adds	r3, #1
 8004096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      txPacket->pdu.data[0] = numBytes;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80040a0:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = txPacket->pdu.data[0] + 1U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	7a1b      	ldrb	r3, [r3, #8]
 80040a6:	3301      	adds	r3, #1
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      uint8_t   bitIdx  = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      uint8_t   byteIdx = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      uint8_t * coilData = &txPacket->pdu.data[1];
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3309      	adds	r3, #9
 80040c0:	61bb      	str	r3, [r7, #24]
      coilData[0] = 0U;
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
      for (uint16_t idx = 0U; idx < numCoils; idx++)
 80040c8:	2300      	movs	r3, #0
 80040ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80040cc:	e056      	b.n	800417c <TbxMbServerFC01ReadCoils+0x1b0>
        uint8_t            coilValue = TBX_OFF;
 80040ce:	2300      	movs	r3, #0
 80040d0:	75bb      	strb	r3, [r7, #22]
        srvResult = context->readCoilFcn(context, startAddr + idx, &coilValue);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	8c39      	ldrh	r1, [r7, #32]
 80040d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80040da:	440a      	add	r2, r1
 80040dc:	b291      	uxth	r1, r2
 80040de:	f107 0216 	add.w	r2, r7, #22
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	4798      	blx	r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	75fb      	strb	r3, [r7, #23]
        if (srvResult == TBX_MB_SERVER_OK)
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d12c      	bne.n	800414a <TbxMbServerFC01ReadCoils+0x17e>
          if (coilValue != TBX_OFF)
 80040f0:	7dbb      	ldrb	r3, [r7, #22]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d011      	beq.n	800411a <TbxMbServerFC01ReadCoils+0x14e>
            coilData[byteIdx] |= (1U << bitIdx);
 80040f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4413      	add	r3, r2
 80040fe:	7819      	ldrb	r1, [r3, #0]
 8004100:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004104:	2201      	movs	r2, #1
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	b2da      	uxtb	r2, r3
 800410c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004110:	69b8      	ldr	r0, [r7, #24]
 8004112:	4403      	add	r3, r0
 8004114:	430a      	orrs	r2, r1
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]
          bitIdx++;
 800411a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800411e:	3301      	adds	r3, #1
 8004120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          if (bitIdx == 8U)
 8004124:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004128:	2b08      	cmp	r3, #8
 800412a:	d124      	bne.n	8004176 <TbxMbServerFC01ReadCoils+0x1aa>
            bitIdx = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            byteIdx++;
 8004132:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004136:	3301      	adds	r3, #1
 8004138:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            coilData[byteIdx] = 0U;
 800413c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4413      	add	r3, r2
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e015      	b.n	8004176 <TbxMbServerFC01ReadCoils+0x1aa>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	79db      	ldrb	r3, [r3, #7]
 800414e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004152:	b2da      	uxtb	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d103      	bne.n	8004166 <TbxMbServerFC01ReadCoils+0x19a>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2202      	movs	r2, #2
 8004162:	721a      	strb	r2, [r3, #8]
 8004164:	e002      	b.n	800416c <TbxMbServerFC01ReadCoils+0x1a0>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2204      	movs	r2, #4
 800416a:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC01ReadCoils ***/
 8004174:	e006      	b.n	8004184 <TbxMbServerFC01ReadCoils+0x1b8>
      for (uint16_t idx = 0U; idx < numCoils; idx++)
 8004176:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004178:	3301      	adds	r3, #1
 800417a:	847b      	strh	r3, [r7, #34]	; 0x22
 800417c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800417e:	8bfb      	ldrh	r3, [r7, #30]
 8004180:	429a      	cmp	r2, r3
 8004182:	d3a4      	bcc.n	80040ce <TbxMbServerFC01ReadCoils+0x102>
} /*** end of TbxMbServerFC01ReadCoils ***/
 8004184:	bf00      	nop
 8004186:	3728      	adds	r7, #40	; 0x28
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	0800537c 	.word	0x0800537c

08004190 <TbxMbServerFC02ReadInputs>:
**
****************************************************************************************/
static void TbxMbServerFC02ReadInputs(tTbxMbServerCtx       * context,
                                      tTbxMbTpPacket  const * rxPacket,
                                      tTbxMbTpPacket        * txPacket)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <TbxMbServerFC02ReadInputs+0x1e>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <TbxMbServerFC02ReadInputs+0x1e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d104      	bne.n	80041b8 <TbxMbServerFC02ReadInputs+0x28>
 80041ae:	f240 21be 	movw	r1, #702	; 0x2be
 80041b2:	4867      	ldr	r0, [pc, #412]	; (8004350 <TbxMbServerFC02ReadInputs+0x1c0>)
 80041b4:	f7fe f8a0 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80c4 	beq.w	8004348 <TbxMbServerFC02ReadInputs+0x1b8>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80c0 	beq.w	8004348 <TbxMbServerFC02ReadInputs+0x1b8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80bc 	beq.w	8004348 <TbxMbServerFC02ReadInputs+0x1b8>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	3308      	adds	r3, #8
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fd21 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 80041da:	4603      	mov	r3, r0
 80041dc:	843b      	strh	r3, [r7, #32]
    uint16_t numInputs = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	330a      	adds	r3, #10
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fd1a 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 80041e8:	4603      	mov	r3, r0
 80041ea:	83fb      	strh	r3, [r7, #30]

    /* Check if a callback function was registered. */
    if (context->readInputFcn == NULL)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10e      	bne.n	8004212 <TbxMbServerFC02ReadInputs+0x82>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	79db      	ldrb	r3, [r3, #7]
 80041f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC02ReadInputs ***/
 8004210:	e09a      	b.n	8004348 <TbxMbServerFC02ReadInputs+0x1b8>
    else if ((numInputs < 1U) || (numInputs > 2000U))
 8004212:	8bfb      	ldrh	r3, [r7, #30]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <TbxMbServerFC02ReadInputs+0x90>
 8004218:	8bfb      	ldrh	r3, [r7, #30]
 800421a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800421e:	d90e      	bls.n	800423e <TbxMbServerFC02ReadInputs+0xae>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	79db      	ldrb	r3, [r3, #7]
 8004224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004228:	b2da      	uxtb	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2203      	movs	r2, #3
 8004232:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC02ReadInputs ***/
 800423c:	e084      	b.n	8004348 <TbxMbServerFC02ReadInputs+0x1b8>
      uint8_t numBytes = (uint8_t)(numInputs / 8U);
 800423e:	8bfb      	ldrh	r3, [r7, #30]
 8004240:	08db      	lsrs	r3, r3, #3
 8004242:	b29b      	uxth	r3, r3
 8004244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if ((numInputs % 8U) != 0U)
 8004248:	8bfb      	ldrh	r3, [r7, #30]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <TbxMbServerFC02ReadInputs+0xce>
        numBytes++;
 8004254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004258:	3301      	adds	r3, #1
 800425a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      txPacket->pdu.data[0] = numBytes;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004264:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = txPacket->pdu.data[0] + 1U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	7a1b      	ldrb	r3, [r3, #8]
 800426a:	3301      	adds	r3, #1
 800426c:	b2da      	uxtb	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      uint8_t   bitIdx  = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      uint8_t   byteIdx = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      uint8_t * inputData = &txPacket->pdu.data[1];
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3309      	adds	r3, #9
 8004284:	61bb      	str	r3, [r7, #24]
      inputData[0] = 0U;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
      for (uint16_t idx = 0U; idx < numInputs; idx++)
 800428c:	2300      	movs	r3, #0
 800428e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004290:	e056      	b.n	8004340 <TbxMbServerFC02ReadInputs+0x1b0>
        uint8_t            inputValue = TBX_OFF;
 8004292:	2300      	movs	r3, #0
 8004294:	75bb      	strb	r3, [r7, #22]
        srvResult = context->readInputFcn(context, startAddr + idx, &inputValue);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	8c39      	ldrh	r1, [r7, #32]
 800429c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800429e:	440a      	add	r2, r1
 80042a0:	b291      	uxth	r1, r2
 80042a2:	f107 0216 	add.w	r2, r7, #22
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	4798      	blx	r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	75fb      	strb	r3, [r7, #23]
        if (srvResult == TBX_MB_SERVER_OK)
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d12c      	bne.n	800430e <TbxMbServerFC02ReadInputs+0x17e>
          if (inputValue != TBX_OFF)
 80042b4:	7dbb      	ldrb	r3, [r7, #22]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d011      	beq.n	80042de <TbxMbServerFC02ReadInputs+0x14e>
            inputData[byteIdx] |= (1U << bitIdx);
 80042ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4413      	add	r3, r2
 80042c2:	7819      	ldrb	r1, [r3, #0]
 80042c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80042c8:	2201      	movs	r2, #1
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80042d4:	69b8      	ldr	r0, [r7, #24]
 80042d6:	4403      	add	r3, r0
 80042d8:	430a      	orrs	r2, r1
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]
          bitIdx++;
 80042de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80042e2:	3301      	adds	r3, #1
 80042e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          if (bitIdx == 8U)
 80042e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d124      	bne.n	800433a <TbxMbServerFC02ReadInputs+0x1aa>
            bitIdx = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            byteIdx++;
 80042f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80042fa:	3301      	adds	r3, #1
 80042fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            inputData[byteIdx] = 0U;
 8004300:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4413      	add	r3, r2
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e015      	b.n	800433a <TbxMbServerFC02ReadInputs+0x1aa>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004316:	b2da      	uxtb	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d103      	bne.n	800432a <TbxMbServerFC02ReadInputs+0x19a>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	721a      	strb	r2, [r3, #8]
 8004328:	e002      	b.n	8004330 <TbxMbServerFC02ReadInputs+0x1a0>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2204      	movs	r2, #4
 800432e:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC02ReadInputs ***/
 8004338:	e006      	b.n	8004348 <TbxMbServerFC02ReadInputs+0x1b8>
      for (uint16_t idx = 0U; idx < numInputs; idx++)
 800433a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800433c:	3301      	adds	r3, #1
 800433e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004340:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004342:	8bfb      	ldrh	r3, [r7, #30]
 8004344:	429a      	cmp	r2, r3
 8004346:	d3a4      	bcc.n	8004292 <TbxMbServerFC02ReadInputs+0x102>
} /*** end of TbxMbServerFC02ReadInputs ***/
 8004348:	bf00      	nop
 800434a:	3728      	adds	r7, #40	; 0x28
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	0800537c 	.word	0x0800537c

08004354 <TbxMbServerFC03ReadHoldingRegs>:
**
****************************************************************************************/
static void TbxMbServerFC03ReadHoldingRegs(tTbxMbServerCtx       * context,
                                           tTbxMbTpPacket  const * rxPacket,
                                           tTbxMbTpPacket        * txPacket)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <TbxMbServerFC03ReadHoldingRegs+0x1e>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <TbxMbServerFC03ReadHoldingRegs+0x1e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d104      	bne.n	800437c <TbxMbServerFC03ReadHoldingRegs+0x28>
 8004372:	f240 3131 	movw	r1, #817	; 0x331
 8004376:	484a      	ldr	r0, [pc, #296]	; (80044a0 <TbxMbServerFC03ReadHoldingRegs+0x14c>)
 8004378:	f7fd ffbe 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8089 	beq.w	8004496 <TbxMbServerFC03ReadHoldingRegs+0x142>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 8085 	beq.w	8004496 <TbxMbServerFC03ReadHoldingRegs+0x142>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8081 	beq.w	8004496 <TbxMbServerFC03ReadHoldingRegs+0x142>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	3308      	adds	r3, #8
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fc3f 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 800439e:	4603      	mov	r3, r0
 80043a0:	83bb      	strh	r3, [r7, #28]
    uint16_t numRegs   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	330a      	adds	r3, #10
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fc38 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 80043ac:	4603      	mov	r3, r0
 80043ae:	837b      	strh	r3, [r7, #26]

    /* Check if a callback function was registered. */
    if (context->readHoldingRegFcn == NULL)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10e      	bne.n	80043d6 <TbxMbServerFC03ReadHoldingRegs+0x82>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	79db      	ldrb	r3, [r3, #7]
 80043bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC03ReadHoldingRegs ***/
 80043d4:	e05f      	b.n	8004496 <TbxMbServerFC03ReadHoldingRegs+0x142>
    else if ((numRegs < 1U) || (numRegs > 125U))
 80043d6:	8b7b      	ldrh	r3, [r7, #26]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <TbxMbServerFC03ReadHoldingRegs+0x8e>
 80043dc:	8b7b      	ldrh	r3, [r7, #26]
 80043de:	2b7d      	cmp	r3, #125	; 0x7d
 80043e0:	d90e      	bls.n	8004400 <TbxMbServerFC03ReadHoldingRegs+0xac>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	79db      	ldrb	r3, [r3, #7]
 80043e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2203      	movs	r2, #3
 80043f4:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC03ReadHoldingRegs ***/
 80043fe:	e04a      	b.n	8004496 <TbxMbServerFC03ReadHoldingRegs+0x142>
      txPacket->pdu.data[0] = 2U * numRegs;
 8004400:	8b7b      	ldrh	r3, [r7, #26]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	b2da      	uxtb	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = txPacket->pdu.data[0] + 1U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7a1b      	ldrb	r3, [r3, #8]
 8004410:	3301      	adds	r3, #1
 8004412:	b2da      	uxtb	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 800441a:	2300      	movs	r3, #0
 800441c:	77fb      	strb	r3, [r7, #31]
 800441e:	e035      	b.n	800448c <TbxMbServerFC03ReadHoldingRegs+0x138>
        uint16_t           regValue = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	82fb      	strh	r3, [r7, #22]
        srvResult = context->readHoldingRegFcn(context, startAddr + idx, &regValue);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	7ffa      	ldrb	r2, [r7, #31]
 800442a:	b291      	uxth	r1, r2
 800442c:	8bba      	ldrh	r2, [r7, #28]
 800442e:	440a      	add	r2, r1
 8004430:	b291      	uxth	r1, r2
 8004432:	f107 0216 	add.w	r2, r7, #22
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	4798      	blx	r3
 800443a:	4603      	mov	r3, r0
 800443c:	767b      	strb	r3, [r7, #25]
        if (srvResult == TBX_MB_SERVER_OK)
 800443e:	7e7b      	ldrb	r3, [r7, #25]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10d      	bne.n	8004460 <TbxMbServerFC03ReadHoldingRegs+0x10c>
          TbxMbCommonStoreUInt16BE(regValue, &txPacket->pdu.data[1U + (idx * 2U)]);
 8004444:	8af8      	ldrh	r0, [r7, #22]
 8004446:	7ffb      	ldrb	r3, [r7, #31]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	3301      	adds	r3, #1
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4413      	add	r3, r2
 8004450:	3308      	adds	r3, #8
 8004452:	4619      	mov	r1, r3
 8004454:	f7ff fbf7 	bl	8003c46 <TbxMbCommonStoreUInt16BE>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8004458:	7ffb      	ldrb	r3, [r7, #31]
 800445a:	3301      	adds	r3, #1
 800445c:	77fb      	strb	r3, [r7, #31]
 800445e:	e015      	b.n	800448c <TbxMbServerFC03ReadHoldingRegs+0x138>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	79db      	ldrb	r3, [r3, #7]
 8004464:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004468:	b2da      	uxtb	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 800446e:	7e7b      	ldrb	r3, [r7, #25]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d103      	bne.n	800447c <TbxMbServerFC03ReadHoldingRegs+0x128>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	721a      	strb	r2, [r3, #8]
 800447a:	e002      	b.n	8004482 <TbxMbServerFC03ReadHoldingRegs+0x12e>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2204      	movs	r2, #4
 8004480:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC03ReadHoldingRegs ***/
 800448a:	e004      	b.n	8004496 <TbxMbServerFC03ReadHoldingRegs+0x142>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 800448c:	7ffb      	ldrb	r3, [r7, #31]
 800448e:	b29b      	uxth	r3, r3
 8004490:	8b7a      	ldrh	r2, [r7, #26]
 8004492:	429a      	cmp	r2, r3
 8004494:	d8c4      	bhi.n	8004420 <TbxMbServerFC03ReadHoldingRegs+0xcc>
} /*** end of TbxMbServerFC03ReadHoldingRegs ***/
 8004496:	bf00      	nop
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	0800537c 	.word	0x0800537c

080044a4 <TbxMbServerFC04ReadInputRegs>:
**
****************************************************************************************/
static void TbxMbServerFC04ReadInputRegs(tTbxMbServerCtx       * context,
                                        tTbxMbTpPacket  const * rxPacket,
                                        tTbxMbTpPacket        * txPacket)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <TbxMbServerFC04ReadInputRegs+0x1e>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <TbxMbServerFC04ReadInputRegs+0x1e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d104      	bne.n	80044cc <TbxMbServerFC04ReadInputRegs+0x28>
 80044c2:	f240 3182 	movw	r1, #898	; 0x382
 80044c6:	484a      	ldr	r0, [pc, #296]	; (80045f0 <TbxMbServerFC04ReadInputRegs+0x14c>)
 80044c8:	f7fd ff16 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8089 	beq.w	80045e6 <TbxMbServerFC04ReadInputRegs+0x142>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8085 	beq.w	80045e6 <TbxMbServerFC04ReadInputRegs+0x142>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8081 	beq.w	80045e6 <TbxMbServerFC04ReadInputRegs+0x142>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3308      	adds	r3, #8
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fb97 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 80044ee:	4603      	mov	r3, r0
 80044f0:	83bb      	strh	r3, [r7, #28]
    uint16_t numRegs   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	330a      	adds	r3, #10
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fb90 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 80044fc:	4603      	mov	r3, r0
 80044fe:	837b      	strh	r3, [r7, #26]

    /* Check if a callback function was registered. */
    if (context->readInputRegFcn == NULL)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10e      	bne.n	8004526 <TbxMbServerFC04ReadInputRegs+0x82>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	79db      	ldrb	r3, [r3, #7]
 800450c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004510:	b2da      	uxtb	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC04ReadInputRegs ***/
 8004524:	e05f      	b.n	80045e6 <TbxMbServerFC04ReadInputRegs+0x142>
    else if ((numRegs < 1U) || (numRegs > 125U))
 8004526:	8b7b      	ldrh	r3, [r7, #26]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <TbxMbServerFC04ReadInputRegs+0x8e>
 800452c:	8b7b      	ldrh	r3, [r7, #26]
 800452e:	2b7d      	cmp	r3, #125	; 0x7d
 8004530:	d90e      	bls.n	8004550 <TbxMbServerFC04ReadInputRegs+0xac>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	79db      	ldrb	r3, [r3, #7]
 8004536:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800453a:	b2da      	uxtb	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2203      	movs	r2, #3
 8004544:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC04ReadInputRegs ***/
 800454e:	e04a      	b.n	80045e6 <TbxMbServerFC04ReadInputRegs+0x142>
      txPacket->pdu.data[0] = 2U * numRegs;
 8004550:	8b7b      	ldrh	r3, [r7, #26]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	b2da      	uxtb	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = txPacket->pdu.data[0] + 1U;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7a1b      	ldrb	r3, [r3, #8]
 8004560:	3301      	adds	r3, #1
 8004562:	b2da      	uxtb	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 800456a:	2300      	movs	r3, #0
 800456c:	77fb      	strb	r3, [r7, #31]
 800456e:	e035      	b.n	80045dc <TbxMbServerFC04ReadInputRegs+0x138>
        uint16_t           regValue = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	82fb      	strh	r3, [r7, #22]
        srvResult = context->readInputRegFcn(context, startAddr + idx, &regValue);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	7ffa      	ldrb	r2, [r7, #31]
 800457a:	b291      	uxth	r1, r2
 800457c:	8bba      	ldrh	r2, [r7, #28]
 800457e:	440a      	add	r2, r1
 8004580:	b291      	uxth	r1, r2
 8004582:	f107 0216 	add.w	r2, r7, #22
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	4798      	blx	r3
 800458a:	4603      	mov	r3, r0
 800458c:	767b      	strb	r3, [r7, #25]
        if (srvResult == TBX_MB_SERVER_OK)
 800458e:	7e7b      	ldrb	r3, [r7, #25]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10d      	bne.n	80045b0 <TbxMbServerFC04ReadInputRegs+0x10c>
          TbxMbCommonStoreUInt16BE(regValue, &txPacket->pdu.data[1U + (idx * 2U)]);
 8004594:	8af8      	ldrh	r0, [r7, #22]
 8004596:	7ffb      	ldrb	r3, [r7, #31]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	3301      	adds	r3, #1
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4413      	add	r3, r2
 80045a0:	3308      	adds	r3, #8
 80045a2:	4619      	mov	r1, r3
 80045a4:	f7ff fb4f 	bl	8003c46 <TbxMbCommonStoreUInt16BE>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 80045a8:	7ffb      	ldrb	r3, [r7, #31]
 80045aa:	3301      	adds	r3, #1
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e015      	b.n	80045dc <TbxMbServerFC04ReadInputRegs+0x138>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	79db      	ldrb	r3, [r3, #7]
 80045b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 80045be:	7e7b      	ldrb	r3, [r7, #25]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d103      	bne.n	80045cc <TbxMbServerFC04ReadInputRegs+0x128>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	721a      	strb	r2, [r3, #8]
 80045ca:	e002      	b.n	80045d2 <TbxMbServerFC04ReadInputRegs+0x12e>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2204      	movs	r2, #4
 80045d0:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC04ReadInputRegs ***/
 80045da:	e004      	b.n	80045e6 <TbxMbServerFC04ReadInputRegs+0x142>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 80045dc:	7ffb      	ldrb	r3, [r7, #31]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	8b7a      	ldrh	r2, [r7, #26]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d8c4      	bhi.n	8004570 <TbxMbServerFC04ReadInputRegs+0xcc>
} /*** end of TbxMbServerFC04ReadInputRegs ***/
 80045e6:	bf00      	nop
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	0800537c 	.word	0x0800537c

080045f4 <TbxMbServerFC05WriteSingleCoil>:
**
****************************************************************************************/
static void TbxMbServerFC05WriteSingleCoil(tTbxMbServerCtx       * context,
                                           tTbxMbTpPacket  const * rxPacket,
                                           tTbxMbTpPacket        * txPacket)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <TbxMbServerFC05WriteSingleCoil+0x1e>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <TbxMbServerFC05WriteSingleCoil+0x1e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <TbxMbServerFC05WriteSingleCoil+0x28>
 8004612:	f240 31d3 	movw	r1, #979	; 0x3d3
 8004616:	4841      	ldr	r0, [pc, #260]	; (800471c <TbxMbServerFC05WriteSingleCoil+0x128>)
 8004618:	f7fd fe6e 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d077      	beq.n	8004712 <TbxMbServerFC05WriteSingleCoil+0x11e>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d074      	beq.n	8004712 <TbxMbServerFC05WriteSingleCoil+0x11e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d071      	beq.n	8004712 <TbxMbServerFC05WriteSingleCoil+0x11e>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3308      	adds	r3, #8
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff faf2 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 8004638:	4603      	mov	r3, r0
 800463a:	82fb      	strh	r3, [r7, #22]
    uint16_t outputValue = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	330a      	adds	r3, #10
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff faeb 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 8004646:	4603      	mov	r3, r0
 8004648:	82bb      	strh	r3, [r7, #20]

    /* Check if a callback function was registered. */
    if (context->writeCoilFcn == NULL)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10e      	bne.n	8004670 <TbxMbServerFC05WriteSingleCoil+0x7c>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	79db      	ldrb	r3, [r3, #7]
 8004656:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800465a:	b2da      	uxtb	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        }
        txPacket->dataLen = 1U;
      }
    }
  }
} /*** end of TbxMbServerFC05WriteSingleCoil ***/
 800466e:	e050      	b.n	8004712 <TbxMbServerFC05WriteSingleCoil+0x11e>
    else if ((outputValue != 0x0000U) && (outputValue != 0xFF00U))
 8004670:	8abb      	ldrh	r3, [r7, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d012      	beq.n	800469c <TbxMbServerFC05WriteSingleCoil+0xa8>
 8004676:	8abb      	ldrh	r3, [r7, #20]
 8004678:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800467c:	d00e      	beq.n	800469c <TbxMbServerFC05WriteSingleCoil+0xa8>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	79db      	ldrb	r3, [r3, #7]
 8004682:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004686:	b2da      	uxtb	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2203      	movs	r2, #3
 8004690:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC05WriteSingleCoil ***/
 800469a:	e03a      	b.n	8004712 <TbxMbServerFC05WriteSingleCoil+0x11e>
      txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	7a1a      	ldrb	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	721a      	strb	r2, [r3, #8]
      txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	7a5a      	ldrb	r2, [r3, #9]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	725a      	strb	r2, [r3, #9]
      txPacket->pdu.data[2U] = rxPacket->pdu.data[2U];
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	7a9a      	ldrb	r2, [r3, #10]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	729a      	strb	r2, [r3, #10]
      txPacket->pdu.data[3U] = rxPacket->pdu.data[3U];
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	7ada      	ldrb	r2, [r3, #11]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	72da      	strb	r2, [r3, #11]
      txPacket->dataLen = 4U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2204      	movs	r2, #4
 80046c0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      uint8_t            coilValue = (outputValue == 0x0000U) ? TBX_OFF : TBX_ON;
 80046c4:	8abb      	ldrh	r3, [r7, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bf14      	ite	ne
 80046ca:	2301      	movne	r3, #1
 80046cc:	2300      	moveq	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	74fb      	strb	r3, [r7, #19]
      srvResult = context->writeCoilFcn(context, startAddr, coilValue);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	7cfa      	ldrb	r2, [r7, #19]
 80046d8:	8af9      	ldrh	r1, [r7, #22]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	4798      	blx	r3
 80046de:	4603      	mov	r3, r0
 80046e0:	74bb      	strb	r3, [r7, #18]
      if (srvResult != TBX_MB_SERVER_OK)
 80046e2:	7cbb      	ldrb	r3, [r7, #18]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d014      	beq.n	8004712 <TbxMbServerFC05WriteSingleCoil+0x11e>
        txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	79db      	ldrb	r3, [r3, #7]
 80046ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	71da      	strb	r2, [r3, #7]
        if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 80046f6:	7cbb      	ldrb	r3, [r7, #18]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d103      	bne.n	8004704 <TbxMbServerFC05WriteSingleCoil+0x110>
          txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	721a      	strb	r2, [r3, #8]
 8004702:	e002      	b.n	800470a <TbxMbServerFC05WriteSingleCoil+0x116>
          txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2204      	movs	r2, #4
 8004708:	721a      	strb	r2, [r3, #8]
        txPacket->dataLen = 1U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC05WriteSingleCoil ***/
 8004712:	bf00      	nop
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	0800537c 	.word	0x0800537c

08004720 <TbxMbServerFC06WriteSingleReg>:
**
****************************************************************************************/
static void TbxMbServerFC06WriteSingleReg(tTbxMbServerCtx       * context,
                                          tTbxMbTpPacket  const * rxPacket,
                                          tTbxMbTpPacket        * txPacket)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <TbxMbServerFC06WriteSingleReg+0x1e>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <TbxMbServerFC06WriteSingleReg+0x1e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d104      	bne.n	8004748 <TbxMbServerFC06WriteSingleReg+0x28>
 800473e:	f240 411b 	movw	r1, #1051	; 0x41b
 8004742:	4832      	ldr	r0, [pc, #200]	; (800480c <TbxMbServerFC06WriteSingleReg+0xec>)
 8004744:	f7fd fdd8 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d05a      	beq.n	8004804 <TbxMbServerFC06WriteSingleReg+0xe4>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d057      	beq.n	8004804 <TbxMbServerFC06WriteSingleReg+0xe4>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d054      	beq.n	8004804 <TbxMbServerFC06WriteSingleReg+0xe4>
  {
    /* Read out request packet parameters. */
    uint16_t regAddr  = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	3308      	adds	r3, #8
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fa5c 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 8004764:	4603      	mov	r3, r0
 8004766:	82fb      	strh	r3, [r7, #22]
    uint16_t regValue = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	330a      	adds	r3, #10
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fa55 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 8004772:	4603      	mov	r3, r0
 8004774:	82bb      	strh	r3, [r7, #20]

    /* Check if a callback function was registered. */
    if (context->writeHoldingRegFcn == NULL)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10e      	bne.n	800479c <TbxMbServerFC06WriteSingleReg+0x7c>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	79db      	ldrb	r3, [r3, #7]
 8004782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004786:	b2da      	uxtb	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        }
        txPacket->dataLen = 1U;
      }
    }
  }
} /*** end of TbxMbServerFC06WriteSingleReg ***/
 800479a:	e033      	b.n	8004804 <TbxMbServerFC06WriteSingleReg+0xe4>
      txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	7a1a      	ldrb	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	721a      	strb	r2, [r3, #8]
      txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	7a5a      	ldrb	r2, [r3, #9]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	725a      	strb	r2, [r3, #9]
      txPacket->pdu.data[2U] = rxPacket->pdu.data[2U];
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	7a9a      	ldrb	r2, [r3, #10]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	729a      	strb	r2, [r3, #10]
      txPacket->pdu.data[3U] = rxPacket->pdu.data[3U];
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	7ada      	ldrb	r2, [r3, #11]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	72da      	strb	r2, [r3, #11]
      txPacket->dataLen = 4U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2204      	movs	r2, #4
 80047c0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      srvResult = context->writeHoldingRegFcn(context, regAddr, regValue);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	8aba      	ldrh	r2, [r7, #20]
 80047ca:	8af9      	ldrh	r1, [r7, #22]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	4798      	blx	r3
 80047d0:	4603      	mov	r3, r0
 80047d2:	74fb      	strb	r3, [r7, #19]
      if (srvResult != TBX_MB_SERVER_OK)
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d014      	beq.n	8004804 <TbxMbServerFC06WriteSingleReg+0xe4>
        txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	79db      	ldrb	r3, [r3, #7]
 80047de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	71da      	strb	r2, [r3, #7]
        if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 80047e8:	7cfb      	ldrb	r3, [r7, #19]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d103      	bne.n	80047f6 <TbxMbServerFC06WriteSingleReg+0xd6>
          txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	721a      	strb	r2, [r3, #8]
 80047f4:	e002      	b.n	80047fc <TbxMbServerFC06WriteSingleReg+0xdc>
          txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2204      	movs	r2, #4
 80047fa:	721a      	strb	r2, [r3, #8]
        txPacket->dataLen = 1U;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC06WriteSingleReg ***/
 8004804:	bf00      	nop
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	0800537c 	.word	0x0800537c

08004810 <TbxMbServerFC08Diagnostics>:
**
****************************************************************************************/
static void TbxMbServerFC08Diagnostics(tTbxMbServerCtx       * context,
                                       tTbxMbTpPacket  const * rxPacket,
                                       tTbxMbTpPacket        * txPacket)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <TbxMbServerFC08Diagnostics+0x1e>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <TbxMbServerFC08Diagnostics+0x1e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d104      	bne.n	8004838 <TbxMbServerFC08Diagnostics+0x28>
 800482e:	f240 415a 	movw	r1, #1114	; 0x45a
 8004832:	48a3      	ldr	r0, [pc, #652]	; (8004ac0 <TbxMbServerFC08Diagnostics+0x2b0>)
 8004834:	f7fd fd60 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 813a 	beq.w	8004ab4 <TbxMbServerFC08Diagnostics+0x2a4>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8136 	beq.w	8004ab4 <TbxMbServerFC08Diagnostics+0x2a4>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8132 	beq.w	8004ab4 <TbxMbServerFC08Diagnostics+0x2a4>
  {
    /* Read out request packet parameters. */
    uint16_t subCode   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	3308      	adds	r3, #8
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff f9e1 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 800485a:	4603      	mov	r3, r0
 800485c:	82bb      	strh	r3, [r7, #20]
    uint16_t dataField = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	330a      	adds	r3, #10
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff f9da 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 8004868:	4603      	mov	r3, r0
 800486a:	827b      	strh	r3, [r7, #18]
    /* Prepare the most common response. It's typically the sub-function code echoed,
     * together with a 16-bit unsigned value.
     */
    txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	7a1a      	ldrb	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	721a      	strb	r2, [r3, #8]
    txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	7a5a      	ldrb	r2, [r3, #9]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	725a      	strb	r2, [r3, #9]
    txPacket->dataLen = 4U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2204      	movs	r2, #4
 8004880:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

    /* Filter on the received sub-function code. */
    switch (subCode)
 8004884:	8abb      	ldrh	r3, [r7, #20]
 8004886:	2b0f      	cmp	r3, #15
 8004888:	f200 8105 	bhi.w	8004a96 <TbxMbServerFC08Diagnostics+0x286>
 800488c:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <TbxMbServerFC08Diagnostics+0x84>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	080048d5 	.word	0x080048d5
 8004898:	08004a97 	.word	0x08004a97
 800489c:	08004a97 	.word	0x08004a97
 80048a0:	08004a97 	.word	0x08004a97
 80048a4:	08004a97 	.word	0x08004a97
 80048a8:	08004a97 	.word	0x08004a97
 80048ac:	08004a97 	.word	0x08004a97
 80048b0:	08004a97 	.word	0x08004a97
 80048b4:	08004a97 	.word	0x08004a97
 80048b8:	08004a97 	.word	0x08004a97
 80048bc:	0800490d 	.word	0x0800490d
 80048c0:	08004975 	.word	0x08004975
 80048c4:	080049af 	.word	0x080049af
 80048c8:	080049e9 	.word	0x080049e9
 80048cc:	08004a23 	.word	0x08004a23
 80048d0:	08004a5d 	.word	0x08004a5d
    {
      case TBX_MB_DIAG_SC_QUERY_DATA:
      {
        /* Echo the received data back. */
        for (uint8_t idx = 0U; idx < rxPacket->dataLen; idx++)
 80048d4:	2300      	movs	r3, #0
 80048d6:	75fb      	strb	r3, [r7, #23]
 80048d8:	e00b      	b.n	80048f2 <TbxMbServerFC08Diagnostics+0xe2>
        {
         txPacket->pdu.data[idx] = rxPacket->pdu.data[idx];
 80048da:	7dfa      	ldrb	r2, [r7, #23]
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	440a      	add	r2, r1
 80048e2:	7a11      	ldrb	r1, [r2, #8]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	4413      	add	r3, r2
 80048e8:	460a      	mov	r2, r1
 80048ea:	721a      	strb	r2, [r3, #8]
        for (uint8_t idx = 0U; idx < rxPacket->dataLen; idx++)
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	3301      	adds	r3, #1
 80048f0:	75fb      	strb	r3, [r7, #23]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80048f8:	7dfa      	ldrb	r2, [r7, #23]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3ed      	bcc.n	80048da <TbxMbServerFC08Diagnostics+0xca>
        }
        txPacket->dataLen = rxPacket->dataLen;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      }
      break;
 800490a:	e0d4      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>

      case TBX_MB_DIAG_SC_CLEAR_COUNTERS:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 800490c:	8a7b      	ldrh	r3, [r7, #18]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00e      	beq.n	8004930 <TbxMbServerFC08Diagnostics+0x120>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	79db      	ldrb	r3, [r3, #7]
 8004916:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800491a:	b2da      	uxtb	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2203      	movs	r2, #3
 8004924:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          context->tpCtx->diagInfo.srvNoRespCnt  = 0U;
          /* Echo the request data field. */
          TbxMbCommonStoreUInt16BE(dataField, &txPacket->pdu.data[2U]);
        }
      }
      break;
 800492e:	e0c2      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>
          context->tpCtx->diagInfo.busMsgCnt     = 0U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2200      	movs	r2, #0
 8004936:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
          context->tpCtx->diagInfo.busCommErrCnt = 0U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2200      	movs	r2, #0
 8004940:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
          context->tpCtx->diagInfo.busExcpErrCnt = 0U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2200      	movs	r2, #0
 800494a:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
          context->tpCtx->diagInfo.srvMsgCnt     = 0U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2200      	movs	r2, #0
 8004954:	f8a3 223e 	strh.w	r2, [r3, #574]	; 0x23e
          context->tpCtx->diagInfo.srvNoRespCnt  = 0U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2200      	movs	r2, #0
 800495e:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
          TbxMbCommonStoreUInt16BE(dataField, &txPacket->pdu.data[2U]);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f103 020a 	add.w	r2, r3, #10
 8004968:	8a7b      	ldrh	r3, [r7, #18]
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff f96a 	bl	8003c46 <TbxMbCommonStoreUInt16BE>
      break;
 8004972:	e0a0      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>

      case TBX_MB_DIAG_SC_BUS_MESSAGE_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 8004974:	8a7b      	ldrh	r3, [r7, #18]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00e      	beq.n	8004998 <TbxMbServerFC08Diagnostics+0x188>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	79db      	ldrb	r3, [r3, #7]
 800497e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004982:	b2da      	uxtb	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2203      	movs	r2, #3
 800498c:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busMsgCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 8004996:	e08e      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busMsgCnt, 
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f8b3 2238 	ldrh.w	r2, [r3, #568]	; 0x238
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	330a      	adds	r3, #10
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f7ff f94d 	bl	8003c46 <TbxMbCommonStoreUInt16BE>
      break;
 80049ac:	e083      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>

      case TBX_MB_DIAG_SC_BUS_COMM_ERROR_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 80049ae:	8a7b      	ldrh	r3, [r7, #18]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00e      	beq.n	80049d2 <TbxMbServerFC08Diagnostics+0x1c2>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	79db      	ldrb	r3, [r3, #7]
 80049b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2203      	movs	r2, #3
 80049c6:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busCommErrCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 80049d0:	e071      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busCommErrCnt, 
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f8b3 223a 	ldrh.w	r2, [r3, #570]	; 0x23a
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	330a      	adds	r3, #10
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f7ff f930 	bl	8003c46 <TbxMbCommonStoreUInt16BE>
      break;
 80049e6:	e066      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>

      case TBX_MB_DIAG_SC_BUS_EXCEPTION_ERROR_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 80049e8:	8a7b      	ldrh	r3, [r7, #18]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00e      	beq.n	8004a0c <TbxMbServerFC08Diagnostics+0x1fc>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	79db      	ldrb	r3, [r3, #7]
 80049f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2203      	movs	r2, #3
 8004a00:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busExcpErrCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 8004a0a:	e054      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busExcpErrCnt, 
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f8b3 223c 	ldrh.w	r2, [r3, #572]	; 0x23c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	330a      	adds	r3, #10
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f7ff f913 	bl	8003c46 <TbxMbCommonStoreUInt16BE>
      break;
 8004a20:	e049      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>

      case TBX_MB_DIAG_SC_SERVER_MESSAGE_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 8004a22:	8a7b      	ldrh	r3, [r7, #18]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00e      	beq.n	8004a46 <TbxMbServerFC08Diagnostics+0x236>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	79db      	ldrb	r3, [r3, #7]
 8004a2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2203      	movs	r2, #3
 8004a3a:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.srvMsgCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 8004a44:	e037      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.srvMsgCnt, 
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f8b3 223e 	ldrh.w	r2, [r3, #574]	; 0x23e
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	330a      	adds	r3, #10
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f7ff f8f6 	bl	8003c46 <TbxMbCommonStoreUInt16BE>
      break;
 8004a5a:	e02c      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>

      case TBX_MB_DIAG_SC_SERVER_NO_RESPONSE_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 8004a5c:	8a7b      	ldrh	r3, [r7, #18]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00e      	beq.n	8004a80 <TbxMbServerFC08Diagnostics+0x270>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	79db      	ldrb	r3, [r3, #7]
 8004a66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2203      	movs	r2, #3
 8004a74:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.srvNoRespCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 8004a7e:	e01a      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.srvNoRespCnt, 
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f8b3 2240 	ldrh.w	r2, [r3, #576]	; 0x240
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	330a      	adds	r3, #10
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f7ff f8d9 	bl	8003c46 <TbxMbCommonStoreUInt16BE>
      break;
 8004a94:	e00f      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>

      default:
      {
        /* Unsupported sub-function code. Prepare exception response. */
        txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	79db      	ldrb	r3, [r3, #7]
 8004a9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	71da      	strb	r2, [r3, #7]
        txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	721a      	strb	r2, [r3, #8]
        txPacket->dataLen = 1U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      }
      break;
 8004ab2:	e000      	b.n	8004ab6 <TbxMbServerFC08Diagnostics+0x2a6>
    }
  }
 8004ab4:	bf00      	nop
} /*** end of TbxMbServerFC08Diagnostics ***/
 8004ab6:	bf00      	nop
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	0800537c 	.word	0x0800537c

08004ac4 <TbxMbServerFC15WriteMultipleCoils>:
**
****************************************************************************************/
static void TbxMbServerFC15WriteMultipleCoils(tTbxMbServerCtx       * context,
                                              tTbxMbTpPacket  const * rxPacket,
                                              tTbxMbTpPacket        * txPacket)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08a      	sub	sp, #40	; 0x28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <TbxMbServerFC15WriteMultipleCoils+0x1e>
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <TbxMbServerFC15WriteMultipleCoils+0x1e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <TbxMbServerFC15WriteMultipleCoils+0x28>
 8004ae2:	f240 510f 	movw	r1, #1295	; 0x50f
 8004ae6:	486f      	ldr	r0, [pc, #444]	; (8004ca4 <TbxMbServerFC15WriteMultipleCoils+0x1e0>)
 8004ae8:	f7fd fc06 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 80d4 	beq.w	8004c9c <TbxMbServerFC15WriteMultipleCoils+0x1d8>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 80d0 	beq.w	8004c9c <TbxMbServerFC15WriteMultipleCoils+0x1d8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80cc 	beq.w	8004c9c <TbxMbServerFC15WriteMultipleCoils+0x1d8>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	3308      	adds	r3, #8
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff f887 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	83fb      	strh	r3, [r7, #30]
    uint16_t numCoils  = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	330a      	adds	r3, #10
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff f880 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	83bb      	strh	r3, [r7, #28]
    uint8_t  byteCnt   = rxPacket->pdu.data[4];
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	7b1b      	ldrb	r3, [r3, #12]
 8004b24:	76fb      	strb	r3, [r7, #27]
    /* Determine the number of bytes needed to hold all the coil bits. Make it U16 
     * because the range validity of numCoils is not yet checked.
     */
    uint16_t numBytes = (uint16_t)(numCoils / 8U);
 8004b26:	8bbb      	ldrh	r3, [r7, #28]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	84fb      	strh	r3, [r7, #38]	; 0x26
    if ((numCoils % 8U) != 0U)
 8004b2c:	8bbb      	ldrh	r3, [r7, #28]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <TbxMbServerFC15WriteMultipleCoils+0x7a>
    {
      numBytes++;
 8004b38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    /* Check if a callback function was registered. */
    if (context->writeCoilFcn == NULL)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10e      	bne.n	8004b64 <TbxMbServerFC15WriteMultipleCoils+0xa0>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	79db      	ldrb	r3, [r3, #7]
 8004b4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          byteIdx++;
        }
      }
    }
  }
} /*** end of TbxMbServerFC15WriteMultipleCoils ***/
 8004b62:	e09b      	b.n	8004c9c <TbxMbServerFC15WriteMultipleCoils+0x1d8>
    else if (((numCoils < 1U) || (numCoils > 1968U)))
 8004b64:	8bbb      	ldrh	r3, [r7, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <TbxMbServerFC15WriteMultipleCoils+0xae>
 8004b6a:	8bbb      	ldrh	r3, [r7, #28]
 8004b6c:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8004b70:	d90e      	bls.n	8004b90 <TbxMbServerFC15WriteMultipleCoils+0xcc>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	79db      	ldrb	r3, [r3, #7]
 8004b76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2203      	movs	r2, #3
 8004b84:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8004b8e:	e085      	b.n	8004c9c <TbxMbServerFC15WriteMultipleCoils+0x1d8>
    else if (numBytes != byteCnt)
 8004b90:	7efb      	ldrb	r3, [r7, #27]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d00e      	beq.n	8004bb8 <TbxMbServerFC15WriteMultipleCoils+0xf4>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	79db      	ldrb	r3, [r3, #7]
 8004b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2203      	movs	r2, #3
 8004bac:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC15WriteMultipleCoils ***/
 8004bb6:	e071      	b.n	8004c9c <TbxMbServerFC15WriteMultipleCoils+0x1d8>
      txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	7a1a      	ldrb	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	721a      	strb	r2, [r3, #8]
      txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	7a5a      	ldrb	r2, [r3, #9]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	725a      	strb	r2, [r3, #9]
      txPacket->pdu.data[2U] = rxPacket->pdu.data[2U];
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	7a9a      	ldrb	r2, [r3, #10]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	729a      	strb	r2, [r3, #10]
      txPacket->pdu.data[3U] = rxPacket->pdu.data[3U];
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	7ada      	ldrb	r2, [r3, #11]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	72da      	strb	r2, [r3, #11]
      txPacket->dataLen = 4U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2204      	movs	r2, #4
 8004bdc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      uint8_t         bitIdx  = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      uint8_t         byteIdx = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      uint8_t const * coilData = &rxPacket->pdu.data[5];
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	330d      	adds	r3, #13
 8004bf0:	617b      	str	r3, [r7, #20]
      for (uint16_t idx = 0U; idx < numCoils; idx++)
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	847b      	strh	r3, [r7, #34]	; 0x22
 8004bf6:	e04c      	b.n	8004c92 <TbxMbServerFC15WriteMultipleCoils+0x1ce>
        uint8_t            coilValue = TBX_OFF;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if ((coilData[byteIdx] & (1U << bitIdx)) != 0U)
 8004bfe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4413      	add	r3, r2
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <TbxMbServerFC15WriteMultipleCoils+0x15c>
          coilValue = TBX_ON;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        srvResult = context->writeCoilFcn(context, startAddr + idx, coilValue);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	8bf9      	ldrh	r1, [r7, #30]
 8004c26:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004c28:	440a      	add	r2, r1
 8004c2a:	b291      	uxth	r1, r2
 8004c2c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	4798      	blx	r3
 8004c34:	4603      	mov	r3, r0
 8004c36:	74fb      	strb	r3, [r7, #19]
        if (srvResult != TBX_MB_SERVER_OK)
 8004c38:	7cfb      	ldrb	r3, [r7, #19]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d015      	beq.n	8004c6a <TbxMbServerFC15WriteMultipleCoils+0x1a6>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	79db      	ldrb	r3, [r3, #7]
 8004c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8004c4c:	7cfb      	ldrb	r3, [r7, #19]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d103      	bne.n	8004c5a <TbxMbServerFC15WriteMultipleCoils+0x196>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	721a      	strb	r2, [r3, #8]
 8004c58:	e002      	b.n	8004c60 <TbxMbServerFC15WriteMultipleCoils+0x19c>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
 8004c68:	e018      	b.n	8004c9c <TbxMbServerFC15WriteMultipleCoils+0x1d8>
        bitIdx++;
 8004c6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c6e:	3301      	adds	r3, #1
 8004c70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (bitIdx == 8U)
 8004c74:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d107      	bne.n	8004c8c <TbxMbServerFC15WriteMultipleCoils+0x1c8>
          bitIdx = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
          byteIdx++;
 8004c82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c86:	3301      	adds	r3, #1
 8004c88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      for (uint16_t idx = 0U; idx < numCoils; idx++)
 8004c8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c8e:	3301      	adds	r3, #1
 8004c90:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c92:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004c94:	8bbb      	ldrh	r3, [r7, #28]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d3ae      	bcc.n	8004bf8 <TbxMbServerFC15WriteMultipleCoils+0x134>
} /*** end of TbxMbServerFC15WriteMultipleCoils ***/
 8004c9a:	e7ff      	b.n	8004c9c <TbxMbServerFC15WriteMultipleCoils+0x1d8>
 8004c9c:	bf00      	nop
 8004c9e:	3728      	adds	r7, #40	; 0x28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	0800537c 	.word	0x0800537c

08004ca8 <TbxMbServerFC16WriteMultipleRegs>:
**
****************************************************************************************/
static void TbxMbServerFC16WriteMultipleRegs(tTbxMbServerCtx       * context,
                                             tTbxMbTpPacket  const * rxPacket,
                                             tTbxMbTpPacket        * txPacket)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <TbxMbServerFC16WriteMultipleRegs+0x1e>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <TbxMbServerFC16WriteMultipleRegs+0x1e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <TbxMbServerFC16WriteMultipleRegs+0x28>
 8004cc6:	f240 5181 	movw	r1, #1409	; 0x581
 8004cca:	4850      	ldr	r0, [pc, #320]	; (8004e0c <TbxMbServerFC16WriteMultipleRegs+0x164>)
 8004ccc:	f7fd fb14 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8096 	beq.w	8004e04 <TbxMbServerFC16WriteMultipleRegs+0x15c>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8092 	beq.w	8004e04 <TbxMbServerFC16WriteMultipleRegs+0x15c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 808e 	beq.w	8004e04 <TbxMbServerFC16WriteMultipleRegs+0x15c>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	3308      	adds	r3, #8
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fe ff95 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	83bb      	strh	r3, [r7, #28]
    uint16_t numRegs   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	330a      	adds	r3, #10
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe ff8e 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 8004d00:	4603      	mov	r3, r0
 8004d02:	837b      	strh	r3, [r7, #26]
    uint8_t  byteCnt   = rxPacket->pdu.data[4];
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	7b1b      	ldrb	r3, [r3, #12]
 8004d08:	767b      	strb	r3, [r7, #25]

    /* Check if a callback function was registered. */
    if (context->writeHoldingRegFcn == NULL)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10e      	bne.n	8004d30 <TbxMbServerFC16WriteMultipleRegs+0x88>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	79db      	ldrb	r3, [r3, #7]
 8004d16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC16WriteMultipleRegs ***/
 8004d2e:	e069      	b.n	8004e04 <TbxMbServerFC16WriteMultipleRegs+0x15c>
    else if (((numRegs < 1U) || (numRegs > 123U)) || (byteCnt != (numRegs * 2U)))
 8004d30:	8b7b      	ldrh	r3, [r7, #26]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d007      	beq.n	8004d46 <TbxMbServerFC16WriteMultipleRegs+0x9e>
 8004d36:	8b7b      	ldrh	r3, [r7, #26]
 8004d38:	2b7b      	cmp	r3, #123	; 0x7b
 8004d3a:	d804      	bhi.n	8004d46 <TbxMbServerFC16WriteMultipleRegs+0x9e>
 8004d3c:	7e7a      	ldrb	r2, [r7, #25]
 8004d3e:	8b7b      	ldrh	r3, [r7, #26]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d00e      	beq.n	8004d64 <TbxMbServerFC16WriteMultipleRegs+0xbc>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	79db      	ldrb	r3, [r3, #7]
 8004d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2203      	movs	r2, #3
 8004d58:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8004d62:	e04f      	b.n	8004e04 <TbxMbServerFC16WriteMultipleRegs+0x15c>
      txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	7a1a      	ldrb	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	721a      	strb	r2, [r3, #8]
      txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	7a5a      	ldrb	r2, [r3, #9]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	725a      	strb	r2, [r3, #9]
      txPacket->pdu.data[2U] = rxPacket->pdu.data[2U];
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	7a9a      	ldrb	r2, [r3, #10]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	729a      	strb	r2, [r3, #10]
      txPacket->pdu.data[3U] = rxPacket->pdu.data[3U];
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	7ada      	ldrb	r2, [r3, #11]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	72da      	strb	r2, [r3, #11]
      txPacket->dataLen = 4U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2204      	movs	r2, #4
 8004d88:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e032      	b.n	8004df8 <TbxMbServerFC16WriteMultipleRegs+0x150>
        regValue = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[5U + (idx * 2U)]);
 8004d92:	7ffb      	ldrb	r3, [r7, #31]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	3305      	adds	r3, #5
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe ff3c 	bl	8003c1c <TbxMbCommonExtractUInt16BE>
 8004da4:	4603      	mov	r3, r0
 8004da6:	82fb      	strh	r3, [r7, #22]
        srvResult = context->writeHoldingRegFcn(context, startAddr + idx, regValue);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	7ffa      	ldrb	r2, [r7, #31]
 8004dae:	b291      	uxth	r1, r2
 8004db0:	8bba      	ldrh	r2, [r7, #28]
 8004db2:	440a      	add	r2, r1
 8004db4:	b291      	uxth	r1, r2
 8004db6:	8afa      	ldrh	r2, [r7, #22]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	4798      	blx	r3
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	757b      	strb	r3, [r7, #21]
        if (srvResult != TBX_MB_SERVER_OK)
 8004dc0:	7d7b      	ldrb	r3, [r7, #21]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d015      	beq.n	8004df2 <TbxMbServerFC16WriteMultipleRegs+0x14a>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	79db      	ldrb	r3, [r3, #7]
 8004dca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8004dd4:	7d7b      	ldrb	r3, [r7, #21]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d103      	bne.n	8004de2 <TbxMbServerFC16WriteMultipleRegs+0x13a>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	721a      	strb	r2, [r3, #8]
 8004de0:	e002      	b.n	8004de8 <TbxMbServerFC16WriteMultipleRegs+0x140>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2204      	movs	r2, #4
 8004de6:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
 8004df0:	e008      	b.n	8004e04 <TbxMbServerFC16WriteMultipleRegs+0x15c>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8004df2:	7ffb      	ldrb	r3, [r7, #31]
 8004df4:	3301      	adds	r3, #1
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	7ffb      	ldrb	r3, [r7, #31]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	8b7a      	ldrh	r2, [r7, #26]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d8c7      	bhi.n	8004d92 <TbxMbServerFC16WriteMultipleRegs+0xea>
} /*** end of TbxMbServerFC16WriteMultipleRegs ***/
 8004e02:	e7ff      	b.n	8004e04 <TbxMbServerFC16WriteMultipleRegs+0x15c>
 8004e04:	bf00      	nop
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	0800537c 	.word	0x0800537c

08004e10 <TbxMbOsalEventInit>:
** \brief     Initialization function for the OSAL module. 
** \attention This function has a built-in protection to make sure it only runs once.
**
****************************************************************************************/
void TbxMbOsalEventInit(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  static uint8_t osalInitialized = TBX_FALSE;

  /* Only run this function once, */
  if (osalInitialized == TBX_FALSE)
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <TbxMbOsalEventInit+0x34>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10e      	bne.n	8004e3a <TbxMbOsalEventInit+0x2a>
  {
    osalInitialized = TBX_TRUE;
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <TbxMbOsalEventInit+0x34>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
    /* Initialize the queue. */
    eventQueue.count = 0U;
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <TbxMbOsalEventInit+0x38>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
    eventQueue.readIdx = 0U;
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <TbxMbOsalEventInit+0x38>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    eventQueue.writeIdx = 0U;
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <TbxMbOsalEventInit+0x38>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  }
} /*** end of TbxMbOsalEventInit ***/
 8004e3a:	bf00      	nop
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	20000a48 	.word	0x20000a48
 8004e48:	20000940 	.word	0x20000940

08004e4c <TbxMbOsalEventPost>:
**            routine, TBX_FALSE otherwise.
**
****************************************************************************************/
void TbxMbOsalEventPost(tTbxMbEvent const * event, 
                        uint8_t             fromIsr)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	70fb      	strb	r3, [r7, #3]
  TBX_UNUSED_ARG(fromIsr);

  /* Verify parameters. */
  TBX_ASSERT(event != NULL);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <TbxMbOsalEventPost+0x1a>
 8004e5e:	216b      	movs	r1, #107	; 0x6b
 8004e60:	4820      	ldr	r0, [pc, #128]	; (8004ee4 <TbxMbOsalEventPost+0x98>)
 8004e62:	f7fd fa49 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (event != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d036      	beq.n	8004eda <TbxMbOsalEventPost+0x8e>
  {
    TbxCriticalSectionEnter();
 8004e6c:	f7fd fa5a 	bl	8002324 <TbxCriticalSectionEnter>
    /* Make sure there is still space in the queue. If not, then the event queue size is
     * set too small. In this case increase the event queue size using configuration
     * macro TBX_MB_EVENT_QUEUE_SIZE.
     */
    TBX_ASSERT(eventQueue.count < TBX_MB_EVENT_QUEUE_SIZE);
 8004e70:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <TbxMbOsalEventPost+0x9c>)
 8004e72:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8004e76:	2b1f      	cmp	r3, #31
 8004e78:	d903      	bls.n	8004e82 <TbxMbOsalEventPost+0x36>
 8004e7a:	2175      	movs	r1, #117	; 0x75
 8004e7c:	4819      	ldr	r0, [pc, #100]	; (8004ee4 <TbxMbOsalEventPost+0x98>)
 8004e7e:	f7fd fa3b 	bl	80022f8 <TbxAssertTrigger>

    /* Only continue with enough space. */
    if (eventQueue.count < TBX_MB_EVENT_QUEUE_SIZE)
 8004e82:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <TbxMbOsalEventPost+0x9c>)
 8004e84:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8004e88:	2b1f      	cmp	r3, #31
 8004e8a:	d824      	bhi.n	8004ed6 <TbxMbOsalEventPost+0x8a>
    {
      /* Store the new event in the queue at the current write index. */
      eventQueue.entries[eventQueue.writeIdx] = *event;
 8004e8c:	4b16      	ldr	r3, [pc, #88]	; (8004ee8 <TbxMbOsalEventPost+0x9c>)
 8004e8e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8004e92:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <TbxMbOsalEventPost+0x9c>)
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4413      	add	r3, r2
 8004e9a:	460a      	mov	r2, r1
 8004e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ea0:	e883 0003 	stmia.w	r3, {r0, r1}
      /* Update the total count. */
      eventQueue.count++;
 8004ea4:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <TbxMbOsalEventPost+0x9c>)
 8004ea6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8004eaa:	3301      	adds	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <TbxMbOsalEventPost+0x9c>)
 8004eb0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
      /* Increment the write index to point to the next entry. */
      eventQueue.writeIdx++;
 8004eb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <TbxMbOsalEventPost+0x9c>)
 8004eb6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8004eba:	3301      	adds	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <TbxMbOsalEventPost+0x9c>)
 8004ec0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
      /* Time to wrap around to the start? */
      if (eventQueue.writeIdx == TBX_MB_EVENT_QUEUE_SIZE)
 8004ec4:	4b08      	ldr	r3, [pc, #32]	; (8004ee8 <TbxMbOsalEventPost+0x9c>)
 8004ec6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d103      	bne.n	8004ed6 <TbxMbOsalEventPost+0x8a>
      {
        eventQueue.writeIdx = 0U;
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <TbxMbOsalEventPost+0x9c>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
      }
    }
    TbxCriticalSectionExit();
 8004ed6:	f7fd fa3f 	bl	8002358 <TbxCriticalSectionExit>
  }
} /*** end of TbxMbOsalEventPost ***/
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	080053a8 	.word	0x080053a8
 8004ee8:	20000940 	.word	0x20000940

08004eec <TbxMbOsalEventWait>:
** \return    TBX_TRUE if an event occurred, TBX_FALSE otherwise (typically a timeout).
**
****************************************************************************************/
uint8_t TbxMbOsalEventWait(tTbxMbEvent * event,
                           uint16_t      timeoutMs)
{
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	807b      	strh	r3, [r7, #2]
  uint8_t result = TBX_FALSE;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]

  TBX_UNUSED_ARG(timeoutMs);

  /* Verify parameters. */
  TBX_ASSERT(event != NULL);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <TbxMbOsalEventWait+0x1e>
 8004f02:	219b      	movs	r1, #155	; 0x9b
 8004f04:	481d      	ldr	r0, [pc, #116]	; (8004f7c <TbxMbOsalEventWait+0x90>)
 8004f06:	f7fd f9f7 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (event != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d02f      	beq.n	8004f70 <TbxMbOsalEventWait+0x84>
  {
    TbxCriticalSectionEnter();
 8004f10:	f7fd fa08 	bl	8002324 <TbxCriticalSectionEnter>
    /* Is there an event available in the queue? */
    if (eventQueue.count > 0U)
 8004f14:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <TbxMbOsalEventWait+0x94>)
 8004f16:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d026      	beq.n	8004f6c <TbxMbOsalEventWait+0x80>
    {
      /* Retrieve the event from the queue at the read index (oldest).  */
      *event = eventQueue.entries[eventQueue.readIdx];
 8004f1e:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <TbxMbOsalEventWait+0x94>)
 8004f20:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <TbxMbOsalEventWait+0x94>)
 8004f28:	460c      	mov	r4, r1
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f32:	e884 0003 	stmia.w	r4, {r0, r1}
      /* Update the total count. */
      eventQueue.count--;
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <TbxMbOsalEventWait+0x94>)
 8004f38:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <TbxMbOsalEventWait+0x94>)
 8004f42:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
      /* Increment the read index to point to the next entry. */
      eventQueue.readIdx++;
 8004f46:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <TbxMbOsalEventWait+0x94>)
 8004f48:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <TbxMbOsalEventWait+0x94>)
 8004f52:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
      /* Time to wrap around to the start? */
      if (eventQueue.readIdx == TBX_MB_EVENT_QUEUE_SIZE)
 8004f56:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <TbxMbOsalEventWait+0x94>)
 8004f58:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d103      	bne.n	8004f68 <TbxMbOsalEventWait+0x7c>
      {
        eventQueue.readIdx = 0U;
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <TbxMbOsalEventWait+0x94>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
      }
      /* Update the result. */
      result = TBX_TRUE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
    }
    TbxCriticalSectionExit();
 8004f6c:	f7fd f9f4 	bl	8002358 <TbxCriticalSectionExit>
  }
  /* Give the result back to the caller. */
  return result;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxMbOsalEventWait ***/
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd90      	pop	{r4, r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	080053a8 	.word	0x080053a8
 8004f80:	20000940 	.word	0x20000940

08004f84 <TbxMbOsalSemCreate>:
** \return    Handle to the newly created binary semaphore object if successful, NULL
**            otherwise.
**
****************************************************************************************/
tTbxMbOsalSem TbxMbOsalSemCreate(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
  tTbxMbOsalSem result = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	607b      	str	r3, [r7, #4]

  /* Allocate memory for the new semaphore context. */
  tTbxMbOsalSemCtx * newSemCtx = TbxMemPoolAllocate(sizeof(tTbxMbOsalSemCtx));
 8004f8e:	2002      	movs	r0, #2
 8004f90:	f7fd fd26 	bl	80029e0 <TbxMemPoolAllocate>
 8004f94:	6038      	str	r0, [r7, #0]
  /* Automatically increase the memory pool, if it was too small. */
  if (newSemCtx == NULL)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d107      	bne.n	8004fac <TbxMbOsalSemCreate+0x28>
  {
    /* No need to check the return value, because if it failed, the following
     * allocation fails too, which is verified later on.
     */
    (void)TbxMemPoolCreate(1U, sizeof(tTbxMbOsalSemCtx));
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	f7fd fc7c 	bl	800289c <TbxMemPoolCreate>
    newSemCtx = TbxMemPoolAllocate(sizeof(tTbxMbOsalSemCtx));      
 8004fa4:	2002      	movs	r0, #2
 8004fa6:	f7fd fd1b 	bl	80029e0 <TbxMemPoolAllocate>
 8004faa:	6038      	str	r0, [r7, #0]
  }
  /* Verify memory allocation of the semaphore context. */
  TBX_ASSERT(newSemCtx != NULL);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <TbxMbOsalSemCreate+0x36>
 8004fb2:	21d0      	movs	r1, #208	; 0xd0
 8004fb4:	4809      	ldr	r0, [pc, #36]	; (8004fdc <TbxMbOsalSemCreate+0x58>)
 8004fb6:	f7fd f99f 	bl	80022f8 <TbxAssertTrigger>
  /* Only continue if the memory allocation succeeded. */
  if (newSemCtx != NULL)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <TbxMbOsalSemCreate+0x4c>
  {
    /* Initialize the semaphore in a taken state. */
    newSemCtx->type = TBX_MB_OSAL_SEM_CONTEXT_TYPE;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	224c      	movs	r2, #76	; 0x4c
 8004fc4:	701a      	strb	r2, [r3, #0]
    newSemCtx->count = 0U;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	705a      	strb	r2, [r3, #1]
    /* Update the result. */
    result = newSemCtx;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	607b      	str	r3, [r7, #4]
  }
  /* Give the result back to the caller. */
  return result;
 8004fd0:	687b      	ldr	r3, [r7, #4]
} /*** end of TbxMbOsalSemCreate ***/
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	080053a8 	.word	0x080053a8

08004fe0 <TbxMbOsalSemGive>:
**            routine, TBX_FALSE otherwise.
**
****************************************************************************************/
void TbxMbOsalSemGive(tTbxMbOsalSem sem,
                      uint8_t       fromIsr)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
  TBX_UNUSED_ARG(fromIsr);

  /* Verify parameters. */
  TBX_ASSERT(sem != NULL);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d104      	bne.n	8004ffc <TbxMbOsalSemGive+0x1c>
 8004ff2:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004ff6:	480e      	ldr	r0, [pc, #56]	; (8005030 <TbxMbOsalSemGive+0x50>)
 8004ff8:	f7fd f97e 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (sem != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d011      	beq.n	8005026 <TbxMbOsalSemGive+0x46>
  {
    /* Convert the semaphore pointer to the context structure. */
    tTbxMbOsalSemCtx * semCtx = (tTbxMbOsalSemCtx *)sem;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60fb      	str	r3, [r7, #12]
    /* Sanity check on the context type. */
    TBX_ASSERT(semCtx->type == TBX_MB_OSAL_SEM_CONTEXT_TYPE);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b4c      	cmp	r3, #76	; 0x4c
 800500c:	d004      	beq.n	8005018 <TbxMbOsalSemGive+0x38>
 800500e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8005012:	4807      	ldr	r0, [pc, #28]	; (8005030 <TbxMbOsalSemGive+0x50>)
 8005014:	f7fd f970 	bl	80022f8 <TbxAssertTrigger>
    /* Give the semaphore by setting its count to 1. */
    TbxCriticalSectionEnter();
 8005018:	f7fd f984 	bl	8002324 <TbxCriticalSectionEnter>
    semCtx->count = 1U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	705a      	strb	r2, [r3, #1]
    TbxCriticalSectionExit();
 8005022:	f7fd f999 	bl	8002358 <TbxCriticalSectionExit>
  }
} /*** end of TbxMbOsalSemGive ***/
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	080053a8 	.word	0x080053a8

08005034 <TbxMbOsalSemTake>:
**            timeout).
**
****************************************************************************************/
uint8_t TbxMbOsalSemTake(tTbxMbOsalSem sem,
                         uint16_t      timeoutMs)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	807b      	strh	r3, [r7, #2]
  uint8_t result = TBX_FALSE;
 8005040:	2300      	movs	r3, #0
 8005042:	75fb      	strb	r3, [r7, #23]

  /* Verify parameters. */
  TBX_ASSERT(sem != NULL);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d104      	bne.n	8005054 <TbxMbOsalSemTake+0x20>
 800504a:	f240 1125 	movw	r1, #293	; 0x125
 800504e:	4834      	ldr	r0, [pc, #208]	; (8005120 <TbxMbOsalSemTake+0xec>)
 8005050:	f7fd f952 	bl	80022f8 <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (sem != NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d05d      	beq.n	8005116 <TbxMbOsalSemTake+0xe2>
  {
    /* Convert the semaphore pointer to the context structure. */
    tTbxMbOsalSemCtx * semCtx = (tTbxMbOsalSemCtx *)sem;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	613b      	str	r3, [r7, #16]
    /* Sanity check on the context type. */
    TBX_ASSERT(semCtx->type == TBX_MB_OSAL_SEM_CONTEXT_TYPE);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b4c      	cmp	r3, #76	; 0x4c
 8005064:	d004      	beq.n	8005070 <TbxMbOsalSemTake+0x3c>
 8005066:	f240 112d 	movw	r1, #301	; 0x12d
 800506a:	482d      	ldr	r0, [pc, #180]	; (8005120 <TbxMbOsalSemTake+0xec>)
 800506c:	f7fd f944 	bl	80022f8 <TbxAssertTrigger>
    /* Is the semaphore currently available? */
    TbxCriticalSectionEnter();
 8005070:	f7fd f958 	bl	8002324 <TbxCriticalSectionEnter>
    if (semCtx->count > 0U)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <TbxMbOsalSemTake+0x54>
    {
      /* Take the semaphore and update the result for success. */
      semCtx->count = 0U;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2200      	movs	r2, #0
 8005080:	705a      	strb	r2, [r3, #1]
      result = TBX_TRUE;
 8005082:	2301      	movs	r3, #1
 8005084:	75fb      	strb	r3, [r7, #23]
 8005086:	e044      	b.n	8005112 <TbxMbOsalSemTake+0xde>
     * before the specified timeout. 
     */
    else
    {
      /* Keep track of when the last millisecond was detected. */
      uint16_t volatile lastMsTickTime = TbxMbPortTimerCount();
 8005088:	f7fe f84a 	bl	8003120 <TbxMbPortTimerCount>
 800508c:	4603      	mov	r3, r0
 800508e:	817b      	strh	r3, [r7, #10]
      /* Initialize variable with the actual number of milliseconds to wait. */
      uint16_t volatile waitTimeMs = timeoutMs;
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	813b      	strh	r3, [r7, #8]
      /* Enter wait loop. */
      while (waitTimeMs > 0U)
 8005094:	e039      	b.n	800510a <TbxMbOsalSemTake+0xd6>
      {
        /* Temporarily leave the critical section. */
        TbxCriticalSectionExit();
 8005096:	f7fd f95f 	bl	8002358 <TbxCriticalSectionExit>
        /* Run the event task to make sure that whatever is supposed to give the
         * semaphore can actually do so.
         */
        TbxMbEventTask();
 800509a:	f7fd ff5f 	bl	8002f5c <TbxMbEventTask>
        /* Get the number of ticks that elapsed since the last millisecond detection. 
         * Note that this calculation works, even if the 20 kHz timer counter
         * overflowed.
         */
        uint16_t deltaTicks = TbxMbPortTimerCount() - lastMsTickTime;
 800509e:	f7fe f83f 	bl	8003120 <TbxMbPortTimerCount>
 80050a2:	4603      	mov	r3, r0
 80050a4:	461a      	mov	r2, r3
 80050a6:	897b      	ldrh	r3, [r7, #10]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	81fb      	strh	r3, [r7, #14]
        /* Determine how many milliseconds passed since the last one was detected. */
        uint16_t deltaMs = deltaTicks / 20U;
 80050ae:	89fb      	ldrh	r3, [r7, #14]
 80050b0:	4a1c      	ldr	r2, [pc, #112]	; (8005124 <TbxMbOsalSemTake+0xf0>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	091b      	lsrs	r3, r3, #4
 80050b8:	81bb      	strh	r3, [r7, #12]
        /* Did one or more milliseconds pass? */
        if (deltaMs > 0U)
 80050ba:	89bb      	ldrh	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d018      	beq.n	80050f2 <TbxMbOsalSemTake+0xbe>
        {
          /* Update the last millisecond detection tick time. Needed for the detection
           * of the next millisecond. Note that this calculation works, even if the
           * lastMsTickTime variable overflows.
           */
          lastMsTickTime += (deltaMs * 20U);
 80050c0:	89bb      	ldrh	r3, [r7, #12]
 80050c2:	461a      	mov	r2, r3
 80050c4:	0092      	lsls	r2, r2, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	897b      	ldrh	r3, [r7, #10]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	4413      	add	r3, r2
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	817b      	strh	r3, [r7, #10]
          /* Subtract the elapsed milliseconds from the remaining wait time, with
           * underflow protection. Note that the wait loop automatically stops when
           * waitTimeMs becomes zero.
           */
          if (waitTimeMs >= deltaMs)
 80050d6:	893b      	ldrh	r3, [r7, #8]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	89ba      	ldrh	r2, [r7, #12]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d806      	bhi.n	80050ee <TbxMbOsalSemTake+0xba>
          {
            waitTimeMs -= deltaMs;
 80050e0:	893b      	ldrh	r3, [r7, #8]
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	89bb      	ldrh	r3, [r7, #12]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	813b      	strh	r3, [r7, #8]
 80050ec:	e001      	b.n	80050f2 <TbxMbOsalSemTake+0xbe>
          }
          else
          {
            waitTimeMs = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	813b      	strh	r3, [r7, #8]
          }
        }
        /* Re-enter the critical section. */
        TbxCriticalSectionEnter();
 80050f2:	f7fd f917 	bl	8002324 <TbxCriticalSectionEnter>
        /* Did the semaphore become available? */
        if (semCtx->count > 0U)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <TbxMbOsalSemTake+0xd6>
        {
          /* Take the semaphore, update the result for success, and leave the loop. */
          semCtx->count = 0U;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2200      	movs	r2, #0
 8005102:	705a      	strb	r2, [r3, #1]
          result = TBX_TRUE;
 8005104:	2301      	movs	r3, #1
 8005106:	75fb      	strb	r3, [r7, #23]
          break;
 8005108:	e003      	b.n	8005112 <TbxMbOsalSemTake+0xde>
      while (waitTimeMs > 0U)
 800510a:	893b      	ldrh	r3, [r7, #8]
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1c1      	bne.n	8005096 <TbxMbOsalSemTake+0x62>
        }
      }
    }
    TbxCriticalSectionExit();
 8005112:	f7fd f921 	bl	8002358 <TbxCriticalSectionExit>
  }
  /* Give the result back to the caller. */
  return result;
 8005116:	7dfb      	ldrb	r3, [r7, #23]
} /*** end of TbxMbOsalSemTake ****/
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	080053a8 	.word	0x080053a8
 8005124:	cccccccd 	.word	0xcccccccd

08005128 <TbxMbUartInit>:
                   tTbxMbUartDatabits         databits, 
                   tTbxMbUartStopbits         stopbits,
                   tTbxMbUartParity           parity,
                   tTbxMbUartTransmitComplete transmitCompleteFcn,
                   tTbxMbUartDataReceived     dataReceivedFcn)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b085      	sub	sp, #20
 800512c:	af02      	add	r7, sp, #8
 800512e:	4604      	mov	r4, r0
 8005130:	4608      	mov	r0, r1
 8005132:	4611      	mov	r1, r2
 8005134:	461a      	mov	r2, r3
 8005136:	4623      	mov	r3, r4
 8005138:	71fb      	strb	r3, [r7, #7]
 800513a:	4603      	mov	r3, r0
 800513c:	71bb      	strb	r3, [r7, #6]
 800513e:	460b      	mov	r3, r1
 8005140:	717b      	strb	r3, [r7, #5]
 8005142:	4613      	mov	r3, r2
 8005144:	713b      	strb	r3, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((port < TBX_MB_UART_NUM_PORT) && 
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	2b07      	cmp	r3, #7
 800514a:	d80b      	bhi.n	8005164 <TbxMbUartInit+0x3c>
 800514c:	79bb      	ldrb	r3, [r7, #6]
 800514e:	2b07      	cmp	r3, #7
 8005150:	d808      	bhi.n	8005164 <TbxMbUartInit+0x3c>
 8005152:	797b      	ldrb	r3, [r7, #5]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d805      	bhi.n	8005164 <TbxMbUartInit+0x3c>
 8005158:	793b      	ldrb	r3, [r7, #4]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d802      	bhi.n	8005164 <TbxMbUartInit+0x3c>
 800515e:	7e3b      	ldrb	r3, [r7, #24]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d903      	bls.n	800516c <TbxMbUartInit+0x44>
 8005164:	2151      	movs	r1, #81	; 0x51
 8005166:	4815      	ldr	r0, [pc, #84]	; (80051bc <TbxMbUartInit+0x94>)
 8005168:	f7fd f8c6 	bl	80022f8 <TbxAssertTrigger>
             (databits < TBX_MB_UART_NUM_DATABITS) &&
             (stopbits < TBX_MB_UART_NUM_STOPBITS) &&
             (parity < TBX_MB_UART_NUM_PARITY));

  /* Only continue with valid parameters. */
  if ((port < TBX_MB_UART_NUM_PORT) && 
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	2b07      	cmp	r3, #7
 8005170:	d81f      	bhi.n	80051b2 <TbxMbUartInit+0x8a>
 8005172:	79bb      	ldrb	r3, [r7, #6]
 8005174:	2b07      	cmp	r3, #7
 8005176:	d81c      	bhi.n	80051b2 <TbxMbUartInit+0x8a>
      (baudrate < TBX_MB_UART_NUM_BAUDRATE) &&
 8005178:	797b      	ldrb	r3, [r7, #5]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d819      	bhi.n	80051b2 <TbxMbUartInit+0x8a>
      (databits < TBX_MB_UART_NUM_DATABITS) &&
 800517e:	793b      	ldrb	r3, [r7, #4]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d816      	bhi.n	80051b2 <TbxMbUartInit+0x8a>
      (stopbits < TBX_MB_UART_NUM_STOPBITS) &&
 8005184:	7e3b      	ldrb	r3, [r7, #24]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d813      	bhi.n	80051b2 <TbxMbUartInit+0x8a>
      (parity < TBX_MB_UART_NUM_PARITY))
  {
    /* Store the specified callback functions. */
    uartInfo[port].transmitCompleteFcn = transmitCompleteFcn;
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	490c      	ldr	r1, [pc, #48]	; (80051c0 <TbxMbUartInit+0x98>)
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    uartInfo[port].dataReceivedFcn = dataReceivedFcn;
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <TbxMbUartInit+0x98>)
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	4413      	add	r3, r2
 800519c:	6a3a      	ldr	r2, [r7, #32]
 800519e:	605a      	str	r2, [r3, #4]
    /* Request the port module to perform the low-level UART initialization. */
    TbxMbPortUartInit(port, baudrate, databits, stopbits, parity);
 80051a0:	793c      	ldrb	r4, [r7, #4]
 80051a2:	797a      	ldrb	r2, [r7, #5]
 80051a4:	79b9      	ldrb	r1, [r7, #6]
 80051a6:	79f8      	ldrb	r0, [r7, #7]
 80051a8:	7e3b      	ldrb	r3, [r7, #24]
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	4623      	mov	r3, r4
 80051ae:	f7fd ff7f 	bl	80030b0 <TbxMbPortUartInit>
  }
} /*** end of TbxMbUartInit ***/  
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd90      	pop	{r4, r7, pc}
 80051ba:	bf00      	nop
 80051bc:	080053d8 	.word	0x080053d8
 80051c0:	20000a4c 	.word	0x20000a4c

080051c4 <TbxMbUartTransmit>:
**
****************************************************************************************/
uint8_t TbxMbUartTransmit(tTbxMbUartPort         port, 
                          uint8_t        const * data, 
                          uint16_t               len)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	6039      	str	r1, [r7, #0]
 80051ce:	71fb      	strb	r3, [r7, #7]
 80051d0:	4613      	mov	r3, r2
 80051d2:	80bb      	strh	r3, [r7, #4]
  uint8_t result = TBX_ERROR;
 80051d4:	2300      	movs	r3, #0
 80051d6:	73fb      	strb	r3, [r7, #15]

  /* Verify parameters. */
  TBX_ASSERT((port < TBX_MB_UART_NUM_PORT) && 
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	2b07      	cmp	r3, #7
 80051dc:	d805      	bhi.n	80051ea <TbxMbUartTransmit+0x26>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <TbxMbUartTransmit+0x26>
 80051e4:	88bb      	ldrh	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d103      	bne.n	80051f2 <TbxMbUartTransmit+0x2e>
 80051ea:	217b      	movs	r1, #123	; 0x7b
 80051ec:	480c      	ldr	r0, [pc, #48]	; (8005220 <TbxMbUartTransmit+0x5c>)
 80051ee:	f7fd f883 	bl	80022f8 <TbxAssertTrigger>
             (data != NULL) &&
             (len > 0U));

  /* Only continue with valid parameters. */
  if ((port < TBX_MB_UART_NUM_PORT) && 
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	2b07      	cmp	r3, #7
 80051f6:	d80d      	bhi.n	8005214 <TbxMbUartTransmit+0x50>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <TbxMbUartTransmit+0x50>
      (data != NULL) &&
 80051fe:	88bb      	ldrh	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <TbxMbUartTransmit+0x50>
      (len > 0U))
  {
    /* Request the port module to perform the low-level UART data transmission. */
    result = TbxMbPortUartTransmit(port, data, len);
 8005204:	88ba      	ldrh	r2, [r7, #4]
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fd ff64 	bl	80030d8 <TbxMbPortUartTransmit>
 8005210:	4603      	mov	r3, r0
 8005212:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxMbUartTransmit ***/
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	080053d8 	.word	0x080053d8

08005224 <__libc_init_array>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	4d0d      	ldr	r5, [pc, #52]	; (800525c <__libc_init_array+0x38>)
 8005228:	4c0d      	ldr	r4, [pc, #52]	; (8005260 <__libc_init_array+0x3c>)
 800522a:	1b64      	subs	r4, r4, r5
 800522c:	10a4      	asrs	r4, r4, #2
 800522e:	2600      	movs	r6, #0
 8005230:	42a6      	cmp	r6, r4
 8005232:	d109      	bne.n	8005248 <__libc_init_array+0x24>
 8005234:	4d0b      	ldr	r5, [pc, #44]	; (8005264 <__libc_init_array+0x40>)
 8005236:	4c0c      	ldr	r4, [pc, #48]	; (8005268 <__libc_init_array+0x44>)
 8005238:	f000 f820 	bl	800527c <_init>
 800523c:	1b64      	subs	r4, r4, r5
 800523e:	10a4      	asrs	r4, r4, #2
 8005240:	2600      	movs	r6, #0
 8005242:	42a6      	cmp	r6, r4
 8005244:	d105      	bne.n	8005252 <__libc_init_array+0x2e>
 8005246:	bd70      	pop	{r4, r5, r6, pc}
 8005248:	f855 3b04 	ldr.w	r3, [r5], #4
 800524c:	4798      	blx	r3
 800524e:	3601      	adds	r6, #1
 8005250:	e7ee      	b.n	8005230 <__libc_init_array+0xc>
 8005252:	f855 3b04 	ldr.w	r3, [r5], #4
 8005256:	4798      	blx	r3
 8005258:	3601      	adds	r6, #1
 800525a:	e7f2      	b.n	8005242 <__libc_init_array+0x1e>
 800525c:	08005620 	.word	0x08005620
 8005260:	08005620 	.word	0x08005620
 8005264:	08005620 	.word	0x08005620
 8005268:	08005624 	.word	0x08005624

0800526c <memset>:
 800526c:	4402      	add	r2, r0
 800526e:	4603      	mov	r3, r0
 8005270:	4293      	cmp	r3, r2
 8005272:	d100      	bne.n	8005276 <memset+0xa>
 8005274:	4770      	bx	lr
 8005276:	f803 1b01 	strb.w	r1, [r3], #1
 800527a:	e7f9      	b.n	8005270 <memset+0x4>

0800527c <_init>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	bf00      	nop
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr

08005288 <_fini>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	bf00      	nop
 800528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528e:	bc08      	pop	{r3}
 8005290:	469e      	mov	lr, r3
 8005292:	4770      	bx	lr
